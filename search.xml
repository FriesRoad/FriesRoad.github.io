<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>更新</title>
      <link href="/2023/01/30/geng-xin/"/>
      <url>/2023/01/30/geng-xin/</url>
      
        <content type="html"><![CDATA[<h2 id="更新内容"><a href="#更新内容" class="headerlink" title="更新内容"></a>更新内容</h2><p>文章插入图片</p><p>logo设计更改</p><p>主题色设计更改</p><p>菜单栏优化</p><p>优化文章模板</p>]]></content>
      
      
      
        <tags>
            
            <tag> 日志 </tag>
            
            <tag> 笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java</title>
      <link href="/2023/01/30/lu-yao-java/"/>
      <url>/2023/01/30/lu-yao-java/</url>
      
        <content type="html"><![CDATA[<h1 id="1简介"><a href="#1简介" class="headerlink" title="1简介"></a>1简介</h1><p><img src="/images/%E8%B7%AF%E9%81%A5java/image-20220504093541040.png" alt="image-20220504093541040"></p><p><img src="/images/%E8%B7%AF%E9%81%A5java/image-20220504093601068.png" alt="image-20220504093601068"></p><h1 id="2环境配置"><a href="#2环境配置" class="headerlink" title="2环境配置"></a>2环境配置</h1><p><a href="https://www.oracle.com/java/technologies/downloads/#java11-windows">https://www.oracle.com/java/technologies/downloads/#java11-windows</a></p><pre class="line-numbers language-cmd" data-language="cmd"><code class="language-cmd">java -versionjava version "1.8.0_311"Java(TM) SE Runtime Environment (build 1.8.0_311-b11)Java HotSpot(TM) 64-Bit Server VM (build 25.311-b11, mixed mode)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-1path"><a href="#2-1path" class="headerlink" title="2.1path"></a>2.1path</h2><p>指定命令搜索路径</p><pre class="line-numbers language-cmd" data-language="cmd"><code class="language-cmd">C:\Java\jdk1.8.0_141\bin<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="2-2JAVA-HOME"><a href="#2-2JAVA-HOME" class="headerlink" title="2.2JAVA_HOME"></a>2.2JAVA_HOME</h2><p>指定JDK安装目录</p><pre class="line-numbers language-cmd" data-language="cmd"><code class="language-cmd">C:\Java\jdk1.8.0_141<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="2-3CLASSPATH"><a href="#2-3CLASSPATH" class="headerlink" title="2.3CLASSPATH"></a>2.3CLASSPATH</h2><p>指定类搜索路径</p><pre class="line-numbers language-cmd" data-language="cmd"><code class="language-cmd">.;%JAVA_HOME%\lib\dt.jar;%JAVA_HOME%\lib\tools.jar<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="3JDK"><a href="#3JDK" class="headerlink" title="3JDK"></a>3JDK</h1><p><img src="/images/%E8%B7%AF%E9%81%A5java/image-20210705112617940.png" alt="image-20210705112617940"></p><ul><li><p><strong>JDK</strong>（Java Development Kit）开发工具包</p></li><li><p><strong>JRE</strong>（Java Running Environment） 运行时环境</p></li><li><p><strong>JVM</strong>（Java Virtual Machine）Java虚拟机，跨平台（跨操作系统）</p></li></ul><h1 id="3虚拟机"><a href="#3虚拟机" class="headerlink" title="3虚拟机"></a>3虚拟机</h1><p>虚拟机（Virtual Machine）就是一台虚拟的计算机（软件）</p><p>系统虚拟机软件：VisualBox，VMware</p><p>程序虚拟机：HotSpot，JRockit，J9(IBM)</p><h1 id="4JVM"><a href="#4JVM" class="headerlink" title="4JVM"></a>4JVM</h1><p><img src="/images/%E8%B7%AF%E9%81%A5java/image-20220504103601575.png" alt="image-20220504103601575"></p><p><img src="/images/%E8%B7%AF%E9%81%A5java/JVM%E8%B7%A8%E8%AF%AD%E8%A8%80.webp" alt="JVM跨语言"></p><h1 id="6Java-Platform"><a href="#6Java-Platform" class="headerlink" title="6Java Platform"></a>6Java Platform</h1><p>JAVA SE (标准版)  java语言核心</p><p>JAVA EE（企业版）</p><p>JAVA ME（微型版）</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> hello <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"hello world"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/images/%E8%B7%AF%E9%81%A5java/image-20210705112711709.png" alt="image-20210705112711709"></p><pre class="line-numbers language-cmd" data-language="cmd"><code class="language-cmd">#编译,生成字节码文件（.class）javac xxx.java#运行java xxx<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/images/%E8%B7%AF%E9%81%A5java/%E9%AB%98%E7%BA%A7%E8%AF%AD%E8%A8%80.png" alt="高级语言"></p><h1 id="7IDEA"><a href="#7IDEA" class="headerlink" title="7IDEA"></a>7IDEA</h1><p>集成化开发工具</p><p>项目：project</p><p>模块：module</p><h1 id="8Git"><a href="#8Git" class="headerlink" title="8Git"></a>8Git</h1><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#增加一个新的远程仓库，并命名</span><span class="token function">git</span> remote <span class="token function">add</span> java22 https://gitee.com/luyao/java22.git<span class="token comment">#显示所有远程仓库</span><span class="token function">git</span> remote <span class="token parameter variable">-v</span><span class="token comment"># 强行推送当前分支到远程仓库，即使有冲突</span><span class="token function">git</span> push java22 <span class="token parameter variable">--force</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="9基础语法"><a href="#9基础语法" class="headerlink" title="9基础语法"></a>9基础语法</h1><h2 id="9-1注释"><a href="#9-1注释" class="headerlink" title="9.1注释"></a>9.1注释</h2><ul><li>单行注释 //  ctrl + /</li><li>多行注释 /<strong>/</strong></li><li>文档注释 /** */</li></ul><p><strong>作用</strong></p><ul><li>调试代码</li><li>注解释义</li></ul><p>Shift(两次)</p><p><img src="/images/%E8%B7%AF%E9%81%A5java/image-20220505133941265.png" alt="image-20220505133941265"></p><p><img src="/images/%E8%B7%AF%E9%81%A5java/image-20220505134009777.png" alt="image-20220505134009777"></p><h2 id="9-2关键字"><a href="#9-2关键字" class="headerlink" title="9.2关键字"></a>9.2关键字</h2><p><img src="/images/%E8%B7%AF%E9%81%A5java/%E5%85%B3%E9%94%AE%E5%AD%97.png" alt="关键字"></p><h2 id="9-3变量"><a href="#9-3变量" class="headerlink" title="9.3变量"></a>9.3变量</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/*  强类型语言  语法:  数据类型 变量名 = 值;*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="9-4数据类型"><a href="#9-4数据类型" class="headerlink" title="9.4数据类型"></a>9.4数据类型</h2><p><img src="/images/%E8%B7%AF%E9%81%A5java/image-20211124123512706.png" alt="image-20211124123512706"></p><p><img src="/images/%E8%B7%AF%E9%81%A5java/%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B-1651730569174.png" alt="数据类型"></p><h2 id="9-5类型转换"><a href="#9-5类型转换" class="headerlink" title="9.5类型转换"></a>9.5类型转换</h2><p><img src="/images/%E8%B7%AF%E9%81%A5java/%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2.png" alt="类型转换"></p><p><img src="/images/%E8%B7%AF%E9%81%A5java/image-20220505170105575.png" alt="image-20220505170105575"></p><h2 id="9-6运算符"><a href="#9-6运算符" class="headerlink" title="9.6运算符"></a>9.6运算符</h2><ol><li>算术</li><li>赋值</li><li>比较</li><li>逻辑</li><li>位运算</li><li>三目</li></ol><h2 id="9-7语句"><a href="#9-7语句" class="headerlink" title="9.7语句"></a>9.7语句</h2><ol><li>判断 <ul><li>if</li><li>if…else</li><li>if…else if</li></ul></li><li>选择<ul><li>switch</li></ul></li><li>循环<ul><li>for</li><li>while</li><li>do…while</li><li>break</li><li>continue</li></ul></li></ol><h2 id="9-8方法"><a href="#9-8方法" class="headerlink" title="9.8方法"></a>9.8方法</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java">权限修饰符 返回值类型 方法名<span class="token punctuation">(</span>形参类型 形参名<span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  语句<span class="token punctuation">;</span>  <span class="token keyword">return</span> 返回值<span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token number">1.</span>当方法没有返回值时，返回类型用<span class="token keyword">void</span>关键字<span class="token number">2.</span>方法重载<span class="token number">3.</span>可变参数<span class="token number">4.</span>参数传递<span class="token punctuation">(</span>值，址<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="10快捷键"><a href="#10快捷键" class="headerlink" title="10快捷键"></a>10快捷键</h1><ol><li>ctrl + y 删除一整行</li><li>ctrl + d 复制一行</li><li>ctrl + alt + l 格式化</li><li>ctrl + alt + v 自动生成变量名</li><li>alt + insert 生成构造方法，</li><li>alt + enter 自动实现抽象方法</li><li>ctrl + shift + u 大小写</li><li>ctrl + alt + m 生成方法</li><li>ctrl + alt + t 生成try</li></ol><h1 id="11面向对象"><a href="#11面向对象" class="headerlink" title="11面向对象"></a>11面向对象</h1><h2 id="11-1类，对象"><a href="#11-1类，对象" class="headerlink" title="11.1类，对象"></a>11.1类，对象</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/*  描述：类  1.属性（数据）  2.行为（功能）    类定义：  权限修饰符 class 类名 {    成员变量（属性）;    成员方法（行为）;  }    成员方法（一般方法，构造方法）    类名首字母大写    创建对象: new 类名()    对象：实体，容器，自定义类型（对基本数据类型的扩展）    成员变量和局部变量的区别：  1.成员变量定义在类中，作用范围是整个类    局部变量定义在方法中，语句中，局部代码块中，作用范围是所属区域  2.成员变量在堆内存的对象中，随着对象的创建而存在，随着对象的销毁而销毁，有默认值    局部变量在栈内存的方法中，随着所属区域的执行而存在，随着所属区域的完成而销毁，没有默认值*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="11-2包"><a href="#11-2包" class="headerlink" title="11.2包"></a>11.2包</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/*  包:package  管理类文件  命名：域名，com.bwf.xxx  类有了包之后，再使用时，要写全路径名（包名.包名...类名）  import*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="11-3构造方法"><a href="#11-3构造方法" class="headerlink" title="11.3构造方法"></a>11.3构造方法</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/*      构造方法：构建对象时调用的方法，初始化对象      1.方法名就是类名      2.没有返回类型            有return      java中，每个类至少有一个构造方法，为了保证这一点，如果用户没有显示定义任何构造方法，      JVM将自动提供一个隐含的默认构造方法      如果类中显示定义了一个或多个构造方法，那么默认构造方法就没有了      this：代表当前对象（创建对象时，哪个对象调用了this所在的构造方法，this就代表那个对象）      构造方法和一般方法区别：      1.构造方法：对象创建时，被调用一次，初始化对象      2.一般方法：对象创建后，可被调用多次，提供功能     */</span>     <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="11-4继承"><a href="#11-4继承" class="headerlink" title="11.4继承"></a>11.4继承</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/*  类和类之间产生关系(父子)  子类 extends 父类  1.继承成员变量（包括private，但不能用）  2.当new子类对象时，一定会先调用父类的构造方法，对父类中的成员变量进行初始化，再调子类的构造方法，对子       类中的成员变量初始化  3.在构造方法的第一行有一条隐士的语句super()*/</span><span class="token comment">/*  重载(overloading):本类中  重写（override）:子父类中*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="11-5封装"><a href="#11-5封装" class="headerlink" title="11.5封装"></a>11.5封装</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token number">1.</span><span class="token keyword">private</span><span class="token number">2.</span><span class="token keyword">package</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="/images/%E8%B7%AF%E9%81%A5java/%E6%9D%83%E9%99%90%E4%BF%AE%E9%A5%B0%E7%AC%A6.jpg" alt="权限修饰符"></p><pre class="line-numbers language-java" data-language="java"><code class="language-java">权限修饰符：<span class="token number">1.</span><span class="token keyword">private</span> <span class="token punctuation">(</span>成员变量，构造方法，一般方法<span class="token punctuation">)</span><span class="token number">2.</span><span class="token keyword">public</span> <span class="token punctuation">(</span>类，成员变量，构造方法，一般方法<span class="token punctuation">)</span><span class="token number">3.</span><span class="token keyword">protected</span> <span class="token punctuation">(</span>成员变量，构造方法，一般方法<span class="token punctuation">)</span><span class="token number">4.</span><span class="token keyword">default</span> <span class="token punctuation">(</span>类，成员变量，构造方法，一般方法<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="11-6多态"><a href="#11-6多态" class="headerlink" title="11.6多态"></a>11.6多态</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/*  多态：父类指向子类对象  1.向上转型（转成父类），不能调用子类特有的方法  2.向下转型    使用场景：方法参数类型（解耦）*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="11-7抽象类"><a href="#11-7抽象类" class="headerlink" title="11.7抽象类"></a>11.7抽象类</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">abstract</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="11-8static"><a href="#11-8static" class="headerlink" title="11.8static"></a>11.8static</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/* static修饰符 1.静态成员被所有对象共享 2.静态成员随着类的加载而加载 3.静态成员可以通过:类名.静态成员，对象.静态成员  static静态变量和实例变量的区别： 1.存储位置不同   实例变量存储在堆内存的对象中   静态变量存储在方法区的静态区中 2.生命周期不同   实例变量随着对象的创建而存在，随着对象的销毁而销毁   静态变量随着类的加载而存在，随着类的卸载而销毁 3.调动方式不同   实例变量：对象.实例成员   静态变量：类名.静态成员，对象.静态成员    静态代码块 static {  }*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="11-9final"><a href="#11-9final" class="headerlink" title="11.9final"></a>11.9final</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/*  1.final修饰的类，不能被继承  2.final修饰的方法，不能被重写  3.final修饰的变量，是常量，只能赋值一次，不允许修改（大写）*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="11-10枚举类"><a href="#11-10枚举类" class="headerlink" title="11.10枚举类"></a>11.10枚举类</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//enum</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="11-11接口"><a href="#11-11接口" class="headerlink" title="11.11接口"></a>11.11接口</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/*  interface  1.成员变量 public static final  2.成员方法(抽象方法 public abstract，默认方法)    类和接口（实现implements）  类和类（继承extends）  接口和接口（继承extends）    一个类只能有一个直接父类，可以同时实现多个接口    继承 is a  实现 has a*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="12-内部类"><a href="#12-内部类" class="headerlink" title="12.内部类"></a>12.内部类</h1><ol><li>成员内部类</li><li>静态内部类</li><li>局部内部类</li><li>匿名内部类</li></ol><h1 id="13-常用类"><a href="#13-常用类" class="headerlink" title="13.常用类"></a>13.常用类</h1><h2 id="13-1String"><a href="#13-1String" class="headerlink" title="13.1String"></a>13.1String</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/*  1.字符串是常量  2.char value[]    编码表：  1.ASCII  2.GB2312  3.GBK  4.GB 18030  5.UTF-8*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="13-2StringBuffer"><a href="#13-2StringBuffer" class="headerlink" title="13.2StringBuffer"></a>13.2StringBuffer</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/*  字符串缓冲区（char value[]）  初始容量是16    int newCapacity = (value.length &lt;&lt; 1) + 2;//新数组的长度    存储任意类型的数据，最终都会转成字符串输出    线程不安全*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="13-3StringBuilder"><a href="#13-3StringBuilder" class="headerlink" title="13.3StringBuilder"></a>13.3StringBuilder</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/*  线程安全*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="13-4Object"><a href="#13-4Object" class="headerlink" title="13.4Object"></a>13.4Object</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/*  public boolean equals(Object obj)    public int hashCode()    public String toString()*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="13-5包装类"><a href="#13-5包装类" class="headerlink" title="13.5包装类"></a>13.5包装类</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/* 包装类：           byte     Byte           short    Short           int      Integer           long     Long           float    Float           double   Double           char     Character           boolean  Boolean           xxx parseXxx(要转换的对应类型的数据)           int parseInt(int类型的数据)           long parseLong(long类型的数据)         */</span>          <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="13-6Date"><a href="#13-6Date" class="headerlink" title="13.6Date"></a>13.6Date</h2><h2 id="13-7Calendar"><a href="#13-7Calendar" class="headerlink" title="13.7Calendar"></a>13.7Calendar</h2><h2 id="13-8LocalDate"><a href="#13-8LocalDate" class="headerlink" title="13.8LocalDate"></a>13.8LocalDate</h2><h1 id="14异常"><a href="#14异常" class="headerlink" title="14异常"></a>14异常</h1><p><img src="/images/%E8%B7%AF%E9%81%A5java/java%E5%BC%82%E5%B8%B8.webp" alt="java异常"></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/* 1.异常分类   编译时异常 throws 异常类（方法声明处）   运行时异常 throw 异常对象（方法中） 2.try...catch...finally 异常处理原则： 1.异常处理只能用于非正常情况， 不能用于控制代码的正常流程   异常会降低程序的性能，增加代码调试的复杂性 2.为异常提供说明文档 3.尽量避免异常，避免过于庞大的try代码块 4.在catch中尽量指定具体的异常类型*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="15IO"><a href="#15IO" class="headerlink" title="15IO"></a>15IO</h1><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/*  I(input)输入（读）  O(output)输出（写）  1.数据类型    &gt;&gt;字符流    &gt;&gt;字节流  2.数据流向    &gt;&gt;输出流    &gt;&gt;输入流      桥梁流：  1.转换（字节流--&gt;字符流）  2.设置编码    字符流 = 字节流 + 编码表  FileOutputStream fos = new FileOutputStream("fo.txt");  OutputStreamWriter outputStreamWriter = new OutputStreamWriter(fos, "utf-8");    FileWriter    java.io 同步阻塞  java.nio 同步非阻塞*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/images/%E8%B7%AF%E9%81%A5java/javaIo.webp" alt="javaIo"></p><p><img src="/images/%E8%B7%AF%E9%81%A5java/image-20220518105030889.png" alt="image-20220518105030889"></p><p><img src="/images/%E8%B7%AF%E9%81%A5java/image-20220518105133137.png" alt="image-20220518105133137"></p><h1 id="16线程"><a href="#16线程" class="headerlink" title="16线程"></a>16线程</h1><h2 id="16-1创建线程方式"><a href="#16-1创建线程方式" class="headerlink" title="16.1创建线程方式"></a>16.1创建线程方式</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/*进程：正在进行中的程序，是系统进行资源分配核调度的基本单元，是操作系统结构的基础线程：是操作系统能够进行运算调度的最小单位。它被包含在进程之中，是进程中的实际运作单位。一条线程指的是进程中一个单一顺序的控制流，一个进程中可以并发多个线程，每条线程并行执行不同的任务创建线程的方式：1.继承Thread类，重写run方法2.实现Runnable接口，重写run方法3.实现Callable接口，重写call方法，FutureTask4.线程池线程默认名称：Thread-0,Thread-1...*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/images/%E8%B7%AF%E9%81%A5java/image-20220519113502261.png" alt="image-20220519113502261"></p><h2 id="16-2线程状态"><a href="#16-2线程状态" class="headerlink" title="16.2线程状态"></a>16.2线程状态</h2><p><img src="/images/%E8%B7%AF%E9%81%A5java/image-20220519141913513.png" alt="image-20220519141913513"></p><p><img src="/images/%E8%B7%AF%E9%81%A5java/image-20220523091700926.png" alt="image-20220523091700926"></p><h2 id="16-3线程安全"><a href="#16-3线程安全" class="headerlink" title="16.3线程安全"></a>16.3线程安全</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/*  线程安全问题出现的原因：  1.多个线程同时操作共享数据（同一个资源）  2.操作共享数据的代码有多行    解决线程安全问题方式：  方式一: synchronized      1.同步代码块          synchronized (锁){//锁：对象            同步代码          }      2.同步方法        锁：当前对象      3.同步静态方法        锁：字节码文件对象（.class被加载到方法区后就会在堆内存中创建此.class对应的对象）      锁： 重量级 synchronized          轻量级           悲观锁          乐观锁  方式二：API  lock.lock(),lock.unlock()*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="16-4生产者消费者"><a href="#16-4生产者消费者" class="headerlink" title="16.4生产者消费者"></a>16.4生产者消费者</h2><p><img src="/images/%E8%B7%AF%E9%81%A5java/image-20220520133637447.png" alt="image-20220520133637447"></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/*  线程通讯：wait() notify() notifyAll()          LockSupport.park(),LockSupport.unpark(thread);*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="16-5死锁"><a href="#16-5死锁" class="headerlink" title="16.5死锁"></a>16.5死锁</h2><p><img src="/images/%E8%B7%AF%E9%81%A5java/image-20220520152556782.png" alt="image-20220520152556782"></p><h2 id="16-6线程池"><a href="#16-6线程池" class="headerlink" title="16.6线程池"></a>16.6线程池</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//        ThreadPoolExecutor(int corePoolSize,                   //核心线程数</span><span class="token comment">//                            int maximumPoolSize,               //最大线程数</span><span class="token comment">//                            long keepAliveTime,                //存活时间</span><span class="token comment">//                            TimeUnit unit,                     //时间单位</span><span class="token comment">//                            BlockingQueue&lt;Runnable&gt; workQueue, //缓存队列</span><span class="token comment">//                            RejectedExecutionHandler handler)       //拒绝策略</span>        <span class="token comment">/*           拒绝策略：AbortPolicy丢弃任务，抛出异常（默认）                   CallerRunsPolicy，由调用（提交任务的线程）线程处理                   DiscardOldestPolicy，丢弃队列最前面的任务                   DiscardPolicy，丢弃任务，不抛出异常                   10 + 5 + 5 = 20                   最大线程数15+缓存队列5=20         */</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/images/%E8%B7%AF%E9%81%A5java/%E7%BA%BF%E7%A8%8B%E6%B1%A0-1653283547480.png" alt="线程池"></p><h2 id="16-7ThreadLocal"><a href="#16-7ThreadLocal" class="headerlink" title="16.7ThreadLocal"></a>16.7ThreadLocal</h2><h1 id="17-集合"><a href="#17-集合" class="headerlink" title="17.集合"></a>17.集合</h1><p><img src="/images/%E8%B7%AF%E9%81%A5java/image-20220523132938708.png" alt="image-20220523132938708"></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/*  1.存储对象  2.长度可变    Collection  |--List     有序（存入和取出的顺序一致），可重复，有下标     |--ArrayList        数据结构:          数组（transient Object[] elementData;）          private static final int DEFAULT_CAPACITY = 10;//默认容量10          int newCapacity = oldCapacity + (oldCapacity &gt;&gt; 1);        特点：查询快，增删慢        不同步     |--LinkedList        数据结构：双向链表，查询慢，增删快        不同步  |--Set     无序（存入和取出的顺序不一致），不可重复     |--HashSet        Hash表（HashMap）,底层 HashMap 实例的默认初始容量是 16，加载因子是 0.75        先判断对象的hashCode值        1.不同，直接存储        2.相同，再判断equals()的值，如果还相同，则不存，如果不同，则存储     |--TreeSet：有序，不可重复        1.实体类实现Comparable接口，重写compareTo()方法，让对象自身具有排序功能        此接口强行对实现它的每个类的对象进行整体排序。这种排序被称为类的自然排序，类的 compareTo 方法被称为它的自然比较方法。        2.自定义类实现Comparator接口，重写compare()方法，在创建TreeSet集合对象时作为参数，让集合自身具有排序功能        */</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/*  HashMap:key/value  默认初始容量 (16) 和默认加载因子 (0.75)  static final int DEFAULT_INITIAL_CAPACITY = 1 &lt;&lt; 4; // aka 16  static final float DEFAULT_LOAD_FACTOR = 0.75f;    jdk1.7 Entry[]数据+链表  jdk1.8 Node&lt;K,V&gt;[] tab数组+TreeNode&lt;K,V&gt;红黑树+ Node&lt;K,V&gt; next单向链表    static final int TREEIFY_THRESHOLD = 8;  当数组容量&gt;=64且链表长度&gt;8,转红黑树    红黑树节点个数&lt;6,转单向链表    TreeMap:红黑树  private static final boolean RED   = false;  private static final boolean BLACK = true;  static final class Entry&lt;K,V&gt;    Hashtable:hash表（数组）  默认的初始容量 (11) 和加载因子 (0.75)*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/images/%E8%B7%AF%E9%81%A5java/image-20220524150753040.png" alt="image-20220524150753040"></p><p><img src="/images/%E8%B7%AF%E9%81%A5java/image-20220524151400897.png" alt="image-20220524151400897"></p><h1 id="18泛型"><a href="#18泛型" class="headerlink" title="18泛型"></a>18泛型</h1><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/*  泛型：泛指的类型，jdk1.5出现的安全机制  T:Type  E:Element  K:Key  V:Value  作用：  1.将运行时ClassCastException转到了编译阶段  2.避免了强制类型转换*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="19-JDK1-8新特性"><a href="#19-JDK1-8新特性" class="headerlink" title="19.JDK1.8新特性"></a>19.JDK1.8新特性</h1><h2 id="19-1lambda表达式"><a href="#19-1lambda表达式" class="headerlink" title="19.1lambda表达式"></a>19.1lambda表达式</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/*  1.无参，多个参数： ()不可省略    一个参数：()可以省略，  2.{}中只有一行代码，    无返回值{}可以省略    有返回值时{}和return都可省略*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/*  1.已经注册了储蓄账户多个  2.程序启动时，读取账户文件，反序列化，保存到ArryList集合中，就可以存钱了，当退出时，再把ArryList集合中    的对象序列化到文件中*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="19-2函数式接口"><a href="#19-2函数式接口" class="headerlink" title="19.2函数式接口"></a>19.2函数式接口</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/*  接口中只有一个抽象方式时，就是函数式接口  @FunctionalInterface  1.Consumer 消费型  2.Supplier 供给型  3.Function 函数型  4.Predicate 判断型*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="19-3方法引用"><a href="#19-3方法引用" class="headerlink" title="19.3方法引用"></a>19.3方法引用</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/*  方法引用：当lambada方法体的实现，已经有了API能实现同样的效果，可以选择使用方法引用  ::  1.对象::实例方法名  2.类::实例方法名  3.类::静态方法名  4.构造方法引用*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="19-4Stream"><a href="#19-4Stream" class="headerlink" title="19.4Stream"></a>19.4Stream</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/*  1.中间操作  2.终止操作：forEach，count()*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h1 id="20网络编程"><a href="#20网络编程" class="headerlink" title="20网络编程"></a>20网络编程</h1><p><img src="/images/%E8%B7%AF%E9%81%A5java/image-20220526114851510.png" alt="image-20220526114851510"></p><h2 id="20-1UDP"><a href="#20-1UDP" class="headerlink" title="20.1UDP"></a>20.1UDP</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/*Internet 协议集支持一个无连接的传输协议，该协议称为用户数据报协议（UDP，User Datagram Protocol）。UDP 为应用程序提供了一种无需建立连接就可以发送封装的 IP 数据包的方法。*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ol><li><p>无连接</p></li><li><p>不可靠</p></li><li><p>快速传输</p></li></ol><h2 id="20-2TCP"><a href="#20-2TCP" class="headerlink" title="20.2TCP"></a>20.2TCP</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/*  传输控制协议（TCP，Transmission Control Protocol）是一种面向连接的、可靠的、基于字节流的传输层通信协议*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h1 id="21-数据库"><a href="#21-数据库" class="headerlink" title="21.数据库"></a>21.数据库</h1><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/*  数据库管理系统(Database Management System)是一种操纵和管理数据库的大型软件，用于建立、使用和维护数据库，简称DBMS  1.Mysql  2.Oracle  3.PostgreSQL  关系型数据库    SQL:结构化查询语言（Structured Query Language）简称SQL  1、数据查询语言（DQL: Data Query Language）:SELECT  2、数据操作语言（DML：Data Manipulation Language）:insert,update,delete  3、数据定义语言（DDL）:create,alter,drop  4、数据控制语言（DCL）  5、事务控制语言（TCL）*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="21-1连接"><a href="#21-1连接" class="headerlink" title="21.1连接"></a>21.1连接</h2><pre class="line-numbers language-cmd" data-language="cmd"><code class="language-cmd">mysql --help-h, --host=name     Connect to host.-u, --user=name     User for login if not current user.-P, --port=#        Port number to use for connection or 0 for default to-p, --password[=name] Password to use when connecting to servermysql -hlocalhost -uroot -p123456 -P3306<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="21-2SQL"><a href="#21-2SQL" class="headerlink" title="21.2SQL"></a>21.2SQL</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#显示所有数据库</span>show databases<span class="token punctuation">;</span><span class="token comment">#使用数据库 use 数据库名称;</span>use shop_data<span class="token punctuation">;</span><span class="token comment">#显示所有的表</span>show tables<span class="token punctuation">;</span><span class="token comment">#查看表结构 desc 表名称;</span>desc user<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="21-2-1DDL"><a href="#21-2-1DDL" class="headerlink" title="21.2.1DDL"></a>21.2.1DDL</h3><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">--数据库-&gt;表-&gt;列（字段）</span><span class="token comment">--创建数据库 create database 数据库名称;</span><span class="token keyword">create</span> <span class="token keyword">database</span> test<span class="token punctuation">;</span><span class="token comment">--创建表</span><span class="token comment">-- create table 表名(列名 列类型);</span><span class="token keyword">create</span> <span class="token keyword">table</span> student<span class="token punctuation">(</span>id <span class="token keyword">int</span><span class="token punctuation">,</span>name <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">--添加列</span><span class="token comment">-- alter table 表名 add column 列名 列类型</span><span class="token keyword">alter</span> <span class="token keyword">table</span> student <span class="token keyword">add</span> sex <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">--修改列名或类型</span><span class="token comment">-- alter table 表名 change 原列名 新列名 列新类型;</span><span class="token keyword">alter</span> <span class="token keyword">table</span> student change sex stu_sex <span class="token keyword">int</span><span class="token punctuation">;</span><span class="token comment">-- alter table 表名 modify column 列名 列类型;</span><span class="token keyword">alter</span> <span class="token keyword">table</span> student <span class="token keyword">modify</span> <span class="token keyword">column</span> stu_sex <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">--删表 drop table 表名;</span><span class="token keyword">drop</span> <span class="token keyword">table</span> student<span class="token punctuation">;</span><span class="token comment">--删数据库 drop database 数据库名;</span><span class="token keyword">drop</span> <span class="token keyword">database</span> test<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="21-2-2DML"><a href="#21-2-2DML" class="headerlink" title="21.2.2DML"></a>21.2.2DML</h3><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 插入</span><span class="token comment">-- insert into 表名 (列名1,列名2,列名3, ...)values(值1,值2，值3, ...)</span><span class="token keyword">insert</span> <span class="token keyword">into</span> student<span class="token punctuation">(</span>id<span class="token punctuation">,</span>name<span class="token punctuation">,</span>sex<span class="token punctuation">)</span><span class="token keyword">values</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">'张三'</span><span class="token punctuation">,</span><span class="token string">'男'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">-- 修改</span><span class="token comment">-- update 表名 set 列名 = 值，...</span><span class="token keyword">update</span> student <span class="token keyword">set</span> id <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token string">'李四'</span><span class="token punctuation">;</span><span class="token comment">-- 删除</span><span class="token comment">-- delete from 表名;</span><span class="token keyword">delete</span> <span class="token keyword">from</span> student<span class="token punctuation">;</span><span class="token comment">-- truncate table 表名;</span><span class="token keyword">truncate</span> <span class="token keyword">table</span> student<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="21-2-3DQL"><a href="#21-2-3DQL" class="headerlink" title="21.2.3DQL"></a>21.2.3DQL</h3><ol><li>单表查询</li></ol><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 全表扫描</span><span class="token keyword">select</span> id<span class="token punctuation">,</span>name<span class="token punctuation">,</span>sex<span class="token punctuation">,</span>birthday<span class="token punctuation">,</span>create_time<span class="token punctuation">,</span>update_time <span class="token keyword">from</span> student<span class="token punctuation">;</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> student<span class="token punctuation">;</span><span class="token keyword">select</span> id<span class="token punctuation">,</span>name <span class="token keyword">as</span> <span class="token string">'stu_name'</span><span class="token punctuation">,</span>sex <span class="token string">'性别'</span><span class="token punctuation">,</span>birthday<span class="token punctuation">,</span>create_time<span class="token punctuation">,</span>update_time <span class="token keyword">from</span> student<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- where单条件</span><span class="token comment">-- 精确查询</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> student <span class="token keyword">where</span> id <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span><span class="token comment">-- 范围查询</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> student <span class="token keyword">where</span> id <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">;</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> student <span class="token keyword">where</span> id <span class="token operator">in</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> student <span class="token keyword">where</span> create_time <span class="token operator">between</span> <span class="token string">'2022-05-27 11:00:40'</span> <span class="token operator">and</span> <span class="token string">'2022-05-27 11:01:39'</span><span class="token punctuation">;</span><span class="token comment">-- 模糊查询 %匹配0~n个字符  _匹配0~1个字符</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> student <span class="token keyword">where</span> name <span class="token operator">like</span> <span class="token string">'王%'</span><span class="token punctuation">;</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> student <span class="token keyword">where</span> name <span class="token operator">like</span> <span class="token string">'王_'</span><span class="token punctuation">;</span><span class="token comment">-- where多条件</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> student <span class="token keyword">where</span> id <span class="token operator">=</span> <span class="token number">3</span> <span class="token operator">and</span> name <span class="token operator">=</span> <span class="token string">'李四'</span><span class="token punctuation">;</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> student <span class="token keyword">where</span> id <span class="token operator">=</span> <span class="token number">3</span> <span class="token operator">or</span> name <span class="token operator">=</span> <span class="token string">'李四'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 算术运算符 + - * / %</span><span class="token keyword">select</span> id<span class="token punctuation">,</span>name<span class="token punctuation">,</span>sex<span class="token punctuation">,</span>birthday<span class="token punctuation">,</span>salary<span class="token operator">+</span><span class="token number">1000</span> <span class="token keyword">from</span> student<span class="token punctuation">;</span><span class="token comment">-- 比较运算符 = != &lt;&gt; &lt; &gt; &lt;= &gt;=</span><span class="token keyword">select</span> id<span class="token punctuation">,</span> name<span class="token punctuation">,</span> sex<span class="token punctuation">,</span> birthday<span class="token punctuation">,</span> salary<span class="token punctuation">,</span> salary <span class="token operator">&lt;&gt;</span> <span class="token number">1000</span> <span class="token string">'salary &lt;&gt; 1000'</span> <span class="token keyword">from</span> student<span class="token punctuation">;</span><span class="token comment">-- 逻辑运算符 ! not &amp;&amp; and || or</span><span class="token comment">-- 位运算符 &amp; | ^ ~ &gt;&gt; &lt;&lt;</span><span class="token keyword">select</span> id<span class="token punctuation">,</span> name<span class="token punctuation">,</span> sex<span class="token punctuation">,</span> birthday<span class="token punctuation">,</span> salary<span class="token punctuation">,</span> salary <span class="token operator">&lt;&lt;</span> <span class="token number">1</span> <span class="token keyword">from</span> student<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 排序 </span><span class="token comment">-- order by 列1，列2  </span><span class="token comment">-- asc升序 desc降序</span><span class="token keyword">select</span> id<span class="token punctuation">,</span> name<span class="token punctuation">,</span> sex<span class="token punctuation">,</span> birthday<span class="token punctuation">,</span> salary <span class="token keyword">from</span> student <span class="token keyword">order</span> <span class="token keyword">by</span>  birthday <span class="token keyword">desc</span><span class="token punctuation">,</span> salary <span class="token keyword">asc</span><span class="token punctuation">;</span><span class="token comment">-- 先按生日降序，在此基础上再按工资升序</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 分组（统计）</span><span class="token keyword">SELECT</span>sex<span class="token punctuation">,</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">'总数'</span><span class="token punctuation">,</span><span class="token function">sum</span><span class="token punctuation">(</span>salary<span class="token punctuation">)</span> <span class="token string">'总和'</span><span class="token punctuation">,</span><span class="token function">avg</span><span class="token punctuation">(</span>salary<span class="token punctuation">)</span> <span class="token string">'平均值'</span><span class="token punctuation">,</span><span class="token function">max</span><span class="token punctuation">(</span>salary<span class="token punctuation">)</span> <span class="token string">'最大值'</span><span class="token punctuation">,</span><span class="token function">min</span><span class="token punctuation">(</span>salary<span class="token punctuation">)</span> <span class="token string">'最小值'</span><span class="token keyword">FROM</span>student<span class="token keyword">GROUP</span> <span class="token keyword">BY</span>sex<span class="token keyword">HAVING</span><span class="token function">avg</span><span class="token punctuation">(</span>salary<span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">3000</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 分页 limit 偏移量, 查询个数</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> student <span class="token keyword">limit</span> <span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ol start="2"><li>子查询</li></ol><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 单行子查询</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> student <span class="token keyword">where</span> salary <span class="token operator">&gt;</span> <span class="token punctuation">(</span><span class="token keyword">select</span> salary <span class="token keyword">from</span> student <span class="token keyword">where</span> name <span class="token operator">=</span> <span class="token string">'赵六'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">-- 多行子查询</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> student <span class="token keyword">where</span> salary <span class="token operator">in</span> <span class="token punctuation">(</span><span class="token keyword">select</span> salary <span class="token keyword">from</span> student <span class="token keyword">where</span> name <span class="token operator">like</span> <span class="token string">'王%'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> student <span class="token keyword">where</span> salary <span class="token operator">not</span> <span class="token operator">in</span> <span class="token punctuation">(</span><span class="token keyword">select</span> salary <span class="token keyword">from</span> student <span class="token keyword">where</span> name <span class="token operator">like</span> <span class="token string">'王%'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="3"><li>多表查询</li></ol><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 查询学生和学生所属班级信息 笛卡尔积</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> t_student<span class="token punctuation">,</span> t_class<span class="token punctuation">;</span><span class="token comment">-- 内连接 （查询符合条件的数据）</span><span class="token keyword">select</span> s<span class="token punctuation">.</span>id<span class="token punctuation">,</span>s<span class="token punctuation">.</span>name<span class="token punctuation">,</span>s<span class="token punctuation">.</span>sex<span class="token punctuation">,</span>s<span class="token punctuation">.</span>birthday<span class="token punctuation">,</span>s<span class="token punctuation">.</span>salary<span class="token punctuation">,</span>c<span class="token punctuation">.</span>id class_id<span class="token punctuation">,</span>c<span class="token punctuation">.</span>name class_name<span class="token punctuation">,</span>c<span class="token punctuation">.</span>num <span class="token keyword">from</span> t_student s<span class="token punctuation">,</span> t_class c <span class="token keyword">where</span> s<span class="token punctuation">.</span>class_id <span class="token operator">=</span> c<span class="token punctuation">.</span>id<span class="token punctuation">;</span><span class="token keyword">select</span> s<span class="token punctuation">.</span>id<span class="token punctuation">,</span>s<span class="token punctuation">.</span>name<span class="token punctuation">,</span>s<span class="token punctuation">.</span>sex<span class="token punctuation">,</span>s<span class="token punctuation">.</span>birthday<span class="token punctuation">,</span>s<span class="token punctuation">.</span>salary<span class="token punctuation">,</span>c<span class="token punctuation">.</span>id class_id<span class="token punctuation">,</span>c<span class="token punctuation">.</span>name class_name<span class="token punctuation">,</span>c<span class="token punctuation">.</span>num <span class="token keyword">from</span> t_student s <span class="token keyword">inner</span> <span class="token keyword">join</span> t_class c <span class="token keyword">on</span> s<span class="token punctuation">.</span>class_id <span class="token operator">=</span> c<span class="token punctuation">.</span>id<span class="token keyword">select</span> s<span class="token punctuation">.</span>id<span class="token punctuation">,</span>s<span class="token punctuation">.</span>name<span class="token punctuation">,</span>s<span class="token punctuation">.</span>sex<span class="token punctuation">,</span>s<span class="token punctuation">.</span>birthday<span class="token punctuation">,</span>s<span class="token punctuation">.</span>salary<span class="token punctuation">,</span>c<span class="token punctuation">.</span>id class_id<span class="token punctuation">,</span>c<span class="token punctuation">.</span>name class_name<span class="token punctuation">,</span>c<span class="token punctuation">.</span>num <span class="token keyword">from</span> t_student s <span class="token keyword">inner</span> <span class="token keyword">join</span> t_class c <span class="token keyword">on</span> s<span class="token punctuation">.</span>class_id <span class="token operator">=</span> c<span class="token punctuation">.</span>id <span class="token keyword">where</span> s<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">'张三'</span><span class="token comment">-- 左连接（查询左表中所有的数据，右表中没有匹配的显示null）</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> t_student s <span class="token keyword">left</span> <span class="token keyword">join</span> t_class c <span class="token keyword">on</span> s<span class="token punctuation">.</span>class_id <span class="token operator">=</span> c<span class="token punctuation">.</span>id<span class="token punctuation">;</span><span class="token comment">-- 右连接（查询右表中所有的数据，左表中没有匹配的显示null）</span><span class="token keyword">select</span> s<span class="token punctuation">.</span>id<span class="token punctuation">,</span>s<span class="token punctuation">.</span>name<span class="token punctuation">,</span>s<span class="token punctuation">.</span>sex<span class="token punctuation">,</span>s<span class="token punctuation">.</span>birthday<span class="token punctuation">,</span>s<span class="token punctuation">.</span>salary<span class="token punctuation">,</span>c<span class="token punctuation">.</span>id<span class="token punctuation">,</span>c<span class="token punctuation">.</span>name<span class="token punctuation">,</span>c<span class="token punctuation">.</span>num <span class="token keyword">from</span> t_student s <span class="token keyword">right</span> <span class="token keyword">join</span> t_class c <span class="token keyword">on</span> s<span class="token punctuation">.</span>class_id <span class="token operator">=</span> c<span class="token punctuation">.</span>id<span class="token punctuation">;</span><span class="token comment">-- union(去重) union all(不去重), 可以联合多个select语句，将它们的结果组合成单个结果集，合并时，两个表对应的列数和数据类型必须相同，且互相对应</span><span class="token keyword">select</span> <span class="token keyword">column</span><span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token keyword">from</span> 表<span class="token number">1</span><span class="token keyword">union</span> <span class="token punctuation">[</span><span class="token keyword">all</span><span class="token punctuation">]</span><span class="token keyword">select</span> <span class="token keyword">column</span><span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token keyword">from</span> 表<span class="token number">2</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="21-2-4DCL"><a href="#21-2-4DCL" class="headerlink" title="21.2.4DCL"></a>21.2.4DCL</h3><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 创建用户</span><span class="token comment">-- create user 用户名 identified by '密码'</span><span class="token keyword">create</span> <span class="token keyword">user</span> test02 identified <span class="token keyword">by</span> <span class="token string">'123456'</span><span class="token comment">-- mysql用户表</span><span class="token keyword">select</span> host<span class="token punctuation">,</span><span class="token keyword">user</span><span class="token punctuation">,</span>authentication_string <span class="token keyword">from</span> mysql<span class="token punctuation">.</span><span class="token keyword">user</span><span class="token punctuation">;</span><span class="token comment">-- 授权</span><span class="token comment">/* grant 权限1,权限2,…权限n on 数据库名.表名 to 用户名@主机名 identified by ‘连接口令’ select,update,insert,delete,drop,create... 数据库名：* 所有的库 表名：* 所有的表 all privileges 所有权限 主机名：localhost仅允许本地连接，%本地和远程都可连接*/</span><span class="token keyword">grant</span> <span class="token keyword">insert</span> <span class="token keyword">on</span> test<span class="token punctuation">.</span><span class="token operator">*</span> <span class="token keyword">to</span> test02<span class="token variable">@localhost</span> identified <span class="token keyword">by</span> <span class="token string">'123456'</span><span class="token comment">-- 刷新</span>flush <span class="token keyword">privileges</span><span class="token comment">-- 查看权限</span><span class="token keyword">show</span> grants <span class="token keyword">for</span> <span class="token string">'用户名'</span><span class="token variable">@'localhost'</span><span class="token punctuation">;</span><span class="token keyword">show</span> grants <span class="token keyword">for</span> <span class="token string">'test02'</span><span class="token variable">@'localhost'</span><span class="token punctuation">;</span><span class="token comment">-- 撤销权限</span><span class="token keyword">revoke</span> <span class="token keyword">all</span> <span class="token keyword">privileges</span> <span class="token keyword">on</span> <span class="token operator">*</span><span class="token punctuation">.</span><span class="token operator">*</span> <span class="token keyword">from</span> <span class="token string">'test02'</span><span class="token variable">@'localhost'</span><span class="token comment">-- 删除用户</span><span class="token keyword">drop</span> <span class="token keyword">user</span> <span class="token string">'test02'</span><span class="token variable">@'localhost'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="21-3E-R"><a href="#21-3E-R" class="headerlink" title="21.3E-R"></a>21.3E-R</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/*  E-R图也称实体-联系图(Entity Relationship Diagram)，提供了表示实体类型、属性和联系的方法，用来描述现实世界的概念模型。它是描述现实世界关系概念模型的有效方法。是表示概念关系模型的一种方式。用“矩形框”表示实体型，矩形框内写明实体名称；用“椭圆图框”或圆角矩形表示实体的属性，并用“实心线段”将其与相应关系的“实体型”连接起来；用”菱形框“表示实体型之间的联系成因，在菱形框内写明联系名，并用”实心线段“分别与有关实体型连接起来，同时在”实心线段“旁标上联系的类型（1:1,1:n或m:n）*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="21-4约束"><a href="#21-4约束" class="headerlink" title="21.4约束"></a>21.4约束</h2><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 主键约束:唯一性（有且仅有一个）,联合主键 </span><span class="token comment">-- alter table 表名 add primary key (列,...);</span><span class="token comment">-- alter table student add primary key (id);</span><span class="token comment">-- 联合主键 </span><span class="token keyword">alter</span> <span class="token keyword">table</span> student <span class="token keyword">add</span> <span class="token keyword">primary</span> <span class="token keyword">key</span> <span class="token punctuation">(</span>id<span class="token punctuation">,</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">-- 唯一性约束（可多个）</span><span class="token comment">-- alert table 表名 add [constraint 约束名称] unique key (列)</span><span class="token keyword">alter</span> <span class="token keyword">table</span> student <span class="token keyword">add</span> <span class="token keyword">constraint</span> uk_name <span class="token keyword">unique</span> <span class="token keyword">key</span> <span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">-- 非空约束</span><span class="token comment">-- alter table 表名 change 原列名 新列名 列类型 NOT NULL;</span><span class="token keyword">alter</span> <span class="token keyword">table</span> student change sex sex <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">not</span> <span class="token boolean">null</span><span class="token punctuation">;</span><span class="token comment">-- 外键约束 foreign key</span><span class="token comment">/*  set null:从父表中删除或更新数据时，同时将字表中的外键列设置为空  cascade:从父表中删除或更新数据时，同时将字表中的关联数据删除或更新  restrict:不能先删除或更新主表，要先删或更新子表，才能删除或更新主表  no action:同restrict*/</span><span class="token comment">-- AUTO_INCREMENT 自增</span><span class="token comment">-- alter table 表名 auto_increment = 数字;</span><span class="token keyword">alter</span> <span class="token keyword">table</span> student <span class="token keyword">auto_increment</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">-- 默认值 DEFAULT</span><span class="token comment">-- 注释 COMMENT</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="21-5数据类型"><a href="#21-5数据类型" class="headerlink" title="21.5数据类型"></a>21.5数据类型</h2><p><img src="/images/%E8%B7%AF%E9%81%A5java/image-20220527111157643.png" alt="image-20220527111157643"></p><p><img src="/images/%E8%B7%AF%E9%81%A5java/image-20220527111233989.png" alt="image-20220527111233989"></p><p><img src="/images/%E8%B7%AF%E9%81%A5java/image-20220527111247195.png" alt="image-20220527111247195"></p><h2 id="21-6函数"><a href="#21-6函数" class="headerlink" title="21.6函数"></a>21.6函数</h2><h3 id="21-6-1字符串函数"><a href="#21-6-1字符串函数" class="headerlink" title="21.6.1字符串函数"></a>21.6.1字符串函数</h3><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- length(列) 长度</span><span class="token keyword">select</span> id<span class="token punctuation">,</span>name<span class="token punctuation">,</span>length<span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">,</span>sex<span class="token punctuation">,</span>birthday<span class="token punctuation">,</span>salary <span class="token keyword">from</span> t_student<span class="token punctuation">;</span><span class="token comment">-- concat 连接</span><span class="token keyword">select</span> id<span class="token punctuation">,</span>name<span class="token punctuation">,</span>concat<span class="token punctuation">(</span>name<span class="token punctuation">,</span><span class="token string">'_666'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>sex<span class="token punctuation">,</span>birthday<span class="token punctuation">,</span>salary <span class="token keyword">from</span> t_student<span class="token punctuation">;</span><span class="token keyword">select</span> id<span class="token punctuation">,</span>name<span class="token punctuation">,</span>concat_ws<span class="token punctuation">(</span><span class="token string">'-'</span><span class="token punctuation">,</span>name<span class="token punctuation">,</span><span class="token string">'666'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>sex<span class="token punctuation">,</span>birthday<span class="token punctuation">,</span>salary <span class="token keyword">from</span> t_student<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="21-6-2数值函数"><a href="#21-6-2数值函数" class="headerlink" title="21.6.2数值函数"></a>21.6.2数值函数</h3><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> rand<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">select</span> rand<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">10</span><span class="token punctuation">,</span>floor<span class="token punctuation">(</span>rand<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>ceil<span class="token punctuation">(</span>rand<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">from</span> dual<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="21-6-3日期函数"><a href="#21-6-3日期函数" class="headerlink" title="21.6.3日期函数"></a>21.6.3日期函数</h3><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 获取日期，时间</span><span class="token keyword">select</span> <span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> curdate<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> curtime<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">current_date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">current_time</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">current_timestamp</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">from</span> dual<span class="token punctuation">;</span><span class="token comment">-- 时间戳</span><span class="token keyword">select</span> unix_timestamp<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">from</span> dual<span class="token punctuation">;</span><span class="token comment">-- 格式化</span><span class="token comment">/*  Y:四位年 y:两位年  m:两位月 M:月份名称  d:两位天 D:月中的天数  h:12小时制 H:24小时制  i:分  s:秒*/</span><span class="token keyword">select</span> date_format<span class="token punctuation">(</span>create_time<span class="token punctuation">,</span><span class="token string">'%Y-%m-%d %H:%i:%s'</span><span class="token punctuation">)</span> <span class="token keyword">from</span> t_student<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>日期运算</strong></p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 加</span><span class="token keyword">select</span> create_time<span class="token punctuation">,</span> date_add<span class="token punctuation">(</span>create_time<span class="token punctuation">,</span> <span class="token keyword">interval</span> <span class="token number">1</span> <span class="token keyword">day</span><span class="token punctuation">)</span> <span class="token keyword">from</span> t_student<span class="token punctuation">;</span><span class="token comment">-- 减</span><span class="token keyword">select</span> create_time<span class="token punctuation">,</span> date_sub<span class="token punctuation">(</span>create_time<span class="token punctuation">,</span> <span class="token keyword">interval</span> <span class="token number">1</span> <span class="token keyword">day</span><span class="token punctuation">)</span> <span class="token keyword">from</span> t_student<span class="token punctuation">;</span><span class="token comment">-- 间隔天数</span><span class="token keyword">select</span> create_time<span class="token punctuation">,</span> update_time<span class="token punctuation">,</span> datediff<span class="token punctuation">(</span>create_time<span class="token punctuation">,</span> update_time<span class="token punctuation">)</span> <span class="token keyword">from</span> t_student<span class="token punctuation">;</span><span class="token comment">-- 间隔时间</span><span class="token keyword">select</span> create_time<span class="token punctuation">,</span> update_time<span class="token punctuation">,</span> timediff<span class="token punctuation">(</span>create_time<span class="token punctuation">,</span> update_time<span class="token punctuation">)</span> <span class="token keyword">from</span> t_student<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>字符串日期转换</strong></p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 日期-字符串</span><span class="token keyword">select</span> date_format<span class="token punctuation">(</span>create_time<span class="token punctuation">,</span><span class="token string">'%Y-%m-%d %H:%i%:%s'</span><span class="token punctuation">)</span> <span class="token keyword">from</span> t_student<span class="token punctuation">;</span><span class="token comment">-- 字符串-日期</span><span class="token keyword">select</span> str_to_date<span class="token punctuation">(</span><span class="token string">'2022-05-27 11:05:40'</span><span class="token punctuation">,</span><span class="token string">'%Y-%m-%d %H:%i:%s'</span><span class="token punctuation">)</span> <span class="token keyword">from</span> t_student<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="21-6-4流程控制函数"><a href="#21-6-4流程控制函数" class="headerlink" title="21.6.4流程控制函数"></a>21.6.4流程控制函数</h3><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- `IF`(expr1,expr2,expr3) 如果expr1的值为true, 返回expr2, 否则返回expr3</span><span class="token keyword">SELECT</span>id<span class="token punctuation">,</span>NAME<span class="token punctuation">,</span>sex<span class="token punctuation">,</span>birthday<span class="token punctuation">,</span>salary<span class="token punctuation">,</span><span class="token keyword">IF</span> <span class="token punctuation">(</span>salary <span class="token operator">&gt;</span> <span class="token number">5000</span><span class="token punctuation">,</span><span class="token string">'领导'</span><span class="token punctuation">,</span><span class="token string">'员工'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> create_time<span class="token punctuation">,</span> update_time<span class="token punctuation">,</span> class_id<span class="token keyword">FROM</span>t_student<span class="token punctuation">;</span><span class="token comment">-- IFNULL(expr1,expr2) 如果expr1的值不为null, 返回expr1, 否则返回expr2</span><span class="token keyword">SELECT</span>id<span class="token punctuation">,</span>NAME<span class="token punctuation">,</span>sex<span class="token punctuation">,</span>birthday<span class="token punctuation">,</span>salary<span class="token punctuation">,</span>create_time<span class="token punctuation">,</span>update_time<span class="token punctuation">,</span>class_id<span class="token punctuation">,</span>ifnull<span class="token punctuation">(</span>class_id<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token keyword">FROM</span>t_student<span class="token punctuation">;</span><span class="token comment">-- case when 条件1 then 结果1 when 条件2 then 结果2... else 结果n end</span><span class="token keyword">SELECT</span>id<span class="token punctuation">,</span>NAME<span class="token punctuation">,</span>sex<span class="token punctuation">,</span>birthday<span class="token punctuation">,</span>salary<span class="token punctuation">,</span><span class="token keyword">CASE</span><span class="token keyword">WHEN</span> salary <span class="token operator">&lt;=</span> <span class="token number">2000</span> <span class="token keyword">THEN</span><span class="token string">'初级'</span><span class="token keyword">WHEN</span> salary <span class="token operator">&gt;=</span> <span class="token number">3000</span> <span class="token operator">and</span> salary <span class="token operator">&lt;=</span><span class="token number">4000</span> <span class="token keyword">THEN</span><span class="token string">'中级'</span><span class="token keyword">ELSE</span><span class="token string">'高级'</span><span class="token keyword">END</span><span class="token punctuation">,</span> create_time<span class="token punctuation">,</span> update_time<span class="token punctuation">,</span> class_id<span class="token keyword">FROM</span>t_student<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="21-7索引"><a href="#21-7索引" class="headerlink" title="21.7索引"></a>21.7索引</h2><h3 id="21-7-1索引类型"><a href="#21-7-1索引类型" class="headerlink" title="21.7.1索引类型"></a>21.7.1索引类型</h3><ul><li>普通索引 Normal</li><li>主键索引 Primary</li><li>唯一性索引 Unique</li><li>全文索引 Full Text</li></ul><h3 id="21-7-2创建索引"><a href="#21-7-2创建索引" class="headerlink" title="21.7.2创建索引"></a>21.7.2创建索引</h3><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">index</span> 索引名称 <span class="token keyword">on</span> 表名（列）<span class="token keyword">create</span> <span class="token keyword">index</span> idx_salary <span class="token keyword">on</span> t_student<span class="token punctuation">(</span>salary<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">create</span> <span class="token keyword">unique</span> <span class="token keyword">index</span> 索引名称 <span class="token keyword">on</span> 表（列）<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="21-7-2B-树"><a href="#21-7-2B-树" class="headerlink" title="21.7.2B+树"></a>21.7.2B+树</h3><p><img src="/images/%E8%B7%AF%E9%81%A5java/image-20220530151455006.png" alt="image-20220530151455006"></p><p><strong>减少IO次数</strong></p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">DROP</span> <span class="token keyword">TABLE</span> <span class="token keyword">IF</span> <span class="token keyword">EXISTS</span> <span class="token identifier"><span class="token punctuation">`</span>t_student<span class="token punctuation">`</span></span><span class="token punctuation">;</span><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token identifier"><span class="token punctuation">`</span>t_student<span class="token punctuation">`</span></span> <span class="token punctuation">(</span>  <span class="token identifier"><span class="token punctuation">`</span>id<span class="token punctuation">`</span></span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">AUTO_INCREMENT</span> <span class="token keyword">COMMENT</span> <span class="token string">'主键'</span><span class="token punctuation">,</span>  <span class="token identifier"><span class="token punctuation">`</span>name<span class="token punctuation">`</span></span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'姓名'</span><span class="token punctuation">,</span>  <span class="token identifier"><span class="token punctuation">`</span>sex<span class="token punctuation">`</span></span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token string">'男'</span> <span class="token keyword">COMMENT</span> <span class="token string">'性别'</span><span class="token punctuation">,</span>  <span class="token identifier"><span class="token punctuation">`</span>birthday<span class="token punctuation">`</span></span> <span class="token keyword">date</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'生日'</span><span class="token punctuation">,</span>  <span class="token identifier"><span class="token punctuation">`</span>salary<span class="token punctuation">`</span></span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'工资'</span><span class="token punctuation">,</span>  <span class="token identifier"><span class="token punctuation">`</span>create_time<span class="token punctuation">`</span></span> <span class="token keyword">datetime</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'创建时间'</span><span class="token punctuation">,</span>  <span class="token identifier"><span class="token punctuation">`</span>update_time<span class="token punctuation">`</span></span> <span class="token keyword">datetime</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'修改时间'</span><span class="token punctuation">,</span>  <span class="token identifier"><span class="token punctuation">`</span>class_id<span class="token punctuation">`</span></span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">`</span>id<span class="token punctuation">`</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment">-- 主键约束</span>  <span class="token keyword">UNIQUE</span> <span class="token keyword">KEY</span> <span class="token identifier"><span class="token punctuation">`</span>uk_name<span class="token punctuation">`</span></span> <span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">`</span>name<span class="token punctuation">`</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment">-- 唯一性约束</span>  <span class="token keyword">KEY</span> <span class="token identifier"><span class="token punctuation">`</span>fk_class_id<span class="token punctuation">`</span></span> <span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">`</span>class_id<span class="token punctuation">`</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token keyword">KEY</span> <span class="token identifier"><span class="token punctuation">`</span>idx_salary<span class="token punctuation">`</span></span> <span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">`</span>salary<span class="token punctuation">`</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment">-- 普通索引</span>  <span class="token keyword">CONSTRAINT</span> <span class="token identifier"><span class="token punctuation">`</span>fk_class_id<span class="token punctuation">`</span></span> <span class="token keyword">FOREIGN</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">`</span>class_id<span class="token punctuation">`</span></span><span class="token punctuation">)</span> <span class="token keyword">REFERENCES</span> <span class="token identifier"><span class="token punctuation">`</span>t_class<span class="token punctuation">`</span></span> <span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">`</span>id<span class="token punctuation">`</span></span><span class="token punctuation">)</span> <span class="token keyword">ON</span> <span class="token keyword">DELETE</span> <span class="token keyword">SET</span> <span class="token boolean">NULL</span> <span class="token keyword">ON</span> <span class="token keyword">UPDATE</span> <span class="token keyword">SET</span> <span class="token boolean">NULL</span> <span class="token comment">-- 外键约束</span><span class="token punctuation">)</span> <span class="token keyword">ENGINE</span><span class="token operator">=</span><span class="token keyword">InnoDB</span> <span class="token keyword">AUTO_INCREMENT</span><span class="token operator">=</span><span class="token number">7</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CHARSET</span><span class="token operator">=</span>utf8<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="21-8执行计划"><a href="#21-8执行计划" class="headerlink" title="21.8执行计划"></a>21.8执行计划</h3><p><img src="/images/%E8%B7%AF%E9%81%A5java/image-20220530153158701.png" alt="image-20220530153158701"></p><p><img src="/images/%E8%B7%AF%E9%81%A5java/image-20220530154044812.png" alt="image-20220530154044812"></p><p><img src="/images/%E8%B7%AF%E9%81%A5java/image-20220530153810503.png" alt="image-20220530153810503"></p><p><img src="/images/%E8%B7%AF%E9%81%A5java/image-20220530153950098.png" alt="image-20220530153950098"></p><p><img src="/images/%E8%B7%AF%E9%81%A5java/image-20220530153545803.png" alt="image-20220530153545803"></p><h3 id="21-9创建索引原则"><a href="#21-9创建索引原则" class="headerlink" title="21.9创建索引原则"></a>21.9创建索引原则</h3><ul><li>经常作为查询条件的列</li><li>数据表中数据量大时建索引</li><li>经常做增删改的表不要建索引</li><li>经常做运算的字段不要建索引</li></ul><h2 id="21-8事务"><a href="#21-8事务" class="headerlink" title="21.8事务"></a>21.8事务</h2><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">/*  事务特性ACID  1.原子性  2.一致性  3.隔离性  4.持久性*/</span><span class="token comment">/*  1.系统变量 @@    -- 全局    show global variables;    -- 会话    show session variables;    -- 查看指定的系统变量 1自动提交 0非自动提交    select @@global.autocommit;  2.自定义变量 @*/</span><span class="token comment">/*  1.设置事务非自动提交    set @@global.autocommit = 0（OFF）  2.开启事务    begin 或 start strancaction  3.执行sql  4.提交(回滚)    commit    rollback*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="21-9存储引擎"><a href="#21-9存储引擎" class="headerlink" title="21.9存储引擎"></a>21.9存储引擎</h2><p><img src="/images/%E8%B7%AF%E9%81%A5java/image-20220531093444576.png" alt="image-20220531093444576"></p><p><strong>行级锁</strong></p><p><strong>表级锁</strong></p><h2 id="21-10视图"><a href="#21-10视图" class="headerlink" title="21.10视图"></a>21.10视图</h2><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">/*  视图是一种虚拟表，建立在已有表的基础上（基表）  create view 视图名称  as  语句;*/</span><span class="token comment">-- 创建视图</span><span class="token keyword">create</span> <span class="token keyword">view</span> vw1 <span class="token keyword">as</span> <span class="token keyword">select</span> c<span class="token punctuation">.</span>id<span class="token punctuation">,</span> c<span class="token punctuation">.</span>name<span class="token punctuation">,</span> c<span class="token punctuation">.</span>num<span class="token punctuation">,</span> s<span class="token punctuation">.</span>id <span class="token string">'stu_id'</span><span class="token punctuation">,</span> s<span class="token punctuation">.</span>name <span class="token string">'stu_name'</span><span class="token punctuation">,</span> s<span class="token punctuation">.</span>sex<span class="token punctuation">,</span> s<span class="token punctuation">.</span>birthday<span class="token punctuation">,</span> s<span class="token punctuation">.</span>salary  <span class="token keyword">from</span> t_class c<span class="token punctuation">,</span> t_student s <span class="token keyword">where</span> c<span class="token punctuation">.</span>id <span class="token operator">=</span> s<span class="token punctuation">.</span>class_id<span class="token punctuation">;</span><span class="token comment">-- 使用视图</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> vw1<span class="token punctuation">;</span><span class="token comment">-- 查看视图</span><span class="token keyword">show</span> <span class="token keyword">tables</span><span class="token punctuation">;</span><span class="token comment">-- 查看视图结构</span><span class="token keyword">desc</span> vw1<span class="token punctuation">;</span><span class="token comment">-- 查看视图的定义信息</span><span class="token keyword">show</span> <span class="token keyword">create</span> <span class="token keyword">view</span> vw1<span class="token punctuation">;</span><span class="token comment">-- 删除视图</span><span class="token keyword">drop</span> <span class="token keyword">view</span> vw1<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="21-11存储过程"><a href="#21-11存储过程" class="headerlink" title="21.11存储过程"></a>21.11存储过程</h2><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">/*  create procedure 存储过程名(in|out|inout 参数名 参数类型)  begin    语句;  end*/</span><span class="token comment">-- 创建</span><span class="token keyword">create</span> <span class="token keyword">procedure</span> pro1<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">begin</span>  <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> t_student<span class="token punctuation">;</span><span class="token keyword">end</span><span class="token comment">-- 调用</span><span class="token keyword">call</span> pro1<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">-- 入参</span><span class="token keyword">create</span> <span class="token keyword">procedure</span> pro2<span class="token punctuation">(</span><span class="token operator">in</span> sid <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token keyword">begin</span>  <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> t_student <span class="token keyword">where</span> id <span class="token operator">=</span> sid<span class="token punctuation">;</span><span class="token keyword">end</span><span class="token comment">-- 调用</span><span class="token keyword">call</span> pro1<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token comment">-- 入参 出参</span><span class="token keyword">create</span> <span class="token keyword">procedure</span> pro3<span class="token punctuation">(</span><span class="token operator">in</span> sid <span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">out</span> sname <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">begin</span>  <span class="token keyword">select</span> <span class="token identifier"><span class="token punctuation">`</span>name<span class="token punctuation">`</span></span> <span class="token keyword">into</span> sname <span class="token keyword">from</span> t_student <span class="token keyword">where</span> id <span class="token operator">=</span> sid<span class="token punctuation">;</span><span class="token keyword">end</span><span class="token keyword">call</span> pro3<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token variable">@sname</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">-- @sname 自定义变量</span><span class="token keyword">select</span> <span class="token variable">@sname</span><span class="token punctuation">;</span><span class="token comment">/*  -- 定义会话变量      方式一：        set @变量名 = 值;      方式二：        select 列 into @变量名 [from 表]  -- 使用会话变量      select @变量名        -- 定义局部变量       declare 变量名 变量类型 default 默认值         -- 判断     if 条件表达式       then 语句     else 语句     end if*/</span><span class="token keyword">create</span> <span class="token keyword">procedure</span> pro4<span class="token punctuation">(</span><span class="token operator">in</span> sid <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token keyword">begin</span>  <span class="token keyword">declare</span> s_name <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">declare</span> s_salary <span class="token keyword">int</span><span class="token punctuation">;</span>  <span class="token keyword">select</span> <span class="token identifier"><span class="token punctuation">`</span>name<span class="token punctuation">`</span></span><span class="token punctuation">,</span> salary <span class="token keyword">into</span> s_name<span class="token punctuation">,</span> s_salary <span class="token keyword">from</span> t_student <span class="token keyword">where</span> id <span class="token operator">=</span> sid<span class="token punctuation">;</span>  <span class="token keyword">if</span> s_salary <span class="token operator">&gt;</span> <span class="token number">5000</span>    <span class="token keyword">then</span> <span class="token keyword">set</span> s_salary <span class="token operator">=</span> s_salary <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">;</span>  <span class="token keyword">else</span> <span class="token keyword">set</span> s_salary <span class="token operator">=</span> s_salary <span class="token operator">&lt;&lt;</span> <span class="token number">2</span><span class="token punctuation">;</span>  <span class="token keyword">end</span> <span class="token keyword">if</span><span class="token punctuation">;</span>  <span class="token keyword">update</span> t_student <span class="token keyword">set</span> salary <span class="token operator">=</span> s_salary <span class="token keyword">where</span> <span class="token identifier"><span class="token punctuation">`</span>name<span class="token punctuation">`</span></span> <span class="token operator">=</span> s_name<span class="token punctuation">;</span><span class="token keyword">end</span><span class="token keyword">call</span> pro4<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token comment">-- 循环</span><span class="token comment">/*  [while_label]:while 循环条件 do    循环体;  end while while_label;  [loop_label]:loop    循环体;  end loop loop_label;*/</span><span class="token keyword">create</span> <span class="token keyword">procedure</span> pro5<span class="token punctuation">(</span><span class="token keyword">out</span> rid <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token keyword">begin</span>  <span class="token keyword">declare</span> id <span class="token keyword">int</span> <span class="token keyword">default</span> <span class="token number">0</span><span class="token punctuation">;</span>  test_loop:<span class="token keyword">loop</span>    <span class="token keyword">set</span> id <span class="token operator">=</span> id <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> id <span class="token operator">&gt;</span> <span class="token number">3</span>      <span class="token keyword">then</span> <span class="token keyword">leave</span> test_loop<span class="token punctuation">;</span>    <span class="token keyword">end</span> <span class="token keyword">if</span><span class="token punctuation">;</span>  <span class="token keyword">end</span> <span class="token keyword">loop</span> test_loop<span class="token punctuation">;</span>  <span class="token keyword">set</span> rid <span class="token operator">=</span> id<span class="token punctuation">;</span><span class="token keyword">end</span><span class="token keyword">call</span> pro5<span class="token punctuation">(</span><span class="token variable">@rid</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">select</span> <span class="token variable">@rid</span><span class="token punctuation">;</span><span class="token comment">/*  游标：  1.声明游标    declare 游标名称 cursor for SQL;  2.打开游标    open 游标名称;  3.使用游标    fetch 游标名称 into 变量;  4.关闭游标*/</span><span class="token keyword">create</span> <span class="token keyword">procedure</span> pro6<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">begin</span>  <span class="token comment">-- 声明局部变量</span>  <span class="token keyword">declare</span> s_name <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">-- 定义游标</span>  <span class="token keyword">declare</span> my_cur <span class="token keyword">cursor</span> <span class="token keyword">for</span> <span class="token keyword">select</span> <span class="token identifier"><span class="token punctuation">`</span>name<span class="token punctuation">`</span></span> <span class="token keyword">from</span> t_student<span class="token punctuation">;</span>  <span class="token comment">-- 打开游标</span>  <span class="token keyword">open</span> my_cur<span class="token punctuation">;</span>  <span class="token comment">-- 循环</span>  cur_ioop:<span class="token keyword">loop</span>  <span class="token comment">-- 使用游标</span>  <span class="token keyword">fetch</span> my_cur <span class="token keyword">into</span> s_name<span class="token punctuation">;</span>  <span class="token comment">-- 判断</span>  <span class="token keyword">if</span> s_name <span class="token operator">=</span> <span class="token string">'小米'</span>    <span class="token keyword">then</span>     <span class="token keyword">update</span> t_student <span class="token keyword">set</span> salary <span class="token operator">=</span> salary <span class="token operator">+</span> <span class="token number">1000</span> <span class="token keyword">where</span> <span class="token identifier"><span class="token punctuation">`</span>name<span class="token punctuation">`</span></span> <span class="token operator">=</span> s_name<span class="token punctuation">;</span>    <span class="token comment">-- 离开循环</span>    <span class="token keyword">leave</span> cur_ioop<span class="token punctuation">;</span>  <span class="token comment">-- 结束判断</span>  <span class="token keyword">end</span> <span class="token keyword">if</span><span class="token punctuation">;</span>  <span class="token comment">-- 结束循环</span>  <span class="token keyword">end</span> <span class="token keyword">loop</span> cur_ioop<span class="token punctuation">;</span>  <span class="token comment">-- 关闭游标</span>  <span class="token keyword">close</span> my_cur<span class="token punctuation">;</span><span class="token keyword">end</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="21-12函数"><a href="#21-12函数" class="headerlink" title="21.12函数"></a>21.12函数</h2><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">/*  create function 函数名(参数名 参数类型,...)  returns 返回类型  begin    函数体;  end；*/</span><span class="token keyword">create</span> <span class="token keyword">function</span> fn2<span class="token punctuation">(</span>s_id <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token keyword">returns</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span><span class="token keyword">begin</span>  <span class="token keyword">declare</span> s_name <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">select</span> <span class="token identifier"><span class="token punctuation">`</span>name<span class="token punctuation">`</span></span> <span class="token keyword">into</span> s_name <span class="token keyword">from</span> t_student <span class="token keyword">where</span> id <span class="token operator">=</span> s_id<span class="token punctuation">;</span>  <span class="token keyword">return</span> s_name<span class="token punctuation">;</span><span class="token keyword">end</span><span class="token comment">-- 执行函数</span><span class="token keyword">select</span> 函数名<span class="token punctuation">(</span>实参<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="21-13触发器"><a href="#21-13触发器" class="headerlink" title="21.13触发器"></a>21.13触发器</h2><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">/*  create trigger 触发器名称  {before | after}  {insert | update | delete} on 表名  for each row  begin    语句;  end;*/</span><span class="token keyword">create</span> <span class="token keyword">trigger</span> after_insert <span class="token keyword">after</span> <span class="token keyword">insert</span> <span class="token keyword">on</span> t_student<span class="token keyword">for each row</span><span class="token keyword">begin</span>  <span class="token keyword">insert</span> <span class="token keyword">into</span> t_class<span class="token punctuation">(</span>name<span class="token punctuation">,</span>num<span class="token punctuation">)</span><span class="token keyword">value</span><span class="token punctuation">(</span><span class="token string">'500期'</span><span class="token punctuation">,</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">end</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="22反射"><a href="#22反射" class="headerlink" title="22反射"></a>22反射</h1><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/*  Java的反射（reflection）机制是指在程序的运行状态中，可以构造任意一个类的对象，可以了解任意一个对象所属的类，可以了解任意一个类的成员变量和方法，可以调用任意一个对象的属性和方法*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h1 id="23JDBC"><a href="#23JDBC" class="headerlink" title="23JDBC"></a>23JDBC</h1><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/*  Java数据库连接，（Java Database Connectivity，简称JDBC）是Java语言中用来规范客户端程序如何来访问数据库的应用程序接口，提供了诸如查询和更新数据库中数据的方法。JDBC也是Sun Microsystems的商标。我们通常说的JDBC是面向关系型数据库的*/</span><span class="token comment">/*  1.导包 mysql-connector-java-5.1.49.jar  2.加载（注册）驱动程序    Class.forName("com.mysql.jdbc.Driver");  3.建立链接    Connection connection = DriverManager.getConnection("jdbc:mysql://localhost:3306/test?serverTimezone=UTC", "root", "123456");  4.执行SQL语句    PreparedStatement preparedStatement = connection.prepareStatement("select * from t_student");  5.处理结果集    ResultSet resultSet = preparedStatement.executeQuery();  6.关闭数据库*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/images/%E8%B7%AF%E9%81%A5java/image-20220602091429909.png" alt="image-20220602091429909"></p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">/*  事务：ACID  插入班级表，获取刚刚插入的班级数据的主键值  insert into t_class(name,num)values('110期',110);  //获取刚插入数据的主键值  select last_insert_id();  插入学生表，class_id的就是班级数据的主键值  insert into `t_student`(name,sex,salary,birthday,create_time,update_time,class_id) values ('张三', '男', 1000, '2022-06-02', '2022-06-02 09:50:12', '2022-06-02 09:50:12', ?)*/</span><span class="token comment">/*  1.设置非自动提交    Connection接口中方法setAutoCommit(false)  2.执行SQL  3.提交Connection接口中方法commit() | 回滚Connection接口中方法rollback()*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="24lombok"><a href="#24lombok" class="headerlink" title="24lombok"></a>24lombok</h1><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/*  1.idea安装lombok  2.导包  3.使用注解    @Getter and @Setter    @FieldNameConstants    @ToString    @EqualsAndHashCode    @AllArgsConstructor, @RequiredArgsConstructor and @NoArgsConstructor    @Log, @Log4j, @Log4j2, @Slf4j, @XSlf4j, @CommonsLog, @JBossLog, @Flogger, @CustomLog    @Data    @Builder    @SuperBuilder    @Singular    @Delegate    @Value    @Accessors    @Wither    @With    @SneakyThrows    @val    @var    experimental @var    @UtilityClass    Lombok config system*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="25注解"><a href="#25注解" class="headerlink" title="25注解"></a>25注解</h1><h2 id="25-1概念"><a href="#25-1概念" class="headerlink" title="25.1概念"></a>25.1概念</h2><p>从JDK5开始,Java增加对元数据的支持，也就是注解，注解与注释是有一定区别的，可以把注解理解为代码里的特殊标记，这些标记可以在编译，类加载，运行时被读取，并执行相应的处理。通过注解开发人员可以在不改变原有代码和逻辑的情况下在源代码中嵌入补充信息</p><h2 id="25-2元注解"><a href="#25-2元注解" class="headerlink" title="25.2元注解"></a>25.2元注解</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/*    @Retention：注解保留策略RetenionPolicy    @Target：注解的使用范围ElementType        ElementType.TYPE 类或接口        ElementType.FIELD, 成员变量        ElementType.METHOD 方法    @Documented    @Inherited    @Result*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="25-3自定义注解"><a href="#25-3自定义注解" class="headerlink" title="25.3自定义注解"></a>25.3自定义注解</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/*  权限修饰符 @interface 注解名 {      类型 成员名() default 值;  }*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="26单元测试"><a href="#26单元测试" class="headerlink" title="26单元测试"></a>26单元测试</h1><h2 id="26-1概念"><a href="#26-1概念" class="headerlink" title="26.1概念"></a>26.1概念</h2><p>JUnit是一个Java语言的单元测试框架</p><h2 id="26-2测试"><a href="#26-2测试" class="headerlink" title="26.2测试"></a>26.2测试</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/*  junit-4.13.2.jar  hamcrest-core-1.3.jar    @Test 使用该注解标注的public void方法是一个测试方法  @Before 在任意使用@Test注解标注的public void方法执行前执行*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="27三层架构"><a href="#27三层架构" class="headerlink" title="27三层架构"></a>27三层架构</h1><p>视图层（View）-&gt; 业务层（Service）-&gt; 持久层（Dao）-&gt;数据库</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">servicedaopojo<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h1 id="28xml"><a href="#28xml" class="headerlink" title="28xml"></a>28xml</h1><h2 id="28-1简介"><a href="#28-1简介" class="headerlink" title="28.1简介"></a>28.1简介</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/*  Extensible Markup Language 可扩展标记语言*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="28-2作用"><a href="#28-2作用" class="headerlink" title="28.2作用"></a>28.2作用</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/*  存储数据  传输数据*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="28-3语法"><a href="#28-3语法" class="headerlink" title="28.3语法"></a>28.3语法</h2><ol><li>文档声明（版本，编码）</li></ol><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token prolog">&lt;?xml version="1.0" encoding="utf-8" ?&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="2"><li>根标签（有且仅有一个）</li></ol><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>stus</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>stu</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">&gt;</span></span>张三<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>age</span><span class="token punctuation">&gt;</span></span>20<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>age</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>stu</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>stu</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">&gt;</span></span>李四<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>age</span><span class="token punctuation">&gt;</span></span>30<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>age</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>stu</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>stus</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="28-4注释"><a href="#28-4注释" class="headerlink" title="28.4注释"></a>28.4注释</h2><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!-- 注释内容 --&gt;</span><span class="token prolog">&lt;?xml version="1.0" encoding="utf-8" ?&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>cla</span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!-- &lt;name&gt;22期&lt;/name&gt; --&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>num</span><span class="token punctuation">&gt;</span></span>30<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>num</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>cla</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="28-5解析方式"><a href="#28-5解析方式" class="headerlink" title="28.5解析方式"></a>28.5解析方式</h2><p><em>dom4j</em>是一个Java的XML API</p><h2 id="28-6约束"><a href="#28-6约束" class="headerlink" title="28.6约束"></a>28.6约束</h2><ol><li><p><strong>DTD约束</strong></p></li><li><p><strong>Schema约束</strong>（.xsd）</p></li></ol><h1 id="29JPA"><a href="#29JPA" class="headerlink" title="29JPA"></a>29JPA</h1><p>JPA是Java Persistence API的简称，中文名Java持久层API，是JDK 5.0注解或XML描述对象－关系表的映射关系，并将运行期的实体<a href="https://baike.baidu.com/item/%E5%AF%B9%E8%B1%A1%E6%8C%81%E4%B9%85%E5%8C%96/7316192">对象持久化</a>到数据库中。</p><p><img src="/images/%E8%B7%AF%E9%81%A5java/image-20220606150831513.png" alt="image-20220606150831513"></p><p><img src="/images/%E8%B7%AF%E9%81%A5java/jdbc.png" alt="jdbc"></p><p><img src="/images/%E8%B7%AF%E9%81%A5java/jpa.png" alt="jpa"></p><h1 id="30Tomcat"><a href="#30Tomcat" class="headerlink" title="30Tomcat"></a>30Tomcat</h1><p><a href="https://tomcat.apache.org/">https://tomcat.apache.org/</a></p><p>Tomcat 服务器是一个免费的开放源代码的Web 应用服务器，属于轻量级应用<a href="https://baike.baidu.com/item/%E6%9C%8D%E5%8A%A1%E5%99%A8">服务器</a></p><h2 id="30-1启停"><a href="#30-1启停" class="headerlink" title="30.1启停"></a>30.1启停</h2><p>默认端口：8080</p><pre class="line-numbers language-cmd" data-language="cmd"><code class="language-cmd">#启动apache-tomcat-9.0.63\bin\startup.bat#停止apache-tomcat-9.0.63\bin\shutdown.bat<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="30-2配置"><a href="#30-2配置" class="headerlink" title="30.2配置"></a>30.2配置</h2><pre class="line-numbers language-cmd" data-language="cmd"><code class="language-cmd">apache-tomcat-9.0.63\conf\server.xml<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="30-3日志"><a href="#30-3日志" class="headerlink" title="30.3日志"></a>30.3日志</h2><pre class="line-numbers language-cmd" data-language="cmd"><code class="language-cmd">apache-tomcat-9.0.63\logs\catalina.2022-06-06.logapache-tomcat-9.0.63\logs\localhost.2022-06-06.log<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="30-4web应用"><a href="#30-4web应用" class="headerlink" title="30.4web应用"></a>30.4web应用</h2><pre class="line-numbers language-cmd" data-language="cmd"><code class="language-cmd">#部署目录apache-tomcat-9.0.63\webapps<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="30-5工作目录"><a href="#30-5工作目录" class="headerlink" title="30.5工作目录"></a>30.5工作目录</h2><pre class="line-numbers language-cmd" data-language="cmd"><code class="language-cmd">apache-tomcat-9.0.63\work<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="30-6修改端口"><a href="#30-6修改端口" class="headerlink" title="30.6修改端口"></a>30.6修改端口</h2><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Connector</span> <span class="token attr-name">port</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>8081<span class="token punctuation">"</span></span> <span class="token attr-name">protocol</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>HTTP/1.1<span class="token punctuation">"</span></span>               <span class="token attr-name">connectionTimeout</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>20000<span class="token punctuation">"</span></span>               <span class="token attr-name">redirectPort</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>8443<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="30-7部署方式"><a href="#30-7部署方式" class="headerlink" title="30.7部署方式"></a>30.7部署方式</h2><p>web项目结构：WEB-INF/web.xml</p><ol><li><p>方式一</p><p>把web项目放在webapps目录下</p></li><li><p>方式二</p></li></ol><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Host</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>localhost<span class="token punctuation">"</span></span>  <span class="token attr-name">appBase</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>webapps<span class="token punctuation">"</span></span>            <span class="token attr-name">unpackWARs</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span> <span class="token attr-name">autoDeploy</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!-- path访问路径，docBase项目路径 --&gt;</span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Context</span> <span class="token attr-name">path</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/web02<span class="token punctuation">"</span></span> <span class="token attr-name">docBase</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>D:\works22\web02<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ol start="3"><li>方式三</li></ol><p>apache-tomcat-9.0.63\conf\Catalina\localhost，新建xml文件（web03.xml）</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token prolog">&lt;?xml version="1.0" encoding="utf-8" ?&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Context</span> <span class="token attr-name">path</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/web03<span class="token punctuation">"</span></span> <span class="token attr-name">docBase</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>D:\works22\web03<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="30-8idea创建web"><a href="#30-8idea创建web" class="headerlink" title="30.8idea创建web"></a>30.8idea创建web</h2><p>创建JAVA项目，再添加web结构</p><p><img src="/images/%E8%B7%AF%E9%81%A5java/image-20220607104326604.png" alt="image-20220607104326604"></p><p><img src="/images/%E8%B7%AF%E9%81%A5java/image-20220607104301006.png" alt="image-20220607104301006"></p><h2 id="30-9idea集成tomcat"><a href="#30-9idea集成tomcat" class="headerlink" title="30.9idea集成tomcat"></a>30.9idea集成tomcat</h2><p><img src="/images/%E8%B7%AF%E9%81%A5java/image-20220607105157073.png" alt="image-20220607105157073"></p><p><img src="/images/%E8%B7%AF%E9%81%A5java/image-20220607105255380.png" alt="image-20220607105255380"></p><p><img src="/images/%E8%B7%AF%E9%81%A5java/image-20220607105839077.png" alt="image-20220607105839077"></p><p><img src="/images/%E8%B7%AF%E9%81%A5java/image-20220607110259072.png" alt="image-20220607110259072"></p><p><img src="/images/%E8%B7%AF%E9%81%A5java/image-20220607110439023.png" alt="image-20220607110439023"></p><h2 id="30-10idea部署web"><a href="#30-10idea部署web" class="headerlink" title="30.10idea部署web"></a>30.10idea部署web</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">C</span><span class="token operator">:</span>\<span class="token class-name">Users</span>\admin\<span class="token class-name">AppData</span>\<span class="token class-name">Local</span>\<span class="token class-name">JetBrains</span>\<span class="token class-name">IntelliJIdea2021</span><span class="token number">.1</span>\tomcat\b93e6603<span class="token operator">-</span><span class="token number">3</span>cc2<span class="token operator">-</span><span class="token number">4996</span><span class="token operator">-</span><span class="token number">8588</span><span class="token operator">-</span><span class="token number">0957f</span><span class="token number">561</span>c216 <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/images/%E8%B7%AF%E9%81%A5java/image-20220607135125403.png" alt="image-20220607135125403"></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">C</span><span class="token operator">:</span>\<span class="token class-name">Users</span>\admin\<span class="token class-name">AppData</span>\<span class="token class-name">Local</span>\<span class="token class-name">JetBrains</span>\<span class="token class-name">IntelliJIdea2021</span><span class="token number">.1</span>\tomcat\b93e6603<span class="token operator">-</span><span class="token number">3</span>cc2<span class="token operator">-</span><span class="token number">4996</span><span class="token operator">-</span><span class="token number">8588</span><span class="token operator">-</span><span class="token number">0957f</span><span class="token number">561</span>c216<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/images/%E8%B7%AF%E9%81%A5java/image-20220607135642884.png" alt="image-20220607135642884"></p><p><img src="/images/%E8%B7%AF%E9%81%A5java/image-20220607135807540.png" alt="image-20220607135807540"></p><h2 id="30-11日志乱码"><a href="#30-11日志乱码" class="headerlink" title="30.11日志乱码"></a>30.11日志乱码</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">IntelliJIdea2021</span><span class="token number">.1</span>\tomcat\b93e6603<span class="token operator">-</span><span class="token number">3</span>cc2<span class="token operator">-</span><span class="token number">4996</span><span class="token operator">-</span><span class="token number">8588</span><span class="token operator">-</span><span class="token number">0957f</span><span class="token number">561</span>c216\conf\logging<span class="token punctuation">.</span>properties<span class="token comment">//51行</span><span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>logging<span class="token punctuation">.</span></span>ConsoleHandler</span><span class="token punctuation">.</span>encoding <span class="token operator">=</span> <span class="token constant">GBK</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h1 id="31Servlet"><a href="#31Servlet" class="headerlink" title="31Servlet"></a>31Servlet</h1><h2 id="31-1是什么"><a href="#31-1是什么" class="headerlink" title="31.1是什么"></a>31.1是什么</h2><p>Servlet（Server Applet）是<a href="https://baike.baidu.com/item/Java/85979">Java</a> Servlet的简称，称为小服务程序或服务连接器，用Java编写的<a href="https://baike.baidu.com/item/%E6%9C%8D%E5%8A%A1%E5%99%A8/100571">服务器</a>端程序，具有独立于平台和<a href="https://baike.baidu.com/item/%E5%8D%8F%E8%AE%AE/13020269">协议</a>的特性，主要功能在于交互式地浏览和生成数据，生成动态<a href="https://baike.baidu.com/item/Web/150564">Web</a>内容</p><h2 id="31-2实现方式"><a href="#31-2实现方式" class="headerlink" title="31.2实现方式"></a>31.2实现方式</h2><ol><li>实现javax.servlet.Servlet接口，重写接口中的抽象方法</li><li>继承javax.servlet.GenericServlet抽象类，实现抽象方法</li><li>继承javax.servlet.http.HttpServlet类，重写doGet()，doPost()…</li></ol><h2 id="31-3生命周期方法"><a href="#31-3生命周期方法" class="headerlink" title="31.3生命周期方法"></a>31.3生命周期方法</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//对象创建后执行一次</span><span class="token number">1.</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token class-name">ServletConfig</span> servletConfig<span class="token punctuation">)</span><span class="token comment">//请求到来时执行多次</span><span class="token number">2.</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">service</span><span class="token punctuation">(</span><span class="token class-name">ServletRequest</span> servletRequest<span class="token punctuation">,</span> <span class="token class-name">ServletResponse</span> servletResponse<span class="token punctuation">)</span><span class="token comment">//对象销毁前执行一次</span><span class="token number">3.</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">destroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="31-4load-on-startup"><a href="#31-4load-on-startup" class="headerlink" title="31.4load-on-startup"></a>31.4load-on-startup</h2><ol><li>负整数或不存在, Servlet对象在第一次请求到来时创建</li><li>正整数或0，Servlet对象随着tomcat的启动而创建</li></ol><h2 id="31-5ServletConfig"><a href="#31-5ServletConfig" class="headerlink" title="31.5ServletConfig"></a>31.5ServletConfig</h2><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">&gt;</span></span>serverDemo01<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-class</span><span class="token punctuation">&gt;</span></span>com.bwf.servlet.ServerDemo01<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-class</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>init-param</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-name</span><span class="token punctuation">&gt;</span></span>name<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-name</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-value</span><span class="token punctuation">&gt;</span></span>zhangsan<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-value</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>init-param</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>load-on-startup</span><span class="token punctuation">&gt;</span></span>1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>load-on-startup</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="31-6ServletRequest"><a href="#31-6ServletRequest" class="headerlink" title="31.6ServletRequest"></a>31.6ServletRequest</h2><p>封装请求数据，请求到来时创建，请求结束销毁</p><h2 id="31-7ServletResponse"><a href="#31-7ServletResponse" class="headerlink" title="31.7ServletResponse"></a>31.7ServletResponse</h2><p>封装相应数据，请求到来时创建，请求结束销毁</p><h2 id="31-8ServletContext"><a href="#31-8ServletContext" class="headerlink" title="31.8ServletContext"></a>31.8ServletContext</h2><p>域对象</p><p>tomcat启动时创建，停止时销毁（一个项目对应一个）</p><h2 id="31-9请求方式"><a href="#31-9请求方式" class="headerlink" title="31.9请求方式"></a>31.9请求方式</h2><p><img src="/images/%E8%B7%AF%E9%81%A5java/image-20220608103912917.png" alt="image-20220608103912917"></p><h2 id="31-10依赖问题"><a href="#31-10依赖问题" class="headerlink" title="31.10依赖问题"></a>31.10依赖问题</h2><p><img src="/images/%E8%B7%AF%E9%81%A5java/image-20220608111036281.png" alt="image-20220608111036281"></p><p><img src="/images/%E8%B7%AF%E9%81%A5java/image-20220608111207739.png" alt="image-20220608111207739"></p><h2 id="31-11请求流程"><a href="#31-11请求流程" class="headerlink" title="31.11请求流程"></a>31.11请求流程</h2><p><img src="/images/%E8%B7%AF%E9%81%A5java/image-20220608113427907.png" alt="image-20220608113427907"></p><h2 id="31-12乱码"><a href="#31-12乱码" class="headerlink" title="31.12乱码"></a>31.12乱码</h2><ol><li>GET请求</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bytes <span class="token operator">=</span> name<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>name <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">,</span> <span class="token string">"gbk"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ol start="2"><li>POST请求</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java">req<span class="token punctuation">.</span><span class="token function">setCharacterEncoding</span><span class="token punctuation">(</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="3"><li>响应乱码</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java">resp<span class="token punctuation">.</span><span class="token function">setContentType</span><span class="token punctuation">(</span><span class="token string">"text/html;charset=utf8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="31-13转发"><a href="#31-13转发" class="headerlink" title="31.13转发"></a>31.13转发</h2><p>一次请求，一次响应，由最后一个servlet完成（响应头，响应体）</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">RequestDispatcher</span> dispatcher <span class="token operator">=</span> req<span class="token punctuation">.</span><span class="token function">getRequestDispatcher</span><span class="token punctuation">(</span><span class="token string">"servlet路径"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>dispatcher<span class="token punctuation">.</span><span class="token function">forward</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span> resp<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="/images/%E8%B7%AF%E9%81%A5java/image-20220608153115796.png" alt="image-20220608153115796"></p><p><img src="/images/%E8%B7%AF%E9%81%A5java/image-20220608153248148.png" alt="image-20220608153248148"></p><h2 id="31-14包含"><a href="#31-14包含" class="headerlink" title="31.14包含"></a>31.14包含</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">RequestDispatcher</span> dispatcher <span class="token operator">=</span> req<span class="token punctuation">.</span><span class="token function">getRequestDispatcher</span><span class="token punctuation">(</span><span class="token string">"servlet路径"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>dispatcher<span class="token punctuation">.</span><span class="token function">include</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span> resp<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="/images/%E8%B7%AF%E9%81%A5java/image-20220608155438579.png" alt="image-20220608155438579"></p><h2 id="31-15重定向"><a href="#31-15重定向" class="headerlink" title="31.15重定向"></a>31.15重定向</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//方式一                     /项目路径/servlet路径</span>resp<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token string">"Location"</span><span class="token punctuation">,</span><span class="token string">"/web03_war_exploded/r02"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>resp<span class="token punctuation">.</span><span class="token function">setStatus</span><span class="token punctuation">(</span><span class="token number">302</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//方式二            /项目路径/servlet路径</span>resp<span class="token punctuation">.</span><span class="token function">sendRedirect</span><span class="token punctuation">(</span><span class="token string">"https://www.atstudy.com/"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/images/%E8%B7%AF%E9%81%A5java/image-20220608161714587.png" alt="image-20220608161714587"></p><p><img src="/images/%E8%B7%AF%E9%81%A5java/image-20220608162220536.png" alt="image-20220608162220536"></p><p><img src="/images/%E8%B7%AF%E9%81%A5java/image-20220608162408890.png" alt="image-20220608162408890"></p><h2 id="31-16转发-重定向"><a href="#31-16转发-重定向" class="headerlink" title="31.16转发|重定向"></a>31.16转发|重定向</h2><ol><li><p>请求转发是一次请求一次响应，重定向是两次请求两次响应</p></li><li><p>请求转发地址栏不变，重定向地址栏显示最后的servlet路径</p></li><li><p>请求转发只能转发到本项目的其它servlet，重定向既可以到本项目的其它servlet也可以到其它项目</p></li><li><p>请求转发是服务器端行为，重定向是客户端行为</p></li></ol><h2 id="31-17Servlet三大域"><a href="#31-17Servlet三大域" class="headerlink" title="31.17Servlet三大域"></a>31.17Servlet三大域</h2><ol><li><p>ServletContext  整个项目</p></li><li><p>HttpServletRequest  一次请求</p></li></ol><h2 id="31-18BaseServlet"><a href="#31-18BaseServlet" class="headerlink" title="31.18BaseServlet"></a>31.18BaseServlet</h2><p><img src="/images/%E8%B7%AF%E9%81%A5java/image-20220609103302415.png" alt="image-20220609103302415"></p><h1 id="32过滤器"><a href="#32过滤器" class="headerlink" title="32过滤器"></a>32过滤器</h1><ol><li>自定义类实现javax.servlet.Filter接口，重写接口中的方法</li><li>web.xml配置</li></ol><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!-- 过滤所有请求 --&gt;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">&gt;</span></span>/*<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">&gt;</span></span>        <span class="token comment">&lt;!-- 过滤指定请求（根据servlet名称） --&gt;</span><span class="token comment">&lt;!--        &lt;servlet-name&gt;studentServlet&lt;/servlet-name&gt;--&gt;</span>        <span class="token comment">&lt;!-- 过滤指定请求（根据servlet路径） --&gt;</span><span class="token comment">&lt;!--        &lt;url-pattern&gt;/stu&lt;/url-pattern&gt;--&gt;</span>        <span class="token comment">&lt;!-- 过滤类型 --&gt;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dispatcher</span><span class="token punctuation">&gt;</span></span>REQUEST<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dispatcher</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dispatcher</span><span class="token punctuation">&gt;</span></span>FORWARD<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dispatcher</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dispatcher</span><span class="token punctuation">&gt;</span></span>INCLUDE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dispatcher</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dispatcher</span><span class="token punctuation">&gt;</span></span>ERROR<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dispatcher</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dispatcher</span><span class="token punctuation">&gt;</span></span>ASYNC<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dispatcher</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>请求到servlet之前执行预处理工作，比如：鉴权，设置编码</p><h1 id="33监听器"><a href="#33监听器" class="headerlink" title="33监听器"></a>33监听器</h1><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!--    1. ServletContextListener       监听 ServletContext 对象创建销毁    2. ServletContextAttributeListener       监听 ServletContext 对象添加、删除、修改数据    3. HttpSessionListener    4. HttpSessionAttributeListener    5. ServletReqestListener    6. ServletReqestAttributeListener--&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>listener</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>listener-class</span><span class="token punctuation">&gt;</span></span>com.bwf.listener.ScListenerDemo<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>listener-class</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>listener</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="34注解"><a href="#34注解" class="headerlink" title="34注解"></a>34注解</h1><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@WebServlet</span><span class="token punctuation">(</span>urlPatterns <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"/stu01"</span><span class="token punctuation">}</span><span class="token punctuation">,</span> loadOnStartup <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token annotation punctuation">@WebFilter</span><span class="token punctuation">(</span>urlPatterns <span class="token operator">=</span> <span class="token string">"/*"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@WebListener</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h1 id="35JSP"><a href="#35JSP" class="headerlink" title="35JSP"></a>35JSP</h1><h2 id="35-1简介"><a href="#35-1简介" class="headerlink" title="35.1简介"></a>35.1简介</h2><p><strong>JSP</strong>（全称<strong>J</strong>ava<strong>S</strong>erver <strong>P</strong>ages）一种<a href="https://baike.baidu.com/item/%E5%8A%A8%E6%80%81%E7%BD%91%E9%A1%B5%E6%8A%80%E6%9C%AF/9415956">动态网页技术</a>标准</p><h2 id="35-2组成"><a href="#35-2组成" class="headerlink" title="35.2组成"></a>35.2组成</h2><p>java + html + 指令</p><h2 id="35-3原理"><a href="#35-3原理" class="headerlink" title="35.3原理"></a>35.3原理</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Local</span>\<span class="token class-name">JetBrains</span>\<span class="token class-name">IntelliJIdea2021</span><span class="token number">.1</span>\tomcat\b93e6603<span class="token operator">-</span><span class="token number">3</span>cc2<span class="token operator">-</span><span class="token number">4996</span><span class="token operator">-</span><span class="token number">8588</span><span class="token operator">-</span><span class="token number">0957f</span><span class="token number">561</span>c216\work\<span class="token class-name">Catalina</span>\localhost\web06_war_exploded\org\apache\jsp<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/images/%E8%B7%AF%E9%81%A5java/image-20220609162454718.png" alt="image-20220609162454718"></p><h2 id="35-4隐式对象"><a href="#35-4隐式对象" class="headerlink" title="35.4隐式对象"></a>35.4隐式对象</h2><p><img src="/images/%E8%B7%AF%E9%81%A5java/image-20220610135740798.png" alt="image-20220610135740798"></p><h2 id="35-5指令"><a href="#35-5指令" class="headerlink" title="35.5指令"></a>35.5指令</h2><pre class="line-numbers language-jsp" data-language="jsp"><code class="language-jsp">&lt;%@ 指令名 属性名 = "属性值" %&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol><li>page</li></ol><pre class="line-numbers language-jsp" data-language="jsp"><code class="language-jsp">&lt;!-- 设置响应编码 --&gt;&lt;%@ page contentType="text/html;charset=UTF-8" language="java" %&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ol start="2"><li><p>taglib</p></li><li><p>include</p></li></ol><h1 id="36EL表达式"><a href="#36EL表达式" class="headerlink" title="36EL表达式"></a>36EL表达式</h1><h2 id="36-1语法"><a href="#36-1语法" class="headerlink" title="36.1语法"></a>36.1语法</h2><pre class="line-numbers language-jsp" data-language="jsp"><code class="language-jsp">${} 全域查找 page-&gt;request-&gt;session-&gt;application<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="36-2隐式对象"><a href="#36-2隐式对象" class="headerlink" title="36.2隐式对象"></a>36.2隐式对象</h2><p><img src="/images/%E8%B7%AF%E9%81%A5java/image-20220610140318166.png" alt="image-20220610140318166"></p><h2 id="36-3运算符"><a href="#36-3运算符" class="headerlink" title="36.3运算符"></a>36.3运算符</h2><h1 id="37JSTL"><a href="#37JSTL" class="headerlink" title="37JSTL"></a>37JSTL</h1><h2 id="37-1简介"><a href="#37-1简介" class="headerlink" title="37.1简介"></a>37.1简介</h2><p>JSP标准标签库（JSTL）是一个JSP标签集合，它封装了JSP应用的通用核心功能</p><h2 id="37-2标签"><a href="#37-2标签" class="headerlink" title="37.2标签"></a>37.2标签</h2><ol><li>核心标签</li></ol><pre class="line-numbers language-jsp" data-language="jsp"><code class="language-jsp">setifchooseforeach<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li>格式标签</li></ol><pre class="line-numbers language-jsp" data-language="jsp"><code class="language-jsp">formatDateformatNumber<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ol start="3"><li><p>sql标签</p></li><li><p>xml标签</p></li></ol><h2 id="37-3安装"><a href="#37-3安装" class="headerlink" title="37.3安装"></a>37.3安装</h2><p>jstl-1.2.jar</p><h1 id="38fastjson"><a href="#38fastjson" class="headerlink" title="38fastjson"></a>38fastjson</h1><p><a href="https://github.com/alibaba/fastjson">https://github.com/alibaba/fastjson</a></p><h2 id="38-1安装"><a href="#38-1安装" class="headerlink" title="38.1安装"></a>38.1安装</h2><p>fastjson-1.2.83.jar</p><h2 id="38-2注解"><a href="#38-2注解" class="headerlink" title="38.2注解"></a>38.2注解</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Data</span><span class="token annotation punctuation">@NoArgsConstructor</span><span class="token annotation punctuation">@AllArgsConstructor</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Student</span> <span class="token keyword">implements</span> <span class="token class-name">Serializable</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@JSONField</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"stuId"</span><span class="token punctuation">,</span> ordinal <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> id<span class="token punctuation">;</span>    <span class="token annotation punctuation">@JSONField</span><span class="token punctuation">(</span>ordinal <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token annotation punctuation">@JSONField</span><span class="token punctuation">(</span>ordinal <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> sex<span class="token punctuation">;</span>    <span class="token annotation punctuation">@JSONField</span><span class="token punctuation">(</span>ordinal <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token class-name">Date</span> date<span class="token punctuation">;</span>    <span class="token annotation punctuation">@JSONField</span><span class="token punctuation">(</span>ordinal <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">,</span> serialize <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> salary<span class="token punctuation">;</span>    <span class="token annotation punctuation">@JSONField</span><span class="token punctuation">(</span>ordinal <span class="token operator">=</span> <span class="token number">6</span><span class="token punctuation">,</span> format <span class="token operator">=</span> <span class="token string">"yyyy-MM-dd HH:mm:ss"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token class-name">Date</span> createTime<span class="token punctuation">;</span>    <span class="token annotation punctuation">@JSONField</span><span class="token punctuation">(</span>ordinal <span class="token operator">=</span> <span class="token number">7</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token class-name">Date</span> updateTime<span class="token punctuation">;</span>    <span class="token annotation punctuation">@JSONField</span><span class="token punctuation">(</span>ordinal <span class="token operator">=</span> <span class="token number">8</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> classID<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="32-3方法"><a href="#32-3方法" class="headerlink" title="32.3方法"></a>32.3方法</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Student</span> student <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"张三"</span><span class="token punctuation">,</span> <span class="token string">"男"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">5000</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//对象-&gt;json</span><span class="token class-name">String</span> jsonString <span class="token operator">=</span> <span class="token class-name">JSONObject</span><span class="token punctuation">.</span><span class="token function">toJSONString</span><span class="token punctuation">(</span>student<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>jsonString<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//json-&gt;对象</span><span class="token class-name">Student</span> stu2 <span class="token operator">=</span> <span class="token class-name">JSONObject</span><span class="token punctuation">.</span><span class="token function">parseObject</span><span class="token punctuation">(</span>jsonString<span class="token punctuation">,</span> <span class="token class-name">Student</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>stu2<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="39-cookie"><a href="#39-cookie" class="headerlink" title="39.cookie"></a>39.cookie</h1><h2 id="39-1简介"><a href="#39-1简介" class="headerlink" title="39.1简介"></a>39.1简介</h2><p>cookie是http协议规定的，用于跟踪用户状态，由服务器端创建保存到客户端的一个key/value数据，当浏览器再次请求服务器时，把cookie随请求发送到服务器</p><h2 id="39-2cookie"><a href="#39-2cookie" class="headerlink" title="39.2cookie"></a>39.2cookie</h2><p>chrome://settings/cookies/detail?site=localhost&amp;search=cookie</p><p><img src="/images/%E8%B7%AF%E9%81%A5java/image-20220613141717732.png" alt="image-20220613141717732"></p><p><img src="/images/%E8%B7%AF%E9%81%A5java/image-20220613141757798.png" alt="image-20220613141757798"></p><p><img src="/images/%E8%B7%AF%E9%81%A5java/image-20220613141819968.png" alt="image-20220613141819968"></p><p><img src="/images/%E8%B7%AF%E9%81%A5java/image-20220613142049922.png" alt="image-20220613142049922"></p><h2 id="39-3maxAge"><a href="#39-3maxAge" class="headerlink" title="39.3maxAge"></a>39.3maxAge</h2><ol><li>maxAge &gt; 0 浏览器会把cookie保存到客户端硬盘上，有效时长为maxAge的值</li><li>maxAge = 0 浏览器会立刻删除cookie</li><li>maxAge &lt; 0 cookie保存在浏览器内存中</li></ol><h2 id="39-4path"><a href="#39-4path" class="headerlink" title="39.4path"></a>39.4path</h2><p>aCookie.path = /web08_war_exploded</p><p>bCookie.path = /web08_war_exploded/jsp</p><p>cCookie.path = /web08_war_exploded/jsp/user</p><h2 id="39-5domain"><a href="#39-5domain" class="headerlink" title="39.5domain"></a>39.5domain</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java">cookie<span class="token punctuation">.</span><span class="token function">setDomain</span><span class="token punctuation">(</span><span class="token string">".baidu.com"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="40-HttpSession"><a href="#40-HttpSession" class="headerlink" title="40.HttpSession"></a>40.HttpSession</h1><p>Httpsession是JavaWeb提供的用于会话跟踪的服务器端对象</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">req<span class="token punctuation">.</span><span class="token function">getSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol><li><p>如果sessionId不存在，创建session对象，同时生成sessionId保存到cookie中，响应到客户端</p></li><li><p>如果sessionId存在，则通过sessionId查找session对象，如果没有找到，创建session对象，生成新的sessionId保存到cookie中，响应到客户端，如果找到，则直接响应到客户端</p></li></ol><h1 id="41上传下载"><a href="#41上传下载" class="headerlink" title="41上传下载"></a>41上传下载</h1><h2 id="41-1安装"><a href="#41-1安装" class="headerlink" title="41.1安装"></a>41.1安装</h2><ol><li>commons-fileupload-1.4.jar</li><li>commons-io-2.11.0.jar</li></ol><h2 id="41-2页面"><a href="#41-2页面" class="headerlink" title="41.2页面"></a>41.2页面</h2><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>upload<span class="token punctuation">"</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>post<span class="token punctuation">"</span></span> <span class="token attr-name">enctype</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>multipart/form-data<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    用户名:<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>hr</span><span class="token punctuation">/&gt;</span></span>    上传:<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>file<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>fl<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>hr</span><span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>提交<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="42Maven"><a href="#42Maven" class="headerlink" title="42Maven"></a>42Maven</h1><h2 id="42-1项目构建"><a href="#42-1项目构建" class="headerlink" title="42.1项目构建"></a>42.1项目构建</h2><p><img src="/images/%E8%B7%AF%E9%81%A5java/%E6%9E%84%E5%BB%BA.png" alt="构建"></p><h2 id="42-2jar包管理"><a href="#42-2jar包管理" class="headerlink" title="42.2jar包管理"></a>42.2jar包管理</h2><p><img src="/images/%E8%B7%AF%E9%81%A5java/image-20220106091758931.png" alt="image-20220106091758931"></p><h2 id="42-3安装"><a href="#42-3安装" class="headerlink" title="42.3安装"></a>42.3安装</h2><p><a href="https://maven.apache.org/">https://maven.apache.org/</a></p><p><a href="https://archive.apache.org/dist/maven/maven-3/">https://archive.apache.org/dist/maven/maven-3/</a></p><h2 id="42-4配置环境变量"><a href="#42-4配置环境变量" class="headerlink" title="42.4配置环境变量"></a>42.4配置环境变量</h2><pre class="line-numbers language-cmd" data-language="cmd"><code class="language-cmd">MAVEN_HOME=D:\works22\apache-maven-3.8.6Path=%MAVEN_HOME%\bin;Path=D:\works22\apache-maven-3.8.6\bin<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-cmd" data-language="cmd"><code class="language-cmd">mvn -version<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="42-5仓库配置"><a href="#42-5仓库配置" class="headerlink" title="42.5仓库配置"></a>42.5仓库配置</h2><ol><li>本地仓库</li></ol><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>settings</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://maven.apache.org/SETTINGS/1.2.0<span class="token punctuation">"</span></span>          <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>          <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://maven.apache.org/SETTINGS/1.2.0 https://maven.apache.org/xsd/settings-1.2.0.xsd<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>  <span class="token comment">&lt;!-- localRepository   | The path to the local repository maven will use to store artifacts.   |   | Default: ${user.home}/.m2/repository  &lt;localRepository&gt;/path/to/local/repo&lt;/localRepository&gt;  --&gt;</span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>localRepository</span><span class="token punctuation">&gt;</span></span>D:\works22\repo<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>localRepository</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li>公共仓库地址（阿里云）</li></ol><p><a href="https://developer.aliyun.com/mvn/guide">https://developer.aliyun.com/mvn/guide</a></p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mirror</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span><span class="token punctuation">&gt;</span></span>aliyunmaven<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mirrorOf</span><span class="token punctuation">&gt;</span></span>*<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mirrorOf</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">&gt;</span></span>阿里云公共仓库<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url</span><span class="token punctuation">&gt;</span></span>https://maven.aliyun.com/repository/public<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mirror</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mirrors</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="42-6idea集成maven"><a href="#42-6idea集成maven" class="headerlink" title="42.6idea集成maven"></a>42.6idea集成maven</h2><p><img src="/images/%E8%B7%AF%E9%81%A5java/image-20220614151739487.png" alt="image-20220614151739487"></p><p><img src="/images/%E8%B7%AF%E9%81%A5java/image-20220614152254186.png" alt="image-20220614152254186"></p><h2 id="42-7创建maven项目"><a href="#42-7创建maven项目" class="headerlink" title="42.7创建maven项目"></a>42.7创建maven项目</h2><p><img src="/images/%E8%B7%AF%E9%81%A5java/image-20220614152701306.png" alt="image-20220614152701306"></p><p><img src="/images/%E8%B7%AF%E9%81%A5java/image-20220614160449045.png" alt="image-20220614160449045"></p><p><img src="/images/%E8%B7%AF%E9%81%A5java/image-20220614153238114.png" alt="image-20220614153238114"></p><pre class="line-numbers language-cmd" data-language="cmd"><code class="language-cmd">[INFO] Parameter: version, Value: 1.0-SNAPSHOT[INFO] Parameter: groupId, Value: com.bwf[INFO] Parameter: artifactId, Value: maven01[INFO] Project created from Archetype in dir: C:\Users\admin\AppData\Local\Temp\archetypetmp\maven01[INFO] ------------------------------------------------------------------------[INFO] BUILD SUCCESS[INFO] ------------------------------------------------------------------------[INFO] Total time:  41.711 s[INFO] Finished at: 2022-06-14T15:33:51+08:00[INFO] ------------------------------------------------------------------------Process finished with exit code 0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/images/%E8%B7%AF%E9%81%A5java/image-20220614155638024.png" alt="image-20220614155638024"></p><h2 id="42-8项目结构"><a href="#42-8项目结构" class="headerlink" title="42.8项目结构"></a>42.8项目结构</h2><p><img src="/images/%E8%B7%AF%E9%81%A5java/image-20220614163513772.png" alt="image-20220614163513772"></p><h2 id="42-9pom-xml"><a href="#42-9pom-xml" class="headerlink" title="42.9pom.xml"></a>42.9pom.xml</h2><p>project object model 项目对象模型</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!-- 组织ID --&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.bwf<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span><span class="token comment">&lt;!-- 项目名 --&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>maven01<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span><span class="token comment">&lt;!-- 版本 --&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>1.0-SNAPSHOT<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span><span class="token comment">&lt;!-- 项目类型 war jar(默认) pom --&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>packaging</span><span class="token punctuation">&gt;</span></span>war<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>packaging</span><span class="token punctuation">&gt;</span></span><span class="token comment">&lt;!-- 自定义属性 --&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>properties</span><span class="token punctuation">&gt;</span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>project.build.sourceEncoding</span><span class="token punctuation">&gt;</span></span>UTF-8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>project.build.sourceEncoding</span><span class="token punctuation">&gt;</span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>maven.compiler.source</span><span class="token punctuation">&gt;</span></span>1.7<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>maven.compiler.source</span><span class="token punctuation">&gt;</span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>maven.compiler.target</span><span class="token punctuation">&gt;</span></span>1.7<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>maven.compiler.target</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>properties</span><span class="token punctuation">&gt;</span></span><span class="token comment">&lt;!-- 依赖 --&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>junit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>junit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>4.11<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">&gt;</span></span>test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="42-10生命周期"><a href="#42-10生命周期" class="headerlink" title="42.10生命周期"></a>42.10生命周期</h2><p><img src="/C:/Users/%E5%B8%AD/Desktop/%E5%AD%A6%E4%B9%A0%E6%96%87%E6%A1%A3/img/1111.png" alt="1111"></p><ol><li>Clean Lifecycle       清理（clean）</li></ol><p><img src="/images/%E8%B7%AF%E9%81%A5java/image-20220615103042019.png" alt="image-20220615103042019"></p><ol start="2"><li><p>Default  Lifecycle   编译（compile），测试（test），打包（package），安装（install）</p></li><li><p>Site Lifecycle           生成项目报告，站点，发布站点</p></li></ol><h2 id="42-11依赖管理"><a href="#42-11依赖管理" class="headerlink" title="42.11依赖管理"></a>42.11依赖管理</h2><h3 id="42-11-1依赖范围"><a href="#42-11-1依赖范围" class="headerlink" title="42.11.1依赖范围"></a>42.11.1依赖范围</h3><p><img src="/images/%E8%B7%AF%E9%81%A5java/image-20220615144239223.png" alt="image-20220615144239223"></p><h3 id="42-11-2依赖传递"><a href="#42-11-2依赖传递" class="headerlink" title="42.11.2依赖传递"></a>42.11.2依赖传递</h3><p><img src="/images/%E8%B7%AF%E9%81%A5java/image-20220615135804425.png" alt="image-20220615135804425"></p><p><img src="/images/%E8%B7%AF%E9%81%A5java/image-20220615144703083.png" alt="image-20220615144703083"></p><ol><li>当依赖中出现相同资源时，层级越深，优先级越低，层级越浅，优先级越高</li><li>当同级配置了相同资源的不同版本，配置顺序靠后的覆盖配置顺序靠前的</li></ol><h3 id="42-11-3可选依赖"><a href="#42-11-3可选依赖" class="headerlink" title="42.11.3可选依赖"></a>42.11.3可选依赖</h3><p><img src="/images/%E8%B7%AF%E9%81%A5java/image-20220615164832846.png" alt="image-20220615164832846"></p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!-- 可选依赖：true隐藏 默认false可见 --&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>optional</span><span class="token punctuation">&gt;</span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>optional</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="42-11-4依赖排除"><a href="#42-11-4依赖排除" class="headerlink" title="42.11.4依赖排除"></a>42.11.4依赖排除</h3><p><img src="/images/%E8%B7%AF%E9%81%A5java/image-20220615165131650.png" alt="image-20220615165131650"></p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!-- 依赖排除 --&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.bwf<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>maven01<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>1.0-SNAPSHOT<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exclusions</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exclusion</span><span class="token punctuation">&gt;</span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.alibaba<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>fastjson<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exclusion</span><span class="token punctuation">&gt;</span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exclusions</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="42-12聚合"><a href="#42-12聚合" class="headerlink" title="42.12聚合"></a>42.12聚合</h2><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.bwf<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>shop<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>1.0-SNAPSHOT<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>packaging</span><span class="token punctuation">&gt;</span></span>pom<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>packaging</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>modules</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>module</span><span class="token punctuation">&gt;</span></span>../shop_service<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>module</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>module</span><span class="token punctuation">&gt;</span></span>../shop_web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>module</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>module</span><span class="token punctuation">&gt;</span></span>../shop_dao/shop_dao<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>module</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>modules</span><span class="token punctuation">&gt;</span></span>    <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="42-13继承"><a href="#42-13继承" class="headerlink" title="42.13继承"></a>42.13继承</h2><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>modelVersion</span><span class="token punctuation">&gt;</span></span>4.0.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>modelVersion</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>parent</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.bwf<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>shop<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>1.0-SNAPSHOT<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>parent</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>shop_web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>packaging</span><span class="token punctuation">&gt;</span></span>war<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>packaging</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="43-Druid"><a href="#43-Druid" class="headerlink" title="43.Druid"></a>43.Druid</h1><p><a href="https://github.com/alibaba/druid/wiki/%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98">https://github.com/alibaba/druid/wiki/%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98</a></p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>主题测试</title>
      <link href="/2023/01/29/zhu-ti-ce-shi/"/>
      <url>/2023/01/29/zhu-ti-ce-shi/</url>
      
        <content type="html"><![CDATA[<p>​矮行星它们的特点是外幔和表面由冰冻的水和气体元素组成的一些低熔点的化合物组成，有的其中混杂着的一些由重元素化合物组成的岩石质的矿物质，厚度占星体半径的比例相对较大，但所占星体相对质量却不大，内部可能有一个岩石质占主要物质组成部分的核心，占星体质量的绝大部分，星体体积和总质量不大，平均密度较小，一些大行星的卫星也具有这种类似冰矮星的结构，像木卫二、三、四，土卫一、六等。对于行星级的冰矮星来讲，最大的是冥王星，直径2370±20公里，最小的卡戎，直径约800公里左右。像谷神星这样的距太阳较近的行星，表面的冰物质主要是水，而冥王星和卡戎的表面冰物质主要是水和熔点更低的甲烷、氮、一氧化碳等物质。过去曾将这些矮行星算作小行星中的一类，直到2006年才将它们从一般小行星中分离出来，划作单独的一类，称为矮行星，并把冥王星和冥卫一归入其中。<br>​矮行星的这种星体结构和它产生的地处太阳系外围的低温环境和自身的质量有关，一方面，太阳的温度不足以将它们的由气体元素组成的低熔点物质驱散，另一方面，它们自身原始质量较小，星体本身不能将氢氦等较轻的轻元素气体束缚住。<br>​但星体收缩产生的热量也不能将较重一些的气体元素组成的化合物如水和碳氢化合物等完全驱散，而会保留下一部分，同时它的足够的引力又使它足可以形成分层的物质结构，使较轻的物质浮于较重的由重元素组成的岩石质物质的表面，并随着星体以后的冷却，在表面上凝固下来，因此，会形成具有这种物质结构的星体。</p>]]></content>
      
      
      <categories>
          
          <category> 测试文档 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 测试 </tag>
            
            <tag> 随笔 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
