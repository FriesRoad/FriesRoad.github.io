<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>微信测试账号配置</title>
      <link href="/2023/04/07/wei-xin-ce-shi-zhang-hao-pei-zhi/"/>
      <url>/2023/04/07/wei-xin-ce-shi-zhang-hao-pei-zhi/</url>
      
        <content type="html"><![CDATA[<h4 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h4><p>微信渠道测试，需要用到微信公众号账号，可以向微信公众号平台申请公众平台测试账号。</p><h4 id="步骤如下"><a href="#步骤如下" class="headerlink" title="步骤如下"></a>步骤如下</h4><ol><li><p>进入微信公众号平台：<a href="https://mp.weixin.qq.com/">微信公众平台</a></p></li><li><p>进入 开发者工具——公众平台测试账号</p></li></ol><p><img src="/../images/%E5%BE%AE%E4%BF%A1%E6%B5%8B%E8%AF%95%E8%B4%A6%E5%8F%B7%E9%85%8D%E7%BD%AE/image-20230407100218831.png"></p><ol start="3"><li>查看测试账号的appID、appsecret等信息</li></ol><p><img src="/../images/%E5%BE%AE%E4%BF%A1%E6%B5%8B%E8%AF%95%E8%B4%A6%E5%8F%B7%E9%85%8D%E7%BD%AE/image-20230407100344692.png"></p><ol start="4"><li>进入海云系统，渠道管理下的微信渠道，绑定新账号，填入测试账号的appID、appsecret等信息即可。</li></ol><p><img src="/../images/%E5%BE%AE%E4%BF%A1%E6%B5%8B%E8%AF%95%E8%B4%A6%E5%8F%B7%E9%85%8D%E7%BD%AE/hy.png" alt="hy"></p><ol start="5"><li>记得配置白名单</li></ol><p><img src="/../images/%E5%BE%AE%E4%BF%A1%E6%B5%8B%E8%AF%95%E8%B4%A6%E5%8F%B7%E9%85%8D%E7%BD%AE/image-20230407100618662.png"></p><p><img src="/../images/%E5%BE%AE%E4%BF%A1%E6%B5%8B%E8%AF%95%E8%B4%A6%E5%8F%B7%E9%85%8D%E7%BD%AE/image-20230407100819679.png"></p>]]></content>
      
      
      <categories>
          
          <category> 难点问题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 微信 </tag>
            
            <tag> 海云 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>国产化中间件东方通和金蝶的使用</title>
      <link href="/2023/03/31/guo-chan-hua-zhong-jian-jian-dong-fang-tong-he-jin-die-de-shi-yong/"/>
      <url>/2023/03/31/guo-chan-hua-zhong-jian-jian-dong-fang-tong-he-jin-die-de-shi-yong/</url>
      
        <content type="html"><![CDATA[<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>将安装包放进linux目录下解压即可。</p><h2 id="东方通TongWeb"><a href="#东方通TongWeb" class="headerlink" title="东方通TongWeb"></a>东方通TongWeb</h2><h3 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h3><p>安装完tongweb后，在安装目录下找到bin目录，bin目录下就是一些启动停止东方通的命令：<br><img src="/../images/%E5%9B%BD%E4%BA%A7%E5%8C%96%E4%B8%AD%E9%97%B4%E4%BB%B6%E4%B8%9C%E6%96%B9%E9%80%9A%E5%92%8C%E9%87%91%E8%9D%B6%E7%9A%84%E4%BD%BF%E7%94%A8/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NoYW9famlfY2Fp,size_16,color_FFFFFF,t_70.png" alt="在这里插入图片描述"><br>启动命令：（<strong>推荐使用后台启动</strong>）</p><ul><li>前台启动：<code>sh startserver.sh</code><br>//会直接打出启动日志，但是按ctrl+C退出时东方通也会停止</li><li>后台启动：<code>nohup sh startserver.sh &amp;</code><br>//不会打日志，想看日志需要ctrl+c后再输入<code>tail -f nohup.out</code>（输入ctrl+c不影响东方通）<br>//如果最后不加“&amp;”，退出当前服务器连接的话，东方通也会停止</li></ul><h3 id="部署项目"><a href="#部署项目" class="headerlink" title="部署项目"></a>部署项目</h3><p>启动完之后，去浏览器输入<a href="http://ip:9060/console">http://ip:9060/console</a> （默认的是9060端口，新建域后就不是了）<br>默认用户名密码是thanos和thanos123.com</p><p><strong>进入控制台之后，需要对默认配置进行一些优化：</strong></p><ul><li>【Web 容器配置】-【访问日志】：取消扩展日志格式</li><li>【Web 容器配置】-【虚拟主机管理】：关闭访问日志</li><li>【Web 容器配置】-【Https 通道管理】：点开tong-http-listener，更新URL编码格式为UTF-8，parse-body-methods勾选全部类型</li><li>【服务】：关闭自动部署和热部署</li><li>【监视】-【监视配置】：取消监视功能开关</li><li>【启动参数配置】-【其他jvm参数】：-XX:MaxMetaspaceSize改成512m</li></ul><h4 id="包外配置文件"><a href="#包外配置文件" class="headerlink" title="包外配置文件"></a>包外配置文件</h4><p>如果项目使用的是包外配置文件，可以在【启动参数配置】-【其他jvm参数】下添加配置，指定配置文件存放路径：<br>例如 -Dapplication.path=${TongWeb_Base}/config<br>config要放在和bin同级的目录下，配置完保存，重启东方通才会生效<br><img src="/../images/%E5%9B%BD%E4%BA%A7%E5%8C%96%E4%B8%AD%E9%97%B4%E4%BB%B6%E4%B8%9C%E6%96%B9%E9%80%9A%E5%92%8C%E9%87%91%E8%9D%B6%E7%9A%84%E4%BD%BF%E7%94%A8/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NoYW9famlfY2Fp,size_16,color_FFFFFF,t_70-16808338918741.png" alt="在这里插入图片描述"><br>注：外部配置文件不是写在这个启动参数里就能立刻生效的，项目代码里也需要一些操作，以java为例，需要的朋友可以参考下<a href="https://blog.csdn.net/chao_ji_cai/article/details/119150315">web 项目读取外部配置文件</a></p><p>配置完之后，找到 【应用管理】：点击“部署应用”，选择文件（已经打好的war包）,其他选项可以默认，开始部署。<br>如果部署失败，去服务器看下nohup.out日志，定位解决问题；<br>如果部署成功，在【应用管理】页面点击 http访问 ，即可看到我们的系统！</p><p><em>注：东方通指定了系统访问的端口号，端口号是东方通控制台的【WEB容器配置】-【Https 通道管理】-【tong-http-listener】的监听端口</em><br><img src="/../images/%E5%9B%BD%E4%BA%A7%E5%8C%96%E4%B8%AD%E9%97%B4%E4%BB%B6%E4%B8%9C%E6%96%B9%E9%80%9A%E5%92%8C%E9%87%91%E8%9D%B6%E7%9A%84%E4%BD%BF%E7%94%A8/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NoYW9famlfY2Fp,size_16,color_FFFFFF,t_70-16808338918742.png" alt="在这里插入图片描述"></p><h3 id="域"><a href="#域" class="headerlink" title="域"></a>域</h3><p>安装了一个东方通后，如果想部署多个应用该怎么办呢？<br>正常人都会想在上一步中所说的【应用管理】里再部署一个应用，但我尝试的时候，无法启动成功。<br>最后还是新建一个域，在这个域中再部署新应用（部署步骤同上）</p><ul><li>创建域<br>创建时会自动分配一个端口（默认的是9060，新建的第一个域端口加1，即9061）</li></ul><pre class="line-numbers language-none"><code class="language-none">#相对域，会在安装目录下的domains目录下建立同域名的目录sh domain.sh create TESTDOMAIN#绝对域，需要制定绝对路径——不建议，域统一建在domains目录下比较好sh domain.sh create /opt/TESTDOMAIN<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li>删除域<br>删除后，对应的端口会被收回，下次再创建新域端口会使用收回的端口</li></ul><pre class="line-numbers language-none"><code class="language-none">#相对域sh domain.sh delete TESTDOMAIN#绝对域sh domain.sh delete /opt/TESTDOMAIN<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li>启动域</li></ul><pre class="line-numbers language-none"><code class="language-none">#在安装目录bin目录下#相对域sh startdomain.sh ZHBA#绝对域sh startdomain.sh /opt/ZHBA#在域目录bin目录下sh startservernohup.shsh startserver.sh              #记得使用后台启动方式（startservernohup也行）<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>停止域</li></ul><pre class="line-numbers language-none"><code class="language-none">#在安装目录bin目录下#相对域sh stopdomain.sh ZHBA#绝对域sh stopdomain.sh /opt/ZHBA#在域目录bin目录下sh stopserver.sh<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>新建的域的控制台端口在域目录下的conf目录下的tongweb.xml文件中找：<br><img src="/../images/%E5%9B%BD%E4%BA%A7%E5%8C%96%E4%B8%AD%E9%97%B4%E4%BB%B6%E4%B8%9C%E6%96%B9%E9%80%9A%E5%92%8C%E9%87%91%E8%9D%B6%E7%9A%84%E4%BD%BF%E7%94%A8/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NoYW9famlfY2Fp,size_16,color_FFFFFF,t_70-16808338918743.png" alt="在这里插入图片描述"><br><img src="/../images/%E5%9B%BD%E4%BA%A7%E5%8C%96%E4%B8%AD%E9%97%B4%E4%BB%B6%E4%B8%9C%E6%96%B9%E9%80%9A%E5%92%8C%E9%87%91%E8%9D%B6%E7%9A%84%E4%BD%BF%E7%94%A8/42b80c846ae04fc4a5e4d9239ed4352a.png" alt="在这里插入图片描述"></p><h2 id="金蝶"><a href="#金蝶" class="headerlink" title="金蝶"></a>金蝶</h2><h3 id="新建域"><a href="#新建域" class="headerlink" title="新建域"></a>新建域</h3><p><img src="/../images/%E5%9B%BD%E4%BA%A7%E5%8C%96%E4%B8%AD%E9%97%B4%E4%BB%B6%E4%B8%9C%E6%96%B9%E9%80%9A%E5%92%8C%E9%87%91%E8%9D%B6%E7%9A%84%E4%BD%BF%E7%94%A8/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NoYW9famlfY2Fp,size_16,color_FFFFFF,t_70-16808338918754.png" alt="在这里插入图片描述"><br>按提示一步步执行，比较长我就不细说了。</p><h3 id="启动域"><a href="#启动域" class="headerlink" title="启动域"></a>启动域</h3><p>新建完域之后，进入这个域的bin目录，前台启动（第一次先前台启动，要输入管理员初始化密码）<br>前台启动命令：</p><pre class="line-numbers language-none"><code class="language-none">./startapusic首次启动，请输入管理员初始化密码: XXXXXXX请再次输入管理员初始化密码:XXXXXXX<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>后台启动命令：</p><pre class="line-numbers language-none"><code class="language-none">nohup ./startapusic &amp;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="部署项目-1"><a href="#部署项目-1" class="headerlink" title="部署项目"></a>部署项目</h3><p>启动完之后去浏览器打开控制台<a href="http://ip:6888/admin%EF%BC%88%E7%AB%AF%E5%8F%A3%E5%8F%B7%E9%BB%98%E8%AE%A46888%EF%BC%8C%E7%9C%8B%E8%87%AA%E5%B7%B1%E6%96%B0%E5%BB%BA%E5%9F%9F%E6%97%B6%E5%AE%9A%E4%B9%89%E7%9A%84%E6%98%AF%E5%A4%9A%E5%B0%91%EF%BC%89">http://ip:6888/admin（端口号默认6888，看自己新建域时定义的是多少）</a><br>默认用户名密码应该是admin/admin<br><img src="/../images/%E5%9B%BD%E4%BA%A7%E5%8C%96%E4%B8%AD%E9%97%B4%E4%BB%B6%E4%B8%9C%E6%96%B9%E9%80%9A%E5%92%8C%E9%87%91%E8%9D%B6%E7%9A%84%E4%BD%BF%E7%94%A8/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NoYW9famlfY2Fp,size_16,color_FFFFFF,t_70-16808338918755.png" alt="在这里插入图片描述"><br>找到【应用管理】，部署应用<br><img src="/../images/%E5%9B%BD%E4%BA%A7%E5%8C%96%E4%B8%AD%E9%97%B4%E4%BB%B6%E4%B8%9C%E6%96%B9%E9%80%9A%E5%92%8C%E9%87%91%E8%9D%B6%E7%9A%84%E4%BD%BF%E7%94%A8/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NoYW9famlfY2Fp,size_16,color_FFFFFF,t_70-16808338918756.png" alt="在这里插入图片描述"></p><p><img src="/../images/%E5%9B%BD%E4%BA%A7%E5%8C%96%E4%B8%AD%E9%97%B4%E4%BB%B6%E4%B8%9C%E6%96%B9%E9%80%9A%E5%92%8C%E9%87%91%E8%9D%B6%E7%9A%84%E4%BD%BF%E7%94%A8/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NoYW9famlfY2Fp,size_16,color_FFFFFF,t_70-16808338918757.png" alt="在这里插入图片描述"></p><p>更换war包时需要先停止应用，再卸载，然后重新部署应用<br>金蝶控制台按钮点击交互体验不太好，部署完成后和启动应用时都要等待一会，启动应用时可以去【日志监控】模块查看实时日志。</p>]]></content>
      
      
      <categories>
          
          <category> 默认分类 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 测试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于端口占用问题的解决</title>
      <link href="/2023/03/28/guan-yu-duan-kou-zhan-yong-wen-ti-de-jie-jue/"/>
      <url>/2023/03/28/guan-yu-duan-kou-zhan-yong-wen-ti-de-jie-jue/</url>
      
        <content type="html"><![CDATA[<h3 id="一、问题描述"><a href="#一、问题描述" class="headerlink" title="一、问题描述"></a>一、问题描述</h3><p>启动WCM服务报错如下：</p><p><img src="/../images/%E5%85%B3%E4%BA%8E%E7%AB%AF%E5%8F%A3%E5%8D%A0%E7%94%A8%E9%97%AE%E9%A2%98%E7%9A%84%E8%A7%A3%E5%86%B3/image-20230328170610751.png" alt="报错内容"></p><p>但是查询端口占用情况之后发现是java.exe占用8080端口，然而，本次开机并没有启动有关java依赖的进程。</p><h3 id="二、解决思路"><a href="#二、解决思路" class="headerlink" title="二、解决思路"></a>二、解决思路</h3><p>这个错误是表示Tomcat无法绑定8080端口，可能是该端口被其他进程占用了，也有可能是权限不足。可以尝试修改Tomcat使用的端口号，或者检查是否有其他进程占用了该端口。另外，也可以使用管理员权限启动Tomcat。</p><h3 id="三、查看占用指定端口的应用"><a href="#三、查看占用指定端口的应用" class="headerlink" title="三、查看占用指定端口的应用"></a>三、查看占用指定端口的应用</h3><p>可以在命令行窗口中输入以下命令来查看端口号8080被哪个应用程序占用：</p><h4 id="Windows系统："><a href="#Windows系统：" class="headerlink" title="Windows系统："></a>Windows系统：</h4><ol><li><p>打开命令行窗口（Win+R，输入cmd，回车）。</p></li><li><p>输入命令：netstat -ano | findstr :8080</p><p><strong>注意：在:8080之前也有一个空格！</strong></p></li><li><p>系统会返回所有占用端口号8080的应用程序的PID，例如：</p></li></ol><p>​TCP 192.168.1.1:8080 0.0.0.0:0 LISTENING <strong>1234</strong></p><p>在最后一个数字1234就是占用8080端口的应用程序的PID。</p><ol start="4"><li>打开任务管理器（<strong>Ctrl+Shift+Esc</strong>），在<strong>详细信息</strong>选项卡中找到该PID对应的进程，就可以定位到占用8080端口的应用程序了。</li><li>右键占用程序，就可以找到该程序的路径。</li></ol><h4 id="Linux-x2F-Mac系统："><a href="#Linux-x2F-Mac系统：" class="headerlink" title="Linux/Mac系统："></a>Linux/Mac系统：</h4><ol><li><p>打开终端（Terminal）窗口。</p></li><li><p>输入命令：sudo lsof -i :8080</p></li><li><p>系统会返回所有占用端口号8080的应用程序的PID和进程名，例如：</p></li></ol><p>​COMMAND PID USER FD TYPE DEVICE SIZE/OFF NODE NAME</p><p>​java <strong>1234</strong> user 0u IPv6 12345678 0t0 TCP *:8080 (LISTEN)</p><p>在第二列数字1234就是占用8080端口的应用程序的PID。</p><ol start="4"><li>输入命令：ps -ef | grep 1234</li></ol><p>在输出中找到对应的进程名即可确定占用8080端口的应用程序。</p><h3 id="四、问题解决"><a href="#四、问题解决" class="headerlink" title="四、问题解决"></a>四、问题解决</h3><p>最终确认了该应用程序是其他应用程序TRSWAS所自带的jdk依赖，可以尝试关闭该依赖程序，或者将其修改为使用其他空闲的端口。</p>]]></content>
      
      
      <categories>
          
          <category> 难点问题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 端口占用 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>linux下后服务启动命令总结</title>
      <link href="/2023/03/28/linux-xia-fu-wu-qi-dong-xiang-guan-wen-ti/"/>
      <url>/2023/03/28/linux-xia-fu-wu-qi-dong-xiang-guan-wen-ti/</url>
      
        <content type="html"><![CDATA[<h4 id="一、查看当前服务"><a href="#一、查看当前服务" class="headerlink" title="一、查看当前服务"></a>一、查看当前服务</h4><ol><li><p>systemctl list-units –type=service</p><p>列出所有已启动的服务及其状态；</p></li><li><p>systemctl status [service]</p><p>查看指定服务的状态信息</p></li><li><p>service –status-all</p><p>列出系统中所有的服务及其状态</p></li><li><p>ps -ef|grep service</p><p>查看系统中所有正在运行的进程，并筛选出包含<code>service</code>关键字的进程</p></li></ol><h4 id="二、使用ps命令列出进程列表，其中属性意义如下"><a href="#二、使用ps命令列出进程列表，其中属性意义如下" class="headerlink" title="二、使用ps命令列出进程列表，其中属性意义如下"></a>二、使用ps命令列出进程列表，其中属性意义如下</h4><ul><li>UID：用户ID，表示该进程有哪个用户所创建的；</li><li>PID：进程ID，表示该进程的唯一标识；</li><li>PPID：父进程ID，表示该进程的父进程ID；</li><li>C：CPU占用率；</li><li>STIME：启动时间；</li><li>TTY：控制台类型，表示该进程所绑定的控制台类型；</li><li>TIME：CPU时间，你表示该进程已经使用的CPU时间；</li><li>CMD：命令，表示该进程所执行的命令。</li></ul><h4 id="三、后台启动服务的两种方式"><a href="#三、后台启动服务的两种方式" class="headerlink" title="三、后台启动服务的两种方式"></a>三、后台启动服务的两种方式</h4><ol><li><p>使用nohup可以在后台运行进程或命令，并不是终端退出的影响</p><p>例如：<code>nohup ./server.sh &amp;</code>，这会在后台运行一个名为server.sh的脚本，并将输出保存到一个名为”nohub.out“的文件中，&amp;符号表示让命令在后台运行。之后可以用<code>ps -ef|grep server.sh</code>查看该进程的PID，用<code>kill [PID]</code>命令杀死该进程。</p><p>如果提示：nohup：忽略输入并把输出追加到“nohup.out”则表示后台启动成功，意味着nohup命令成功将输出重定向到名为nohup.out的文件中，并不会被终端退出所影响，如需检查，可查看nohup.out文件，确认输出是否正确保存，命令为<code>cat nohup.out</code>。</p></li><li><p>另一种启动方式为，正常启动server.sh文件，运行后按Ctrl + Z暂停，再使用<code>bg</code>命令将其移到后台运行。</p></li></ol><h4 id="四、其他相关命令"><a href="#四、其他相关命令" class="headerlink" title="四、其他相关命令"></a>四、其他相关命令</h4><ul><li>查看日志文件名命令为<code>cat [文件名]</code>，要查看日志文件1.log的最后五百行，可以使用以下命令：<code>tail -n 500 1.log</code>。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 难点问题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> 服务启动 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java线程的生命周期</title>
      <link href="/2023/03/23/java-xian-cheng-de-sheng-ming-zhou-qi/"/>
      <url>/2023/03/23/java-xian-cheng-de-sheng-ming-zhou-qi/</url>
      
        <content type="html"><![CDATA[<h4 id="一、线程的生命周期是指线程从创建到结束的整个过程，它也被称为线程状态模型。"><a href="#一、线程的生命周期是指线程从创建到结束的整个过程，它也被称为线程状态模型。" class="headerlink" title="一、线程的生命周期是指线程从创建到结束的整个过程，它也被称为线程状态模型。"></a>一、线程的生命周期是指线程从创建到结束的整个过程，它也被称为线程状态模型。</h4><p>Java中的线程生命周期可以划分为如下5个状态：</p><ol><li><p>新建状态（New）：当创建一个新的Thread对象时，该线程就进入新建状态。此时，线程尚未启动，还没有分配到系统资源。</p></li><li><p>就绪状态（Runnable）：一旦线程被start()方法启动，线程进入就绪状态。此时，线程已经被分配到系统资源，可以随时执行，但还没有被调度器选中运行。</p></li><li><p>运行状态（Running）：当线程被调度器选中运行时，线程进入运行状态。此时，线程开始执行run()方法中的相关代码。</p></li><li><p>阻塞状态（Blocked）：当线程因为一些原因无法继续执行时，例如等待输入、等待同步锁等情况，线程就会进入阻塞状态。在这个状态下，线程不会占用CPU的时间，也不会进入就绪状态，直到被唤醒。</p></li><li><p>终止状态（Terminated）：线程在run()方法结束后，进入终止状态。该线程不再占用系统资源，但线程对象仍然存在，可以查询线程的状态和执行结果。</p></li></ol><h4 id="二、下面是线程状态与转换示意图："><a href="#二、下面是线程状态与转换示意图：" class="headerlink" title="二、下面是线程状态与转换示意图："></a>二、下面是线程状态与转换示意图：</h4><p><img src="/../images/java%E7%BA%BF%E7%A8%8B%E7%9A%84%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/1.png" alt="简单的线程状态图"></p><p><img src="/../images/java%E7%BA%BF%E7%A8%8B%E7%9A%84%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/2.png" alt="线程状态图"></p><h4 id="三、线程状态的转换如下："><a href="#三、线程状态的转换如下：" class="headerlink" title="三、线程状态的转换如下："></a>三、线程状态的转换如下：</h4><ol><li><p>新建状态 ———&gt; 就绪状态：当线程对象被创建后，start()方法被调用，线程就会进入就绪状态。</p></li><li><p>就绪状态 ———&gt; 运行状态：当调度器调度该线程时，线程就会从就绪状态进入运行状态。</p></li><li><p>运行状态 ———&gt; 阻塞状态：当线程等待输入、等待同步锁、等待网络数据等情况时，线程进入阻塞状态。</p></li><li><p>阻塞状态 ———&gt; 就绪状态：当等待的条件满足时，线程进入就绪状态，等待调度器再次调度。</p></li><li><p>运行状态 ———&gt; 终止状态：当run()方法执行完毕或者线程发生异常时，线程会进入终止状态。</p></li></ol><p>线程状态的转换是由Java虚拟机的线程调度器控制的，它会根据线程优先级和调度算法来决定哪个线程可以进入运行状态。了解线程的生命周期对于优化程序性能和避免多线程竞争的问题非常重要。</p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 线程 </tag>
            
            <tag> 生命周期 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>linux中cp -rf命令复制不覆盖文件问题</title>
      <link href="/2023/03/21/linux-qiang-zhi-fu-gai-wen-jian-jia-shi-xiao/"/>
      <url>/2023/03/21/linux-qiang-zhi-fu-gai-wen-jian-jia-shi-xiao/</url>
      
        <content type="html"><![CDATA[<h3 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h3><p>在linux中，当覆盖更新某文件夹中文件时，cp -rf 出现复制不覆盖文件问题，即覆盖失败。</p><h3 id="解决思路"><a href="#解决思路" class="headerlink" title="解决思路"></a>解决思路</h3><p>一般我们在linux系统使用命令cp -rf 复制并覆盖文件，会提示文件覆盖确认操作。覆盖失效时，可以输入输入<code>alias</code>命令，显示 cp=‘cp -i’， cp 命令被系统设置了别名，-i 参数是文件覆盖提示确认操作，可以看到别名 ，也就是当执行cp的时候，其实执行的是cp -i参数。</p><p><img src="/../images/linux%E5%BC%BA%E5%88%B6%E8%A6%86%E7%9B%96%E6%96%87%E4%BB%B6%E5%A4%B9%E5%A4%B1%E6%95%88/image-20230321172554452.png"></p><h3 id="问题解决"><a href="#问题解决" class="headerlink" title="问题解决"></a>问题解决</h3><p>解决文件复制覆盖提示操作问题，以下四种方式：</p><h4 id="方法1：编写带cp的路径复制覆盖文件"><a href="#方法1：编写带cp的路径复制覆盖文件" class="headerlink" title="方法1：编写带cp的路径复制覆盖文件"></a>方法1：编写带cp的路径复制覆盖文件</h4><pre class="line-numbers language-linux" data-language="linux"><code class="language-linux">[root@localhost ~]# /bin/cp -rf 源码文件 目标文件<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="方法2：在CP命令前面加一个斜杠-，实现强制覆盖文件"><a href="#方法2：在CP命令前面加一个斜杠-，实现强制覆盖文件" class="headerlink" title="方法2：在CP命令前面加一个斜杠\，实现强制覆盖文件"></a>方法2：在CP命令前面加一个斜杠\，实现强制覆盖文件</h4><pre class="line-numbers language-linux" data-language="linux"><code class="language-linux">[root@localhost ~]# \cp -rf 源码文件 目标文件<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="方法3：取消cp命令别名，去掉-cp-命令的别名-这时你再用-cp-rf-复制文件时-就不会提示确认"><a href="#方法3：取消cp命令别名，去掉-cp-命令的别名-这时你再用-cp-rf-复制文件时-就不会提示确认" class="headerlink" title="方法3：取消cp命令别名，去掉 cp 命令的别名,这时你再用 cp -rf 复制文件时,就不会提示确认."></a>方法3：取消cp命令别名，去掉 cp 命令的别名,这时你再用 cp -rf 复制文件时,就不会提示确认.</h4><pre class="line-numbers language-linux" data-language="linux"><code class="language-linux">#取消cp命令别名[root@localhost ~]# unalias cp[root@localhost ~]# cp -rf 源码文件 目标文件#复制完成后恢复别名[root@localhost ~]# alias cp='cp -i'<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="方法4：编辑-x2F-bashrc文件注释掉cp的alias，在alias-cp-x3D-’cp-i’前加上”-”注释，修改后，重新登录即可实现复制不提示。一定要重新登录系统，不然不生效；"><a href="#方法4：编辑-x2F-bashrc文件注释掉cp的alias，在alias-cp-x3D-’cp-i’前加上”-”注释，修改后，重新登录即可实现复制不提示。一定要重新登录系统，不然不生效；" class="headerlink" title="方法4：编辑~/.bashrc文件注释掉cp的alias，在alias cp=’cp -i’前加上”#”注释，修改后，重新登录即可实现复制不提示。一定要重新登录系统，不然不生效；"></a>方法4：编辑~/.bashrc文件注释掉cp的alias，在alias cp=’cp -i’前加上”#”注释，修改后，重新登录即可实现复制不提示。一定要重新登录系统，不然不生效；</h4><pre class="line-numbers language-linux" data-language="linux"><code class="language-linux">[root@localhost ~]# vi ~/.bashrc[root@localhost ~]# cp -rf 源码文件 目标文件<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 难点问题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> 复制覆盖 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>trs培训随笔</title>
      <link href="/2023/03/17/trs-pei-xun-sui-bi/"/>
      <url>/2023/03/17/trs-pei-xun-sui-bi/</url>
      
        <content type="html"><![CDATA[<h3 id="一、DL-CKM自然语言处理引擎"><a href="#一、DL-CKM自然语言处理引擎" class="headerlink" title="一、DL-CKM自然语言处理引擎"></a>一、DL-CKM自然语言处理引擎</h3><h4 id="全栈AI能力"><a href="#全栈AI能力" class="headerlink" title="全栈AI能力"></a>全栈AI能力</h4><p>智拓（AI开发平台）；</p><p>智语（AI基础能力，自然语言处理，HTTP接口服务）；</p><p>智眼（视频图片处理，HTTP接口服务）</p><p>功能完备；跨媒体多模态AI能力；场景落地；可私有化可定制化；国产化定制融合</p><h4 id="开发流程"><a href="#开发流程" class="headerlink" title="开发流程"></a>开发流程</h4><p>数据集-数据处理-模型训练-模型评估——&gt;智语智眼应用</p><h5 id="数据标注："><a href="#数据标注：" class="headerlink" title="数据标注："></a>数据标注：</h5><p>定义标注标签——机器/人工标注——质量评估——&gt;形成有效数据集（文本，图像标注）</p><h5 id="算法设计管理："><a href="#算法设计管理：" class="headerlink" title="算法设计管理："></a>算法设计管理：</h5><p>提供算法设计管理功能；</p><p>支持深度算法和传统算法的管理；</p><p>支持可视化，支持输入输出标准化规范，支持参数自由配置</p><h5 id="模型开发流程："><a href="#模型开发流程：" class="headerlink" title="模型开发流程："></a>模型开发流程：</h5><p>建模——上传算法——环境配置——打包镜像</p><h4 id="AI技术服务能力（在线提供接口能力）"><a href="#AI技术服务能力（在线提供接口能力）" class="headerlink" title="AI技术服务能力（在线提供接口能力）"></a>AI技术服务能力（在线提供接口能力）</h4><h5 id="知识加工"><a href="#知识加工" class="headerlink" title="知识加工"></a>知识加工</h5><p>基础文本挖掘能力</p><h5 id="知识发现"><a href="#知识发现" class="headerlink" title="知识发现"></a>知识发现</h5><p>从文本种发现隐含价值的能力，各类模型支持根据行业特性进行定制。支持分类聚类等等</p><p>应用：新闻自动分类，舆情事件分析</p><h5 id="语言生成"><a href="#语言生成" class="headerlink" title="语言生成"></a>语言生成</h5><p>基于深度学习和知识图谱技术，利用预设算法模型实现文本自动生成</p><p>应用：问答机器人，新闻自动写作，新闻短标题形成，数据解读</p><h5 id="文字识别"><a href="#文字识别" class="headerlink" title="文字识别"></a>文字识别</h5><p>基于多种算法对不同场景内文字进行检测识别</p><p>应用：PPT文字识别，变形文字识别（手写体等）</p><h5 id="内容鉴别"><a href="#内容鉴别" class="headerlink" title="内容鉴别"></a>内容鉴别</h5><p>基于文本图像视频，对敏感信息内容自动设别</p><p>应用：文本检测，图片视频内容鉴别</p><h5 id="图像识别"><a href="#图像识别" class="headerlink" title="图像识别"></a>图像识别</h5><p>基于深度算法，准确识别图像中包含的重要信息</p><p>应用：图像视频自动标签</p><h5 id="图像搜索"><a href="#图像搜索" class="headerlink" title="图像搜索"></a>图像搜索</h5><p>以文搜图，以图找图，以图搜视频</p><p>应用：产品外观比对，新闻图片人物搜索</p><h5 id="视频分析"><a href="#视频分析" class="headerlink" title="视频分析"></a>视频分析</h5><p>从视频种提取关键帧，实现视频搜索，内容分析等待</p><p>应用：视频分析搜索，智能拆条，视频转引追踪（检测转载情况）</p><h5 id="机器翻译"><a href="#机器翻译" class="headerlink" title="机器翻译"></a>机器翻译</h5><p>基于编码器和编码器架构的深度网络翻译模型，提供信雅达翻译</p><h5 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h5><p>中国邮政储蓄银行机器学习平台</p><p>南方电网人工智能平台项目</p><h3 id="二、TRS统一政务信息资源库平台"><a href="#二、TRS统一政务信息资源库平台" class="headerlink" title="二、TRS统一政务信息资源库平台"></a>二、TRS统一政务信息资源库平台</h3><p>18家省级政府网站集约化项目覆盖</p><h3 id="三、ETL海聚数据融合系统"><a href="#三、ETL海聚数据融合系统" class="headerlink" title="三、ETL海聚数据融合系统"></a>三、ETL海聚数据融合系统</h3><h4 id="ETL（extract、transfiorm、load）"><a href="#ETL（extract、transfiorm、load）" class="headerlink" title="ETL（extract、transfiorm、load）"></a>ETL（extract、transfiorm、load）</h4><p>流批一体的数据融合平台</p><p>apache flink内核的分布式数据融合平台</p><p>流数据、批数据</p><p>产品特色</p><h3 id="四、拓尔思产品体系与业务总体介绍"><a href="#四、拓尔思产品体系与业务总体介绍" class="headerlink" title="四、拓尔思产品体系与业务总体介绍"></a>四、拓尔思产品体系与业务总体介绍</h3><p>大数据——智能语义（NPL自然语言处理）——数据安全</p><p>北京成功两个研发中心，北上成广四个区域中心，31个分公司</p><h4 id="产品服务"><a href="#产品服务" class="headerlink" title="产品服务"></a>产品服务</h4><h3 id="五、数星产业大脑赋能数字化变革"><a href="#五、数星产业大脑赋能数字化变革" class="headerlink" title="五、数星产业大脑赋能数字化变革"></a>五、数星产业大脑赋能数字化变革</h3><p>科技金融：以银行为中心，以政府打造的产业环境和政策体系为基础，加强机构合作，为科技企业的发展提供</p><h3 id="六、TRS网查大数据分析云服务平台"><a href="#六、TRS网查大数据分析云服务平台" class="headerlink" title="六、TRS网查大数据分析云服务平台"></a>六、TRS网查大数据分析云服务平台</h3><p>舆情分析检测SAAS服务平台</p><p>设计理念：智汇、智库、智策</p><p><strong>智汇</strong>——全面的数据采集</p><p><strong>智库</strong>——高效的数据采集与预处理</p><p>快速的采集暑校</p><p>丰富的采集功能</p><p>高效的采集架构</p><p>智能的数据处理</p><p>采集：海贝大数据管理系统（高效存储、快速检索、数据安全）</p><p>处理：DL-CKM</p><p><strong>智策</strong>——态势感知辅助决策</p><h5 id="技术架构"><a href="#技术架构" class="headerlink" title="技术架构"></a>技术架构</h5><h5 id="功能简介"><a href="#功能简介" class="headerlink" title="功能简介"></a>功能简介</h5><p>日常检测</p><p>事件分析</p><p>信息检索</p><p>预警中心</p><p>智能报告</p><h3 id="七、融媒体平台mas"><a href="#七、融媒体平台mas" class="headerlink" title="七、融媒体平台mas"></a>七、融媒体平台mas</h3><h3 id="八、数家咨询大数据平台"><a href="#八、数家咨询大数据平台" class="headerlink" title="八、数家咨询大数据平台"></a>八、数家咨询大数据平台</h3><p>数家：专注于内容资讯的数据专家</p><p>目的：帮助用户解决数据应用的痛点</p><p>采集全网+自由信息</p><p>微服务架构模式</p><p>公文数据：政府机构，法律法规数据</p><p>数据采集维度：内容数据维度（特色菜鸡），轨迹数据维度（定向周期采集）</p><p>数据可用性保障：采集梳理，数据数量质量的保证，数据时效（按需划分）</p><p>数据清洗，数据标引：人工+机器自动 标引结合</p><p>人工采集-采集点表音——采集清洗——自动打标——二次打标——数据服务</p><p><strong>数据标引维度</strong>：基础属性维度（只是维度，基础维度），加工分析维度（语义为度）</p><h5 id="SAAS平台："><a href="#SAAS平台：" class="headerlink" title="SAAS平台："></a>SAAS平台：</h5><p>数家云资讯：各渠道内容数据进行结构化分类整合；</p><p>资讯热点：对全国各个舆论场数据进行语义聚类和热度分析；</p><p>线索发现：实时发现互联网有价值的线索和内容创作素材；</p><p><strong>应用</strong>：用户价值：线索真实，完整，有可信度</p><p>传播分析：对原创稿件的全网传播效果进行持续性的实时分析；</p><p>榜单分析：</p><p>专题分析：支持用户自定义专题并提供分析</p><p>行业资讯：针对行业用户提供资讯内容的分析</p><p>政务服务：</p><p>openAI平台特点：高精准，高时效，场景化</p><h3 id="九、TRS网脉云服务平台"><a href="#九、TRS网脉云服务平台" class="headerlink" title="九、TRS网脉云服务平台"></a>九、TRS网脉云服务平台</h3><p>用户行为分析有什么用：</p><p>掌握产品的运行状态，优化产品结构和体验，提升产品的推广效果，提高运营成效；</p><h5 id="用户行为分析应用场景"><a href="#用户行为分析应用场景" class="headerlink" title="用户行为分析应用场景"></a>用户行为分析应用场景</h5><p>个性化推荐</p><p>业务考核</p><p>投放分析</p><p>广告位分析</p><p>专题监测</p><p>文章考核</p><p>嫌犯行为追踪</p><p>检索分析</p><h5 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h5><p>全面立体化感知用户来源、去向、行为、爱好</p><h5 id="功能："><a href="#功能：" class="headerlink" title="功能："></a>功能：</h5><p>多维度剖析</p><p>自定义报表</p><p>热图分析</p><p>实时分析</p><p>转化漏斗</p><p>全站路径</p><h5 id="特点："><a href="#特点：" class="headerlink" title="特点："></a>特点：</h5><p>全面的数据采集能力</p><p>强大的下钻剖析能力</p><p>全场景分析能力</p><p>细粒度的数据权限模型</p><h3 id="十、海贝大数据管理平台"><a href="#十、海贝大数据管理平台" class="headerlink" title="十、海贝大数据管理平台"></a>十、海贝大数据管理平台</h3><p>相关度排序：词频，文档频速，覆盖率</p>]]></content>
      
      
      <categories>
          
          <category> 文档资料 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 随笔 </tag>
            
            <tag> trs </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>本地navicat连接不上虚拟机MariaDB的问题与解决</title>
      <link href="/2023/03/10/ben-di-navcat-lian-jie-bu-shang-xu-ni-ji-mariadb-de-wen-ti-yu-jie-jue/"/>
      <url>/2023/03/10/ben-di-navcat-lian-jie-bu-shang-xu-ni-ji-mariadb-de-wen-ti-yu-jie-jue/</url>
      
        <content type="html"><![CDATA[<h3 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h3><p>虚拟机配置MariaDB成功后，本地机navicat无法连接到虚拟机内的数据库，报错为</p><p><img src="/../images/%E6%9C%AC%E5%9C%B0navcat%E8%BF%9E%E6%8E%A5%E4%B8%8D%E4%B8%8A%E8%99%9A%E6%8B%9F%E6%9C%BAMariaDB%E7%9A%84%E9%97%AE%E9%A2%98%E4%B8%8E%E8%A7%A3%E5%86%B3/image-20230310105841237.png" alt="错误提示"></p><h3 id="解决思路"><a href="#解决思路" class="headerlink" title="解决思路"></a>解决思路</h3><p>linux虚拟机里的MariaDB运行正常，但本地Navicat连接不上，可能是以下原因之一：</p><ol><li>网络连接问题：确保linux虚拟机和本地机器在同一网络下，并且可以相互通信。可以尝试通过ping测试连着见连接是否正常。如果连接不正常，检查网络设置和防火墙设置。</li><li>数据库配置问题：确保在navicat中输入正确的数据库连接信息。在linux虚拟机上运行的MariaDB可能需要特定的配置才能允许远程连接。可以查看MariaDB的配置文件（my.cnf）以确保已启用远程连接。</li><li>Navicat或MariaDB版本问题，如果其中一个版本过旧，可能不支持MariaDB的连接。</li></ol><p>总之，首先需要检查网络连接和数据库配置，如果这些都没问题，可以尝试升级navicat或mariaDB版本。</p><h3 id="网络问题的排查"><a href="#网络问题的排查" class="headerlink" title="网络问题的排查"></a>网络问题的排查</h3><ol><li>检查网络连接：首先，确保计算机已连接网络并可以访问目标数据库所在的服务器。可以尝试打开一个网站或ping数据库服务器来确认网络连接是否正常</li></ol><pre class="line-numbers language-linux" data-language="linux"><code class="language-linux">#本地查服务器网络ping &lt;服务器ip&gt;#服务器查本地网络 可直接ping网站ping www.baidu.com<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li>检查防火墙设置</li><li>检查数据库服务器配置：确定数据库服务器是否正确，比如数据库服务是否已经启动、数据库服务端口是否正确等等。</li><li>检查数据库用户权限：确认连接数据库用户是否拥有足够的权限，比如是否允许从远程主机连接。</li><li>检查连接字符串：确保连接字符串中制定了正确的数据库名称、用户名、密码、主机名或ip地址以及端口号等信息。</li><li>检查客户端驱动程序：如果使用了客户端驱动程序，可以尝试重新安装驱动程序或者更新驱动程序版本。</li><li>检查日志文件：查看数据库服务器日志文件，了解是否有连接失败的相关信息。</li></ol><h3 id="本地如何ping虚拟机网络"><a href="#本地如何ping虚拟机网络" class="headerlink" title="本地如何ping虚拟机网络"></a>本地如何ping虚拟机网络</h3><p>本地计算机ping虚拟机的网络，需要知道虚拟机所在的ip地址，之后可执行：</p><ol><li>打开命令cmd命令窗口</li><li>输入ping 接虚拟机ip地址，如：</li></ol><pre class="line-numbers language-linux" data-language="linux"><code class="language-linux">ping 192.168.0.1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="3"><li>按Enter，如果网络正常，可收到以下响应：</li></ol><p><img src="/../images/%E6%9C%AC%E5%9C%B0navcat%E8%BF%9E%E6%8E%A5%E4%B8%8D%E4%B8%8A%E8%99%9A%E6%8B%9F%E6%9C%BAMariaDB%E7%9A%84%E9%97%AE%E9%A2%98%E4%B8%8E%E8%A7%A3%E5%86%B3/image-20230310111353505.png" alt="网络正确返回内容"></p><ol start="4"><li>如看到“请求超时”或“目标主机不可达”的响应，那么就是网络问题</li></ol><h3 id="我的问题"><a href="#我的问题" class="headerlink" title="我的问题"></a>我的问题</h3><p>Navicat错误代码1045表示连接被拒绝，同场是由于登录凭据（账号密码）不正确或者没有足够权限，而我的网络正常且连接字符串正确，连接返回一个access denied的错误信息，指出用户’root’无法冲IP地址为’192.168.0.54’的主句进行连接。需检查数据库服务器的访问控制列表（ACL）。</p><p>我所使用的是mysql（MariaDB）数据库服务器，检查mysql服务器用户权限表（mysql.user表)以及连接到服务器的主机名列表（mysqk.host表）。确保连接到数据库服务器的主机名或IP地址被正确添加到ACL中，并且用户具有足够的权限来连接到服务器。具体操作如下：</p><pre class="line-numbers language-mariadb" data-language="mariadb"><code class="language-mariadb">MariaDB [(none)]&gt; SELECT user, host FROM mysql.user;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/../images/%E6%9C%AC%E5%9C%B0navcat%E8%BF%9E%E6%8E%A5%E4%B8%8D%E4%B8%8A%E8%99%9A%E6%8B%9F%E6%9C%BAMariaDB%E7%9A%84%E9%97%AE%E9%A2%98%E4%B8%8E%E8%A7%A3%E5%86%B3/image-20230310112451730.png"></p><p>查询到连接权限是本地，永&amp;替换为所有ip都可以访问该用户</p><pre class="line-numbers language-mariadb" data-language="mariadb"><code class="language-mariadb">MariaDB [(none)]&gt; GRANT ALL PRIVILEGES ON *.* TO 'root'@'%' IDENTIFIED BY 'xiyu152630' WITH GRANT OPTION;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>再次查询</p><p><img src="/../images/%E6%9C%AC%E5%9C%B0navcat%E8%BF%9E%E6%8E%A5%E4%B8%8D%E4%B8%8A%E8%99%9A%E6%8B%9F%E6%9C%BAMariaDB%E7%9A%84%E9%97%AE%E9%A2%98%E4%B8%8E%E8%A7%A3%E5%86%B3/image-20230310112754515.png"></p><p>重新连接本地navcat，连接成功</p><p><img src="/../images/%E6%9C%AC%E5%9C%B0navcat%E8%BF%9E%E6%8E%A5%E4%B8%8D%E4%B8%8A%E8%99%9A%E6%8B%9F%E6%9C%BAMariaDB%E7%9A%84%E9%97%AE%E9%A2%98%E4%B8%8E%E8%A7%A3%E5%86%B3/image-20230310112835270.png"></p><p>问题解决。</p>]]></content>
      
      
      <categories>
          
          <category> 难点问题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> MariaDB </tag>
            
            <tag> navicat </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>es启动报错问题解决（一）</title>
      <link href="/2023/03/09/es-qi-dong-bao-cuo-wen-ti-jie-jue-yi/"/>
      <url>/2023/03/09/es-qi-dong-bao-cuo-wen-ti-jie-jue-yi/</url>
      
        <content type="html"><![CDATA[<h3 id="问题描述："><a href="#问题描述：" class="headerlink" title="问题描述："></a>问题描述：</h3><p>服务器宕机导致es无法重新启动，其中一个常见的错误：maybe these locations are not writable or multiple nodes were started without increasing [[node.max_local_storage_nodes] (was [1])</p><p>具体报错信息如下：</p><p><img src="/../images/es%E5%90%AF%E5%8A%A8%E6%8A%A5%E9%94%99%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3%EF%BC%88%E4%B8%80%EF%BC%89/image-20230309174314551.png" alt="报错日志"></p><h3 id="解决方法："><a href="#解决方法：" class="headerlink" title="解决方法："></a>解决方法：</h3><p>这个错误的原因是因为之前用root用户启动了es，之后切换用户运行就会报这个错误，解决这个错误只需要删除根目录下data目录中的nodes文件，然后用其它用户启动就能解决了。</p><p><img src="/../images/es%E5%90%AF%E5%8A%A8%E6%8A%A5%E9%94%99%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3%EF%BC%88%E4%B8%80%EF%BC%89/image-20230309174441331.png" alt="data目录"></p>]]></content>
      
      
      <categories>
          
          <category> 难点问题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> es </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>IE11浏览器适配问题解决</title>
      <link href="/2023/03/08/ie11-liu-lan-qi-gua-pei-wen-ti-jie-jue/"/>
      <url>/2023/03/08/ie11-liu-lan-qi-gua-pei-wen-ti-jie-jue/</url>
      
        <content type="html"><![CDATA[<h3 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h3><p>水平居中与自适应文本块边框属性在IE11浏览器失效。</p><h3 id="解决思路"><a href="#解决思路" class="headerlink" title="解决思路"></a>解决思路</h3><p>如果需要在 IE11 中居中一个块级元素，并且其宽度需要自适应其内容的宽度，可以尝试以下方法：</p><ol><li>使用 <code>text-align: center;</code> 属性将父元素的文本居中，同时在子元素中设置 <code>display: inline-block;</code> 属性以使其成为一个内联块元素，例如：</li></ol><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.parent</span> <span class="token punctuation">{</span>  <span class="token property">text-align</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">.child</span> <span class="token punctuation">{</span>  <span class="token property">display</span><span class="token punctuation">:</span> inline-block<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li>使用 <code>display: flex;</code> 属性将父元素转换为弹性容器，然后使用 <code>justify-content: center;</code> 属性将其子元素水平居中，例如：</li></ol><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.parent</span> <span class="token punctuation">{</span>  <span class="token property">display</span><span class="token punctuation">:</span> flex<span class="token punctuation">;</span>  <span class="token property">justify-content</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>这两种方法都可以在 IE11 中兼容，并且能够水平居中一个自适应内容宽度的块级元素。</p><h3 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h3><p>{width：max-content}不兼容ie11浏览器，将div块级元素规定固定宽度</p>]]></content>
      
      
      <categories>
          
          <category> 难点问题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> IE11适配 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mysql插入中文数据乱码问题与解决</title>
      <link href="/2023/02/21/mysql-cha-ru-zhong-wen-shu-ju-luan-ma-wen-ti-yu-jie-jue/"/>
      <url>/2023/02/21/mysql-cha-ru-zhong-wen-shu-ju-luan-ma-wen-ti-yu-jie-jue/</url>
      
        <content type="html"><![CDATA[<h3 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h3><p>trs同步数据库到mysql数据库，中文数据显示????乱码。或表现为数据插入乱码。</p><p><img src="/../images/mysql%E6%8F%92%E5%85%A5%E4%B8%AD%E6%96%87%E6%95%B0%E6%8D%AE%E4%B9%B1%E7%A0%81%E9%97%AE%E9%A2%98%E4%B8%8E%E8%A7%A3%E5%86%B3/image-20230221152156625.png" alt="问题复现"></p><h3 id="一、mysql存储乱码解决思路"><a href="#一、mysql存储乱码解决思路" class="headerlink" title="一、mysql存储乱码解决思路"></a>一、mysql存储乱码解决思路</h3><ol><li>更改乱码所在表的字符集为utf8</li><li>更改数据库字符集为utf8</li><li>在MySQL配置文件my.ini或my.cnf中更改字符集为utf8</li></ol><h3 id="二、my-ini文件目录"><a href="#二、my-ini文件目录" class="headerlink" title="二、my.ini文件目录"></a>二、my.ini文件目录</h3><p>mysql中文显示乱码或者问号是因为选用的编码不对或者编码不一致造成的，windows系统中可通过修改my.ini配置文件规定数据库编码。windows配置目录如下图：</p><p><img src="/../images/mysql%E6%8F%92%E5%85%A5%E4%B8%AD%E6%96%87%E6%95%B0%E6%8D%AE%E4%B9%B1%E7%A0%81%E9%97%AE%E9%A2%98%E4%B8%8E%E8%A7%A3%E5%86%B3/image-20230221111907602.png" alt="my.ini目录"></p><p>原来的配置文件名为my-default.ini，剪切到桌面修改文件名为my.ini并重新上传到目录文件。</p><p><strong>注：mysql5.7以上版本没有my.ini配置文件</strong></p><h3 id="三、修改my-ini文件"><a href="#三、修改my-ini文件" class="headerlink" title="三、修改my.ini文件"></a>三、修改my.ini文件</h3><h5 id="1、规定-mydqld-和-client-字段属性如下图"><a href="#1、规定-mydqld-和-client-字段属性如下图" class="headerlink" title="1、规定 [mydqld] 和 [client] 字段属性如下图"></a>1、规定 [mydqld] 和 [client] 字段属性如下图</h5><p><img src="/../images/mysql%E6%8F%92%E5%85%A5%E4%B8%AD%E6%96%87%E6%95%B0%E6%8D%AE%E4%B9%B1%E7%A0%81%E9%97%AE%E9%A2%98%E4%B8%8E%E8%A7%A3%E5%86%B3/image-20230221112312352.png" alt="修改后的编码"></p><h5 id="2、修改MySQL的数据目录下的my-ini配置文件"><a href="#2、修改MySQL的数据目录下的my-ini配置文件" class="headerlink" title="2、修改MySQL的数据目录下的my.ini配置文件"></a>2、修改MySQL的数据目录下的my.ini配置文件</h5><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">[mysql]default-character-set=utf8 #默认字符集...[mysqld] # 大概在76行左右，在其下添加...character-set-server=utf8collation-server=utf8_general_ci<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/../images/mysql%E6%8F%92%E5%85%A5%E4%B8%AD%E6%96%87%E6%95%B0%E6%8D%AE%E4%B9%B1%E7%A0%81%E9%97%AE%E9%A2%98%E4%B8%8E%E8%A7%A3%E5%86%B3/image-20230221151046059.png" alt="数据目录下配置"></p><h5 id="3、解注释并规定-basedit-和-datadir-的路径"><a href="#3、解注释并规定-basedit-和-datadir-的路径" class="headerlink" title="3、解注释并规定 basedit 和 datadir 的路径"></a>3、解注释并规定 basedit 和 datadir 的路径</h5><p><img src="/../images/mysql%E6%8F%92%E5%85%A5%E4%B8%AD%E6%96%87%E6%95%B0%E6%8D%AE%E4%B9%B1%E7%A0%81%E9%97%AE%E9%A2%98%E4%B8%8E%E8%A7%A3%E5%86%B3/image-20230221142318410.png" alt="修改后的路径"></p><h5 id="4、basedir-与-datadir-的作用"><a href="#4、basedir-与-datadir-的作用" class="headerlink" title="4、basedir 与 datadir 的作用"></a>4、basedir 与 datadir 的作用</h5><p>在 MySQL 的配置文件 my.ini 或者 my.cnf 文件中</p><ul><li><strong>basedir</strong>：该参数指定了安装 MySQL 的安装路径，填写全路径可以解决相对路径所造成的问题。</li><li><strong>datadir</strong>：该参数指定了 MySQL 的数据库文件放在什么路径下。数据库文件即我们常说的 MySQL data 文件。</li></ul><h3 id="四、重启mysql并查看编码格式"><a href="#四、重启mysql并查看编码格式" class="headerlink" title="四、重启mysql并查看编码格式"></a>四、重启mysql并查看编码格式</h3><h5 id="1、计算机—右键—管理—服务和应用程序—服务—mysql服务重启"><a href="#1、计算机—右键—管理—服务和应用程序—服务—mysql服务重启" class="headerlink" title="1、计算机—右键—管理—服务和应用程序—服务—mysql服务重启"></a>1、计算机—右键—管理—服务和应用程序—服务—mysql服务重启</h5><h5 id="2、或者用命令行-net-stop-mysql和net-start-mysql重启"><a href="#2、或者用命令行-net-stop-mysql和net-start-mysql重启" class="headerlink" title="2、或者用命令行 net stop mysql和net start mysql重启"></a>2、或者用命令行 <code>net stop mysql</code>和<code>net start mysql</code>重启</h5><h5 id="3、继续命令行输入mysql-u-root-p获得密码命令行，并输入密码"><a href="#3、继续命令行输入mysql-u-root-p获得密码命令行，并输入密码" class="headerlink" title="3、继续命令行输入mysql -u root -p获得密码命令行，并输入密码"></a>3、继续命令行输入<code>mysql -u root -p</code>获得密码命令行，并输入密码</h5><p><img src="/../images/mysql%E6%8F%92%E5%85%A5%E4%B8%AD%E6%96%87%E6%95%B0%E6%8D%AE%E4%B9%B1%E7%A0%81%E9%97%AE%E9%A2%98%E4%B8%8E%E8%A7%A3%E5%86%B3/image-20230221143548323.png" alt="连接数据库"></p><h5 id="4、输入show-variables-like-39-char-39-显示编码格式"><a href="#4、输入show-variables-like-39-char-39-显示编码格式" class="headerlink" title="4、输入show variables like 'char%';显示编码格式"></a>4、输入<code>show variables like 'char%';</code>显示编码格式</h5><p><img src="/../images/mysql%E6%8F%92%E5%85%A5%E4%B8%AD%E6%96%87%E6%95%B0%E6%8D%AE%E4%B9%B1%E7%A0%81%E9%97%AE%E9%A2%98%E4%B8%8E%E8%A7%A3%E5%86%B3/image-20230221150645821.png" alt="配置编码格式结果"></p><h5 id="5、如上图修改过之后编码为utf8，则标识成功。若仍有问题，需要单独修改数据库与表的编码格式，并重启数据库。"><a href="#5、如上图修改过之后编码为utf8，则标识成功。若仍有问题，需要单独修改数据库与表的编码格式，并重启数据库。" class="headerlink" title="5、如上图修改过之后编码为utf8，则标识成功。若仍有问题，需要单独修改数据库与表的编码格式，并重启数据库。"></a>5、如上图修改过之后编码为utf8，则标识成功。若仍有问题，需要单独修改数据库与表的编码格式，并重启数据库。</h5><p><img src="/../images/mysql%E6%8F%92%E5%85%A5%E4%B8%AD%E6%96%87%E6%95%B0%E6%8D%AE%E4%B9%B1%E7%A0%81%E9%97%AE%E9%A2%98%E4%B8%8E%E8%A7%A3%E5%86%B3/image-20230221151426384.png" alt="trs数据库同步中文到mysql数据库成功"></p>]]></content>
      
      
      <categories>
          
          <category> 难点问题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mysql </tag>
            
            <tag> 乱码 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Space-Engine太空旅行--银河系与人马座A*</title>
      <link href="/2023/02/08/space-engine-tai-kong-lu-xing-yin-he-xi-yu-ren-ma-zuo-a/"/>
      <url>/2023/02/08/space-engine-tai-kong-lu-xing-yin-he-xi-yu-ren-ma-zuo-a/</url>
      
        <content type="html"><![CDATA[<p><img src="/../images/Space-Engine%E5%A4%AA%E7%A9%BA%E6%97%85%E8%A1%8C-%E9%93%B6%E6%B2%B3%E7%B3%BB%E4%B8%8E%E4%BA%BA%E9%A9%AC%E5%BA%A7A/%E9%93%B6%E6%B2%B3%E7%B3%BB-16758246994232.png" alt="银河系"></p><p><img src="/../images/Space-Engine%E5%A4%AA%E7%A9%BA%E6%97%85%E8%A1%8C-%E9%93%B6%E6%B2%B3%E7%B3%BB%E4%B8%8E%E4%BA%BA%E9%A9%AC%E5%BA%A7A/%E9%93%B6%E6%B2%B3%E7%B3%BB%E5%AE%87%E5%AE%99%E5%9C%B0%E5%9B%BE.png" alt="银河系宇宙地图"></p><p><img src="/../images/Space-Engine%E5%A4%AA%E7%A9%BA%E6%97%85%E8%A1%8C-%E9%93%B6%E6%B2%B3%E7%B3%BB%E4%B8%8E%E4%BA%BA%E9%A9%AC%E5%BA%A7A/%E4%BA%BA%E9%A9%AC%E5%BA%A7A.png" alt="人马座A*"></p><p><img src="/../images/Space-Engine%E5%A4%AA%E7%A9%BA%E6%97%85%E8%A1%8C-%E9%93%B6%E6%B2%B3%E7%B3%BB%E4%B8%8E%E4%BA%BA%E9%A9%AC%E5%BA%A7A/%E4%BA%BA%E9%A9%AC%E5%BA%A7%E4%B8%AD%E5%BF%83%E9%BB%91%E6%B4%9E.png" alt="人马座A*中心黑洞"></p><p><img src="/../images/Space-Engine%E5%A4%AA%E7%A9%BA%E6%97%85%E8%A1%8C-%E9%93%B6%E6%B2%B3%E7%B3%BB%E4%B8%8E%E4%BA%BA%E9%A9%AC%E5%BA%A7A/%E9%BB%91%E6%B4%9E%E5%BC%95%E5%8A%9B.png" alt="黑洞引力"></p><p><img src="/../images/Space-Engine%E5%A4%AA%E7%A9%BA%E6%97%85%E8%A1%8C-%E9%93%B6%E6%B2%B3%E7%B3%BB%E4%B8%8E%E4%BA%BA%E9%A9%AC%E5%BA%A7A/%E9%BB%91%E6%B4%9E%E5%86%85%E9%83%A8.png" alt="黑洞内部"></p><p><img src="/../images/Space-Engine%E5%A4%AA%E7%A9%BA%E6%97%85%E8%A1%8C-%E9%93%B6%E6%B2%B3%E7%B3%BB%E4%B8%8E%E4%BA%BA%E9%A9%AC%E5%BA%A7A/%E9%BB%91%E6%B4%9E%E5%86%85%E9%83%A82.png" alt="黑洞内部2"></p>]]></content>
      
      
      <categories>
          
          <category> 一些想法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Space Engine </tag>
            
            <tag> 图库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据库乱码的解决办法与思路</title>
      <link href="/2023/02/07/shu-ju-ku-luan-ma-de-jie-jue-ban-fa-yu-si-lu/"/>
      <url>/2023/02/07/shu-ju-ku-luan-ma-de-jie-jue-ban-fa-yu-si-lu/</url>
      
        <content type="html"><![CDATA[<h3 id="MySQL乱码的几种原因"><a href="#MySQL乱码的几种原因" class="headerlink" title="MySQL乱码的几种原因"></a>MySQL乱码的几种原因</h3><p><strong>MySQL之所以会乱码，无非是以下几种原因：</strong></p><ol><li><p>存进数据库之前就乱码</p></li><li><p>在存进数据库过程中乱码</p></li><li><p>存进数据库后乱码</p></li></ol><p>想知道在哪里出现乱码很简单，在后台打印一下就知道了。</p><h3 id="解决MySQL乱码的方法"><a href="#解决MySQL乱码的方法" class="headerlink" title="解决MySQL乱码的方法"></a>解决MySQL乱码的方法</h3><p>既然知道问题出在哪里，那解决方法也很简单：</p><ol><li><p>jsp设置编码是utf-8，保证传到后台的是utf-8的编码</p></li><li><p>将传到后台的请求的参数转为utf-8的编码。至于使用哪种方法，可以使用spring的拦截器，也可以自己写一个，也可以手动转换。</p></li><li><p>在数据库连接上加这么一段jdbc:mysql://localhost:3306/test？useUnicode=true&amp;characterEncoding=utf-8，保证传输过程是utf-8的。</p></li><li><p>设置数据库的编码为utf-8，在my.ini设置或者在Config设置也行，注意的是my.ini里default-character-set要改两处地方</p></li><li><p>url或者easyui乱码，可以试一下将tomcat的server.xml中的</p></li></ol><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Connector</span> <span class="token attr-name">port</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>8080<span class="token punctuation">"</span></span> <span class="token attr-name">protocol</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>HTTP/1.1<span class="token punctuation">"</span></span>               <span class="token attr-name">connectionTimeout</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>20000<span class="token punctuation">"</span></span>               <span class="token attr-name">redirectPort</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>8443<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>​改为</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Connector</span> <span class="token attr-name">port</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>8080<span class="token punctuation">"</span></span> <span class="token attr-name">protocol</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>HTTP/1.1<span class="token punctuation">"</span></span>               <span class="token attr-name">connectionTimeout</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>20000<span class="token punctuation">"</span></span>               <span class="token attr-name">redirectPort</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>8443<span class="token punctuation">"</span></span> <span class="token attr-name">URIEncoding</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>要保证不乱码，首先要做到编码要统一，其他问题都好找出来。</p><p>转载自：<a href="https://www.cnblogs.com/ginponson/p/4310033.html">MySQL乱码的几种原因</a></p>]]></content>
      
      
      <categories>
          
          <category> 难点问题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaWeb知识笔记——JSP</title>
      <link href="/2023/02/06/javaweb-zhi-shi-bi-ji-jsp/"/>
      <url>/2023/02/06/javaweb-zhi-shi-bi-ji-jsp/</url>
      
        <content type="html"><![CDATA[<h2 id="JSP"><a href="#JSP" class="headerlink" title="JSP"></a>JSP</h2><p><strong>今日目标：</strong></p><blockquote><ul><li>理解 JSP 及 JSP 原理</li><li>能在 JSP中使用 <code>EL表达式</code> 和 <code>JSTL标签</code></li><li>理解 <code>MVC模式</code> 和 <code>三层架构</code></li><li>能完成品牌数据的增删改查功能</li></ul></blockquote><h2 id="1，JSP-概述"><a href="#1，JSP-概述" class="headerlink" title="1，JSP 概述"></a>1，JSP 概述</h2><p>==JSP（全称：Java Server Pages）：Java 服务端页面。==是一种动态的网页技术，其中既可以定义 HTML、JS、CSS等静态内容，还可以定义 Java代码的动态内容，也就是 <code>JSP = HTML + Java</code>。如下就是jsp代码</p><pre class="line-numbers language-jsp" data-language="jsp"><code class="language-jsp">&lt;html&gt;    &lt;head&gt;        &lt;title&gt;Title&lt;/title&gt;    &lt;/head&gt;    &lt;body&gt;        &lt;h1&gt;JSP,Hello World&lt;/h1&gt;        &lt;%        System.out.println("hello,jsp~");        %&gt;    &lt;/body&gt;&lt;/html&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面代码 <code>h1</code> 标签内容是展示在页面上，而 Java 的输出语句是输出在 idea 的控制台。</p><p>那么，JSP 能做什么呢？现在我们只用 <code>servlet</code> 实现功能，看存在什么问题。如下图所示，当我们登陆成功后，需要在页面上展示用户名</p><p> <img src="/../images/JavaWeb%E7%9F%A5%E8%AF%86%E7%AC%94%E8%AE%B0%E2%80%94%E2%80%94JSP/image-20210818101320935.png"></p><p>上图的用户名是动态展示，也就是谁登陆就展示谁的用户名。只用 <code>servlet</code> 如何实现呢？在今天的资料里已经提供好了一个 <code>LoginServlet</code> ，该 <code>servlet</code> 就是实现这个功能的，现将资料中的 <code>LoginServlet.java</code> 拷贝到 <code>request-demo</code> 项目中来演示。接下来启动服务器并访问登陆页面</p><p><img src="/../images/JavaWeb%E7%9F%A5%E8%AF%86%E7%AC%94%E8%AE%B0%E2%80%94%E2%80%94JSP/image-20210818102205544.png"></p><p>输入了 <code>zhangsan</code> 用户的登陆信息后点击 <code>登陆</code> 按钮，就能看到如下图效果</p><p><img src="/../images/JavaWeb%E7%9F%A5%E8%AF%86%E7%AC%94%E8%AE%B0%E2%80%94%E2%80%94JSP/image-20210818102313898.png"></p><p>当然如果是 <code>lisi</code> 登陆的，在该页面展示的就是 <code>lisi,欢迎您</code>，动态的展示效果就实现了。那么 <code>LoginServlet</code> 到底是如何实现的，我们看看它里面的内容</p><p><img src="/../images/JavaWeb%E7%9F%A5%E8%AF%86%E7%AC%94%E8%AE%B0%E2%80%94%E2%80%94JSP/image-20210818102506754.png"></p><p>上面的代码有大量使用到 <code>writer</code> 对象向页面写标签内容，这样我们的代码就显得很麻烦；将来如果展示的效果出现了问题，排错也显得有点力不从心。而 JSP 是如何解决这个问题的呢？在资料中也提供了一个 <code>login.jsp</code> 页面，该页面也能实现该功能，现将该页面拷贝到项目的 <code>webapp</code>下，需要修改 <code>login.html</code> 中表单数据提交的路径为下图</p><p><img src="/../images/JavaWeb%E7%9F%A5%E8%AF%86%E7%AC%94%E8%AE%B0%E2%80%94%E2%80%94JSP/image-20210818103127245.png"></p><p>重新启动服务器并进行测试，发现也可以实现同样的功能。那么 <code>login.jsp</code> 又是如何实现的呢？那我们来看看 <code>login.jsp</code> 的代码</p><p><img src="/../images/JavaWeb%E7%9F%A5%E8%AF%86%E7%AC%94%E8%AE%B0%E2%80%94%E2%80%94JSP/image-20210818103352432.png"></p><p>上面代码可以看到里面基本都是 <code>HTML</code> 标签，而动态数据使用 Java 代码进行展示；这样操作看起来要比用 <code>servlet</code> 实现要舒服很多。</p><p>JSP 作用：简化开发，避免了在Servlet中直接输出HTML标签。</p><h2 id="2，JSP-快速入门"><a href="#2，JSP-快速入门" class="headerlink" title="2，JSP 快速入门"></a>2，JSP 快速入门</h2><p>接下来我们做一个简单的快速入门代码。</p><h3 id="2-1-搭建环境"><a href="#2-1-搭建环境" class="headerlink" title="2.1  搭建环境"></a>2.1  搭建环境</h3><p>创建一个maven的 web 项目，项目结构如下：</p><p><img src="/../images/JavaWeb%E7%9F%A5%E8%AF%86%E7%AC%94%E8%AE%B0%E2%80%94%E2%80%94JSP/image-20210818104316457.png"></p><p><code>pom.xml</code> 文件内容如下：</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>project</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>modelVersion</span><span class="token punctuation">&gt;</span></span>4.0.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>modelVersion</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.example<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>jsp-demo<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>1.0-SNAPSHOT<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>packaging</span><span class="token punctuation">&gt;</span></span>war<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>packaging</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>properties</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>maven.compiler.source</span><span class="token punctuation">&gt;</span></span>8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>maven.compiler.source</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>maven.compiler.target</span><span class="token punctuation">&gt;</span></span>8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>maven.compiler.target</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>properties</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">&gt;</span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>javax.servlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>javax.servlet-api<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>3.1.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">&gt;</span></span>provided<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>build</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugins</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.apache.tomcat.maven<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>tomcat7-maven-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>2.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugins</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>build</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>project</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-2-导入-JSP-依赖"><a href="#2-2-导入-JSP-依赖" class="headerlink" title="2.2  导入 JSP 依赖"></a>2.2  导入 JSP 依赖</h3><p>在 <code>dependencies</code> 标签中导入 JSP 的依赖，如下</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>javax.servlet.jsp<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>jsp-api<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>2.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">&gt;</span></span>provided<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>该依赖的 <code>scope</code> 必须设置为 <code>provided</code>，因为 tomcat 中有这个jar包了，所以在打包时我们是不希望将该依赖打进到我们工程的war包中。</p><h3 id="2-3-创建-jsp-页面"><a href="#2-3-创建-jsp-页面" class="headerlink" title="2.3  创建 jsp 页面"></a>2.3  创建 jsp 页面</h3><p>在项目的 <code>webapp</code> 下创建jsp页面</p><p><img src="/../images/JavaWeb%E7%9F%A5%E8%AF%86%E7%AC%94%E8%AE%B0%E2%80%94%E2%80%94JSP/image-20210818105519970.png"></p><p>通过上面方式创建一个名为 <code>hello.jsp</code> 的页面。</p><h3 id="2-4-编写代码"><a href="#2-4-编写代码" class="headerlink" title="2.4  编写代码"></a>2.4  编写代码</h3><p>在 <code>hello.jsp</code> 页面中书写 <code>HTML</code> 标签和 <code>Java</code> 代码，如下</p><pre class="line-numbers language-jsp" data-language="jsp"><code class="language-jsp">&lt;%@ page contentType="text/html;charset=UTF-8" language="java" %&gt;&lt;html&gt;&lt;head&gt;    &lt;title&gt;Title&lt;/title&gt;&lt;/head&gt;&lt;body&gt;    &lt;h1&gt;hello jsp&lt;/h1&gt;    &lt;%        System.out.println("hello,jsp~");    %&gt;&lt;/body&gt;&lt;/html&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-5-测试"><a href="#2-5-测试" class="headerlink" title="2.5  测试"></a>2.5  测试</h3><p>启动服务器并在浏览器地址栏输入 <code>http://localhost:8080/jsp-demo/hello.jsp</code>，我们可以在页面上看到如下内容</p><p><img src="/../images/JavaWeb%E7%9F%A5%E8%AF%86%E7%AC%94%E8%AE%B0%E2%80%94%E2%80%94JSP/image-20210818110122438.png"></p><p>同时也可以看到在 <code>idea</code> 的控制台看到输出的 <code>hello,jsp~</code> 内容。</p><h2 id="3，JSP-原理"><a href="#3，JSP-原理" class="headerlink" title="3，JSP 原理"></a>3，JSP 原理</h2><p>我们之前说 JSP 就是一个页面，那么在 JSP 中写 <code>html</code> 标签，我们能理解，但是为什么还可以写 <code>Java</code> 代码呢？</p><p>因为 ==JSP 本质上就是一个 Servlet。==接下来我们聊聊访问jsp时的流程</p><p><img src="/../images/JavaWeb%E7%9F%A5%E8%AF%86%E7%AC%94%E8%AE%B0%E2%80%94%E2%80%94JSP/image-20210818111039350.png"></p><ol><li>浏览器第一次访问 <code>hello.jsp</code> 页面</li><li><code>tomcat</code> 会将 <code>hello.jsp</code> 转换为名为 <code>hello_jsp.java</code> 的一个 <code>Servlet</code></li><li><code>tomcat</code> 再将转换的 <code>servlet</code> 编译成字节码文件 <code>hello_jsp.class</code></li><li><code>tomcat</code> 会执行该字节码文件，向外提供服务</li></ol><p>我们可以到项目所在磁盘目录下找 <code>target\tomcat\work\Tomcat\localhost\jsp-demo\org\apache\jsp</code> 目录，而这个目录下就能看到转换后的 <code>servlet</code></p><p><img src="/../images/JavaWeb%E7%9F%A5%E8%AF%86%E7%AC%94%E8%AE%B0%E2%80%94%E2%80%94JSP/image-20210818112613589.png"></p><p>打开 <code>hello_jsp.java</code> 文件，来查看里面的代码</p><p><img src="/../images/JavaWeb%E7%9F%A5%E8%AF%86%E7%AC%94%E8%AE%B0%E2%80%94%E2%80%94JSP/image-20210818112724462.png"></p><p>由上面的类的继承关系可以看到继承了名为 <code>HttpJspBase</code> 这个类，那我们在看该类的继承关系。到资料中的找如下目录： <code>资料\tomcat源码\apache-tomcat-8.5.68-src\java\org\apache\jasper\runtime</code> ，该目录下就有 <code>HttpJspBase</code> 类，查看该类的继承关系</p><p><img src="/../images/JavaWeb%E7%9F%A5%E8%AF%86%E7%AC%94%E8%AE%B0%E2%80%94%E2%80%94JSP/image-20210818113118802.png"></p><p>可以看到该类继承了 <code>HttpServlet</code> ；那么 <code>hello_jsp</code> 这个类就间接的继承了 <code>HttpServlet</code> ，也就说明 <code>hello_jsp</code> 是一个 <code>servlet</code>。</p><p>继续阅读 <code>hello_jsp</code> 类的代码，可以看到有一个名为 <code>_jspService()</code> 的方法，该方法就是每次访问 <code>jsp</code> 时自动执行的方法，和 <code>servlet</code> 中的 <code>service</code> 方法一样 。</p><p>而在 <code>_jspService()</code> 方法中可以看到往浏览器写标签的代码：</p><p><img src="/../images/JavaWeb%E7%9F%A5%E8%AF%86%E7%AC%94%E8%AE%B0%E2%80%94%E2%80%94JSP/image-20210818114008998.png"></p><p>以前我们自己写 <code>servlet</code> 时，这部分代码是由我们自己来写，现在有了 <code>jsp</code> 后，由tomcat完成这部分功能。</p><h2 id="4，JSP-脚本"><a href="#4，JSP-脚本" class="headerlink" title="4，JSP 脚本"></a>4，JSP 脚本</h2><p>JSP脚本用于在 JSP页面内定义 Java代码。在之前的入门案例中我们就在 JSP 页面定义的 Java 代码就是 JSP 脚本。</p><h3 id="4-1-JSP-脚本分类"><a href="#4-1-JSP-脚本分类" class="headerlink" title="4.1  JSP 脚本分类"></a>4.1  JSP 脚本分类</h3><p>JSP 脚本有如下三个分类：</p><ul><li>&lt;%…%&gt;：内容会直接放到_jspService()方法之中</li><li>&lt;%=…%&gt;：内容会放到out.print()中，作为out.print()的参数</li><li>&lt;%!…%&gt;：内容会放到_jspService()方法之外，被类直接包含</li></ul><p><strong>代码演示：</strong></p><p>在 <code>hello.jsp</code> 中书写</p><pre class="line-numbers language-jsp" data-language="jsp"><code class="language-jsp">&lt;%    System.out.println("hello,jsp~");    int i = 3;%&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>通过浏览器访问 <code>hello.jsp</code> 后，查看转换的 <code>hello_jsp.java</code> 文件，i 变量定义在了 <code>_jspService()</code> 方法中</p><p><img src="/../images/JavaWeb%E7%9F%A5%E8%AF%86%E7%AC%94%E8%AE%B0%E2%80%94%E2%80%94JSP/image-20210818123606231.png"></p><p>在 <code>hello.jsp</code> 中书写</p><pre class="line-numbers language-jsp" data-language="jsp"><code class="language-jsp">&lt;%="hello"%&gt;&lt;%=i%&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>通过浏览器访问 <code>hello.jsp</code> 后，查看转换的 <code>hello_jsp.java</code> 文件，该脚本的内容被放在了 <code>out.print()</code> 中，作为参数</p><p><img src="/../images/JavaWeb%E7%9F%A5%E8%AF%86%E7%AC%94%E8%AE%B0%E2%80%94%E2%80%94JSP/image-20210818123820571.png"></p><p>在 <code>hello.jsp</code> 中书写</p><pre class="line-numbers language-jsp" data-language="jsp"><code class="language-jsp">&lt;%!    void  show(){}String name = "zhangsan";%&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>通过浏览器访问 <code>hello.jsp</code> 后，查看转换的 <code>hello_jsp.java</code> 文件，该脚本的内容被放在了成员位置</p><p><img src="/../images/JavaWeb%E7%9F%A5%E8%AF%86%E7%AC%94%E8%AE%B0%E2%80%94%E2%80%94JSP/image-20210818123946272.png"></p><h3 id="4-2-案例"><a href="#4-2-案例" class="headerlink" title="4.2  案例"></a>4.2  案例</h3><h4 id="4-2-1-需求"><a href="#4-2-1-需求" class="headerlink" title="4.2.1  需求"></a>4.2.1  需求</h4><p>使用JSP脚本展示品牌数据</p><p><img src="/../images/JavaWeb%E7%9F%A5%E8%AF%86%E7%AC%94%E8%AE%B0%E2%80%94%E2%80%94JSP/image-20210818123946272.png"></p><p>说明：</p><ul><li>在资料 <code>资料\1. JSP案例素材</code> 中提供了 <code>brand.html</code> 静态页面</li><li>在该案例中数据不从数据库中查询，而是在 JSP 页面上写死</li></ul><h4 id="4-2-2-实现"><a href="#4-2-2-实现" class="headerlink" title="4.2.2  实现"></a>4.2.2  实现</h4><ul><li><p>将资料 <code>资料\1. JSP案例素材</code> 中的 <code>Brand.java</code> 文件放置到项目的 <code>com.itheima.pojo</code> 包下</p></li><li><p>在项目的 <code>webapp</code> 中创建 <code>brand.jsp</code> ，并将 <code>brand.html</code>页面中的内容拷贝过来。<code>brand.jsp</code> 内容如下</p><pre class="line-numbers language-jsp" data-language="jsp"><code class="language-jsp">&lt;%@ page contentType="text/html;charset=UTF-8" language="java" %&gt;&lt;!DOCTYPE html&gt;&lt;html lang="en"&gt;&lt;head&gt;    &lt;meta charset="UTF-8"&gt;    &lt;title&gt;Title&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;input type="button" value="新增"&gt;&lt;br&gt;&lt;hr&gt;    &lt;table border="1" cellspacing="0" width="800"&gt;        &lt;tr&gt;            &lt;th&gt;序号&lt;/th&gt;            &lt;th&gt;品牌名称&lt;/th&gt;            &lt;th&gt;企业名称&lt;/th&gt;            &lt;th&gt;排序&lt;/th&gt;            &lt;th&gt;品牌介绍&lt;/th&gt;            &lt;th&gt;状态&lt;/th&gt;            &lt;th&gt;操作&lt;/th&gt;        &lt;/tr&gt;        &lt;tr align="center"&gt;            &lt;td&gt;1&lt;/td&gt;            &lt;td&gt;三只松鼠&lt;/td&gt;            &lt;td&gt;三只松鼠&lt;/td&gt;            &lt;td&gt;100&lt;/td&gt;            &lt;td&gt;三只松鼠，好吃不上火&lt;/td&gt;            &lt;td&gt;启用&lt;/td&gt;            &lt;td&gt;&lt;a href="#"&gt;修改&lt;/a&gt; &lt;a href="#"&gt;删除&lt;/a&gt;&lt;/td&gt;        &lt;/tr&gt;        &lt;tr align="center"&gt;            &lt;td&gt;2&lt;/td&gt;            &lt;td&gt;优衣库&lt;/td&gt;            &lt;td&gt;优衣库&lt;/td&gt;            &lt;td&gt;10&lt;/td&gt;            &lt;td&gt;优衣库，服适人生&lt;/td&gt;            &lt;td&gt;禁用&lt;/td&gt;            &lt;td&gt;&lt;a href="#"&gt;修改&lt;/a&gt; &lt;a href="#"&gt;删除&lt;/a&gt;&lt;/td&gt;        &lt;/tr&gt;        &lt;tr align="center"&gt;            &lt;td&gt;3&lt;/td&gt;            &lt;td&gt;小米&lt;/td&gt;            &lt;td&gt;小米科技有限公司&lt;/td&gt;            &lt;td&gt;1000&lt;/td&gt;            &lt;td&gt;为发烧而生&lt;/td&gt;            &lt;td&gt;启用&lt;/td&gt;            &lt;td&gt;&lt;a href="#"&gt;修改&lt;/a&gt; &lt;a href="#"&gt;删除&lt;/a&gt;&lt;/td&gt;        &lt;/tr&gt;    &lt;/table&gt;&lt;/body&gt;&lt;/html&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>现在页面中的数据都是假数据。</p></li><li><p>在 <code>brand.jsp</code> 中准备一些数据</p><pre class="line-numbers language-jsp" data-language="jsp"><code class="language-jsp">&lt;%    // 查询数据库    List&lt;Brand&gt; brands = new ArrayList&lt;Brand&gt;();    brands.add(new Brand(1,"三只松鼠","三只松鼠",100,"三只松鼠，好吃不上火",1));    brands.add(new Brand(2,"优衣库","优衣库",200,"优衣库，服适人生",0));    brands.add(new Brand(3,"小米","小米科技有限公司",1000,"为发烧而生",1));%&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>==注意：==这里的类是需要导包的</p></blockquote></li><li><p>将 <code>brand.jsp</code> 页面中的 <code>table</code> 标签中的数据改为动态的</p><pre class="line-numbers language-jsp" data-language="jsp"><code class="language-jsp">&lt;table border="1" cellspacing="0" width="800"&gt;    &lt;tr&gt;        &lt;th&gt;序号&lt;/th&gt;        &lt;th&gt;品牌名称&lt;/th&gt;        &lt;th&gt;企业名称&lt;/th&gt;        &lt;th&gt;排序&lt;/th&gt;        &lt;th&gt;品牌介绍&lt;/th&gt;        &lt;th&gt;状态&lt;/th&gt;        &lt;th&gt;操作&lt;/th&gt;    &lt;/tr&gt;        &lt;%     for (int i = 0; i &lt; brands.size(); i++) {         //获取集合中的 每一个 Brand 对象         Brand brand = brands.get(i);     }    %&gt;    &lt;tr align="center"&gt;        &lt;td&gt;1&lt;/td&gt;        &lt;td&gt;三只松鼠&lt;/td&gt;        &lt;td&gt;三只松鼠&lt;/td&gt;        &lt;td&gt;100&lt;/td&gt;        &lt;td&gt;三只松鼠，好吃不上火&lt;/td&gt;        &lt;td&gt;启用&lt;/td&gt;        &lt;td&gt;&lt;a href="#"&gt;修改&lt;/a&gt; &lt;a href="#"&gt;删除&lt;/a&gt;&lt;/td&gt;    &lt;/tr&gt;&lt;/table&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面的for循环需要将 <code>tr</code> 标签包裹起来，这样才能实现循环的效果，代码改进为</p><pre class="line-numbers language-jsp" data-language="jsp"><code class="language-jsp">&lt;table border="1" cellspacing="0" width="800"&gt;    &lt;tr&gt;        &lt;th&gt;序号&lt;/th&gt;        &lt;th&gt;品牌名称&lt;/th&gt;        &lt;th&gt;企业名称&lt;/th&gt;        &lt;th&gt;排序&lt;/th&gt;        &lt;th&gt;品牌介绍&lt;/th&gt;        &lt;th&gt;状态&lt;/th&gt;        &lt;th&gt;操作&lt;/th&gt;    &lt;/tr&gt;        &lt;%     for (int i = 0; i &lt; brands.size(); i++) {         //获取集合中的 每一个 Brand 对象         Brand brand = brands.get(i);    %&gt;     &lt;tr align="center"&gt;            &lt;td&gt;1&lt;/td&gt;            &lt;td&gt;三只松鼠&lt;/td&gt;            &lt;td&gt;三只松鼠&lt;/td&gt;            &lt;td&gt;100&lt;/td&gt;            &lt;td&gt;三只松鼠，好吃不上火&lt;/td&gt;            &lt;td&gt;启用&lt;/td&gt;            &lt;td&gt;&lt;a href="#"&gt;修改&lt;/a&gt; &lt;a href="#"&gt;删除&lt;/a&gt;&lt;/td&gt;        &lt;/tr&gt;    &lt;%     }    %&gt;   &lt;/table&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>注意：&lt;%%&gt; 里面写的是 Java 代码，而外边写的是 HTML 标签</p></blockquote><p>上面代码中的 <code>td</code> 标签中的数据都需要是动态的，所以还需要改进</p><pre class="line-numbers language-jsp" data-language="jsp"><code class="language-jsp">&lt;table border="1" cellspacing="0" width="800"&gt;    &lt;tr&gt;        &lt;th&gt;序号&lt;/th&gt;        &lt;th&gt;品牌名称&lt;/th&gt;        &lt;th&gt;企业名称&lt;/th&gt;        &lt;th&gt;排序&lt;/th&gt;        &lt;th&gt;品牌介绍&lt;/th&gt;        &lt;th&gt;状态&lt;/th&gt;        &lt;th&gt;操作&lt;/th&gt;    &lt;/tr&gt;        &lt;%     for (int i = 0; i &lt; brands.size(); i++) {         //获取集合中的 每一个 Brand 对象         Brand brand = brands.get(i);    %&gt;     &lt;tr align="center"&gt;            &lt;td&gt;&lt;%=brand.getId()%&gt;&lt;/td&gt;            &lt;td&gt;&lt;%=brand.getBrandName()%&gt;&lt;/td&gt;            &lt;td&gt;&lt;%=brand.getCompanyName()%&gt;&lt;/td&gt;            &lt;td&gt;&lt;%=brand.getOrdered()%&gt;&lt;/td&gt;            &lt;td&gt;&lt;%=brand.getDescription()%&gt;&lt;/td&gt;            &lt;td&gt;&lt;%=brand.getStatus() == 1 ? "启用":"禁用"%&gt;&lt;/td&gt;            &lt;td&gt;&lt;a href="#"&gt;修改&lt;/a&gt; &lt;a href="#"&gt;删除&lt;/a&gt;&lt;/td&gt;        &lt;/tr&gt;    &lt;%     }    %&gt;   &lt;/table&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h4 id="4-2-3-成品代码"><a href="#4-2-3-成品代码" class="headerlink" title="4.2.3  成品代码"></a>4.2.3  成品代码</h4><pre class="line-numbers language-jsp" data-language="jsp"><code class="language-jsp">&lt;%@ page import="com.itheima.pojo.Brand" %&gt;&lt;%@ page import="java.util.List" %&gt;&lt;%@ page import="java.util.ArrayList" %&gt;&lt;%@ page contentType="text/html;charset=UTF-8" language="java" %&gt;&lt;%    // 查询数据库    List&lt;Brand&gt; brands = new ArrayList&lt;Brand&gt;();    brands.add(new Brand(1,"三只松鼠","三只松鼠",100,"三只松鼠，好吃不上火",1));    brands.add(new Brand(2,"优衣库","优衣库",200,"优衣库，服适人生",0));    brands.add(new Brand(3,"小米","小米科技有限公司",1000,"为发烧而生",1));%&gt;&lt;!DOCTYPE html&gt;&lt;html lang="en"&gt;&lt;head&gt;    &lt;meta charset="UTF-8"&gt;    &lt;title&gt;Title&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;input type="button" value="新增"&gt;&lt;br&gt;&lt;hr&gt;&lt;table border="1" cellspacing="0" width="800"&gt;    &lt;tr&gt;        &lt;th&gt;序号&lt;/th&gt;        &lt;th&gt;品牌名称&lt;/th&gt;        &lt;th&gt;企业名称&lt;/th&gt;        &lt;th&gt;排序&lt;/th&gt;        &lt;th&gt;品牌介绍&lt;/th&gt;        &lt;th&gt;状态&lt;/th&gt;        &lt;th&gt;操作&lt;/th&gt;    &lt;/tr&gt;    &lt;%        for (int i = 0; i &lt; brands.size(); i++) {            Brand brand = brands.get(i);    %&gt;    &lt;tr align="center"&gt;        &lt;td&gt;&lt;%=brand.getId()%&gt;&lt;/td&gt;        &lt;td&gt;&lt;%=brand.getBrandName()%&gt;&lt;/td&gt;        &lt;td&gt;&lt;%=brand.getCompanyName()%&gt;&lt;/td&gt;        &lt;td&gt;&lt;%=brand.getOrdered()%&gt;&lt;/td&gt;        &lt;td&gt;&lt;%=brand.getDescription()%&gt;&lt;/td&gt;&lt;td&gt;&lt;%=brand.getStatus() == 1 ? "启用":"禁用"%&gt;&lt;/td&gt;        &lt;td&gt;&lt;a href="#"&gt;修改&lt;/a&gt; &lt;a href="#"&gt;删除&lt;/a&gt;&lt;/td&gt;    &lt;/tr&gt;    &lt;%        }    %&gt;&lt;/table&gt;&lt;/body&gt;&lt;/html&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4-2-4-测试"><a href="#4-2-4-测试" class="headerlink" title="4.2.4  测试"></a>4.2.4  测试</h4><p>在浏览器地址栏输入 <code>http://localhost:8080/jsp-demo/brand.jsp</code> ，页面展示效果如下</p><p><img src="/../images/JavaWeb%E7%9F%A5%E8%AF%86%E7%AC%94%E8%AE%B0%E2%80%94%E2%80%94JSP/image-20210818145450748.png"></p><h3 id="4-3-JSP-缺点"><a href="#4-3-JSP-缺点" class="headerlink" title="4.3  JSP 缺点"></a>4.3  JSP 缺点</h3><p>通过上面的案例，我们可以看到 JSP 的很多缺点。</p><p>由于 JSP页面内，既可以定义 HTML 标签，又可以定义 Java代码，造成了以下问题：</p><ul><li><p>书写麻烦：特别是复杂的页面</p><p>既要写 HTML 标签，还要写 Java 代码</p></li><li><p>阅读麻烦</p><p>上面案例的代码，相信你后期再看这段代码时还需要花费很长的时间去梳理</p></li><li><p>复杂度高：运行需要依赖于各种环境，JRE，JSP容器，JavaEE…</p></li><li><p>占内存和磁盘：JSP会自动生成.java和.class文件占磁盘，运行的是.class文件占内存</p></li><li><p>调试困难：出错后，需要找到自动生成的.java文件进行调试</p></li><li><p>不利于团队协作：前端人员不会 Java，后端人员不精 HTML</p><p>如果页面布局发生变化，前端工程师对静态页面进行修改，然后再交给后端工程师，由后端工程师再将该页面改为 JSP 页面</p></li></ul><p>由于上述的问题， ==JSP 已逐渐退出历史舞台，==以后开发更多的是使用 ==HTML +  Ajax== 来替代。Ajax 是我们后续会重点学习的技术。有个这个技术后，前端工程师负责前端页面开发，而后端工程师只负责前端代码开发。下来对技术的发展进行简单的说明</p><p><img src="/../images/JavaWeb%E7%9F%A5%E8%AF%86%E7%AC%94%E8%AE%B0%E2%80%94%E2%80%94JSP/image-20210818150346332.png"></p><ol><li><p>第一阶段：使用 <code>servlet</code> 即实现逻辑代码编写，也对页面进行拼接。这种模式我们之前也接触过</p></li><li><p>第二阶段：随着技术的发展，出现了 <code>JSP</code> ，人们发现 <code>JSP</code> 使用起来比 <code>Servlet</code> 方便很多，但是还是要在 <code>JSP</code> 中嵌套 <code>Java</code> 代码，也不利于后期的维护</p></li><li><p>第三阶段：使用 <code>Servlet</code> 进行逻辑代码开发，而使用 <code>JSP</code> 进行数据展示</p><p><img src="/../images/JavaWeb%E7%9F%A5%E8%AF%86%E7%AC%94%E8%AE%B0%E2%80%94%E2%80%94JSP/image-20210818150346332.png"></p></li><li><p>第四阶段：使用 <code>servlet</code> 进行后端逻辑代码开发，而使用 <code>HTML</code> 进行数据展示。而这里面就存在问题，<code>HTML</code> 是静态页面，怎么进行动态数据展示呢？这就是 <code>ajax</code> 的作用了。</p></li></ol><p>那既然 JSP 已经逐渐的退出历史舞台，那我们为什么还要学习 <code>JSP</code> 呢？原因有两点：</p><ul><li>一些公司可能有些老项目还在用 <code>JSP</code> ，所以要求我们必须动 <code>JSP</code></li><li>我们如果不经历这些复杂的过程，就不能体现后面阶段开发的简单</li></ul><p>接下来我们来学习第三阶段，使用 <code>EL表达式</code> 和 <code>JSTL</code> 标签库替换 <code>JSP</code> 中的 <code>Java</code> 代码。</p><h2 id="5，EL-表达式"><a href="#5，EL-表达式" class="headerlink" title="5，EL 表达式"></a>5，EL 表达式</h2><h3 id="5-1-概述"><a href="#5-1-概述" class="headerlink" title="5.1  概述"></a>5.1  概述</h3><p>EL（全称Expression Language ）表达式语言，用于简化 JSP 页面内的 Java 代码。</p><p>EL 表达式的主要作用是 ==获取数据==。其实就是从域对象中获取数据，然后将数据展示在页面上。</p><p>而 EL 表达式的语法也比较简单，==${expression}== 。例如：${brands} 就是获取域中存储的 key 为 brands 的数据。</p><h3 id="5-2-代码演示"><a href="#5-2-代码演示" class="headerlink" title="5.2  代码演示"></a>5.2  代码演示</h3><ul><li><p>定义servlet，在 servlet 中封装一些数据并存储到 request 域对象中并转发到 <code>el-demo.jsp</code> 页面。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@WebServlet</span><span class="token punctuation">(</span><span class="token string">"/demo1"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ServletDemo1</span> <span class="token keyword">extends</span> <span class="token class-name">HttpServlet</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doGet</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>        <span class="token comment">//1. 准备数据</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Brand</span><span class="token punctuation">&gt;</span></span> brands <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Brand</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        brands<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Brand</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">"三只松鼠"</span><span class="token punctuation">,</span><span class="token string">"三只松鼠"</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">,</span><span class="token string">"三只松鼠，好吃不上火"</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        brands<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Brand</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token string">"优衣库"</span><span class="token punctuation">,</span><span class="token string">"优衣库"</span><span class="token punctuation">,</span><span class="token number">200</span><span class="token punctuation">,</span><span class="token string">"优衣库，服适人生"</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        brands<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Brand</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token string">"小米"</span><span class="token punctuation">,</span><span class="token string">"小米科技有限公司"</span><span class="token punctuation">,</span><span class="token number">1000</span><span class="token punctuation">,</span><span class="token string">"为发烧而生"</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//2. 存储到request域中</span>        request<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">"brands"</span><span class="token punctuation">,</span>brands<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//3. 转发到 el-demo.jsp</span>        request<span class="token punctuation">.</span><span class="token function">getRequestDispatcher</span><span class="token punctuation">(</span><span class="token string">"/el-demo.jsp"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forward</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span>response<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doPost</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">doGet</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>==注意：== 此处需要用转发，因为转发才可以使用 request 对象作为域对象进行数据共享</p></blockquote></li><li><p>在 <code>el-demo.jsp</code> 中通过 EL表达式 获取数据</p><pre class="line-numbers language-jsp" data-language="jsp"><code class="language-jsp">&lt;%@ page contentType="text/html;charset=UTF-8" language="java" %&gt;&lt;html&gt;&lt;head&gt;    &lt;title&gt;Title&lt;/title&gt;&lt;/head&gt;&lt;body&gt;    ${brands}&lt;/body&gt;&lt;/html&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>在浏览器的地址栏输入 <code>http://localhost:8080/jsp-demo/demo1</code> ，页面效果如下：</p><p><img src="/../images/JavaWeb%E7%9F%A5%E8%AF%86%E7%AC%94%E8%AE%B0%E2%80%94%E2%80%94JSP/image-20210818150346332.png"></p></li></ul><h3 id="5-3-域对象"><a href="#5-3-域对象" class="headerlink" title="5.3  域对象"></a>5.3  域对象</h3><p>JavaWeb中有四大域对象，分别是：</p><ul><li>page：当前页面有效</li><li>request：当前请求有效</li><li>session：当前会话有效</li><li>application：当前应用有效</li></ul><p>el 表达式获取数据，会依次从这4个域中寻找，直到找到为止。而这四个域对象的作用范围如下图所示</p><p> <img src="/../images/JavaWeb%E7%9F%A5%E8%AF%86%E7%AC%94%E8%AE%B0%E2%80%94%E2%80%94JSP/image-20210818152857407.png"></p><p>例如： ${brands}，el 表达式获取数据，会先从page域对象中获取数据，如果没有再到 requet 域对象中获取数据，如果再没有再到 session 域对象中获取，如果还没有才会到 application 中获取数据。</p><h2 id="6，JSTL标签"><a href="#6，JSTL标签" class="headerlink" title="6，JSTL标签"></a>6，JSTL标签</h2><h3 id="6-1-概述"><a href="#6-1-概述" class="headerlink" title="6.1  概述"></a>6.1  概述</h3><p>JSP标准标签库(Jsp Standarded Tag Library) ，使用标签取代JSP页面上的Java代码。如下代码就是JSTL标签</p><pre class="line-numbers language-jsp" data-language="jsp"><code class="language-jsp">&lt;c:if test="${flag == 1}"&gt;    男&lt;/c:if&gt;&lt;c:if test="${flag == 2}"&gt;    女&lt;/c:if&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面代码看起来是不是比 JSP 中嵌套 Java 代码看起来舒服好了。而且前端工程师对标签是特别敏感的，他们看到这段代码是能看懂的。</p><p>JSTL 提供了很多标签，如下图</p><p><img src="/../images/JavaWeb%E7%9F%A5%E8%AF%86%E7%AC%94%E8%AE%B0%E2%80%94%E2%80%94JSP/image-20210818153646575.png"></p><p>我们只对两个最常用的标签进行讲解，<code>&lt;c:forEach&gt;</code> 标签和 <code>&lt;c:if&gt;</code> 标签。</p><p>JSTL 使用也是比较简单的，分为如下步骤：</p><ul><li><p>导入坐标</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>jstl<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>jstl<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>1.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>taglibs<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>standard<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>1.1.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>在JSP页面上引入JSTL标签库</p><pre class="line-numbers language-jsp" data-language="jsp"><code class="language-jsp">&lt;%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core" %&gt; <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>使用标签</p></li></ul><h3 id="6-2-if-标签"><a href="#6-2-if-标签" class="headerlink" title="6.2  if 标签"></a>6.2  if 标签</h3><p><code>&lt;c:if&gt;</code>：相当于 if 判断</p><ul><li>属性：test，用于定义条件表达式</li></ul><pre class="line-numbers language-jsp" data-language="jsp"><code class="language-jsp">&lt;c:if test="${flag == 1}"&gt;    男&lt;/c:if&gt;&lt;c:if test="${flag == 2}"&gt;    女&lt;/c:if&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>代码演示：</strong></p><ul><li><p>定义一个 <code>servlet</code> ，在该 <code>servlet</code> 中向 request 域对象中添加 键是 <code>status</code> ，值为 <code>1</code> 的数据</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@WebServlet</span><span class="token punctuation">(</span><span class="token string">"/demo2"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ServletDemo2</span> <span class="token keyword">extends</span> <span class="token class-name">HttpServlet</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doGet</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>        <span class="token comment">//1. 存储数据到request域中</span>        request<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">"status"</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//2. 转发到 jstl-if.jsp</span>        数据request<span class="token punctuation">.</span><span class="token function">getRequestDispatcher</span><span class="token punctuation">(</span><span class="token string">"/jstl-if.jsp"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forward</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span>response<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doPost</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">doGet</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>定义 <code>jstl-if.jsp</code> 页面，在该页面使用 <code>&lt;c:if&gt;</code> 标签</p><pre class="line-numbers language-jsp" data-language="jsp"><code class="language-jsp">&lt;%@ page contentType="text/html;charset=UTF-8" language="java" %&gt;&lt;%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core" %&gt;&lt;html&gt;&lt;head&gt;    &lt;title&gt;Title&lt;/title&gt;&lt;/head&gt;&lt;body&gt;    &lt;%--        c:if：来完成逻辑判断，替换java  if else    --%&gt;    &lt;c:if test="${status ==1}"&gt;        启用    &lt;/c:if&gt;    &lt;c:if test="${status ==0}"&gt;        禁用    &lt;/c:if&gt;&lt;/body&gt;&lt;/html&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>==注意：== 在该页面已经要引入 JSTL核心标签库</p><p><code>&lt;%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core" %&gt;</code></p></blockquote></li></ul><h3 id="6-3-forEach-标签"><a href="#6-3-forEach-标签" class="headerlink" title="6.3  forEach 标签"></a>6.3  forEach 标签</h3><p><code>&lt;c:forEach&gt;</code>：相当于 for 循环。java中有增强for循环和普通for循环，JSTL 中的 <code>&lt;c:forEach&gt;</code> 也有两种用法</p><h4 id="6-3-1-用法一"><a href="#6-3-1-用法一" class="headerlink" title="6.3.1  用法一"></a>6.3.1  用法一</h4><p>类似于 Java 中的增强for循环。涉及到的 <code>&lt;c:forEach&gt;</code> 中的属性如下</p><ul><li><p>items：被遍历的容器</p></li><li><p>var：遍历产生的临时变量</p></li><li><p>varStatus：遍历状态对象</p></li></ul><p>如下代码，是从域对象中获取名为 brands 数据，该数据是一个集合；遍历遍历，并给该集合中的每一个元素起名为 <code>brand</code>，是 Brand对象。在循环里面使用 EL表达式获取每一个Brand对象的属性值</p><pre class="line-numbers language-jsp" data-language="jsp"><code class="language-jsp">&lt;c:forEach items="${brands}" var="brand"&gt;    &lt;tr align="center"&gt;        &lt;td&gt;${brand.id}&lt;/td&gt;        &lt;td&gt;${brand.brandName}&lt;/td&gt;        &lt;td&gt;${brand.companyName}&lt;/td&gt;        &lt;td&gt;${brand.description}&lt;/td&gt;    &lt;/tr&gt;&lt;/c:forEach&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>代码演示：</strong></p><ul><li><p><code>servlet</code> 还是使用之前的名为 <code>ServletDemo1</code> 。</p></li><li><p>定义名为 <code>jstl-foreach.jsp</code> 页面，内容如下：</p><pre class="line-numbers language-jsp" data-language="jsp"><code class="language-jsp">&lt;%@ page contentType="text/html;charset=UTF-8" language="java" %&gt;&lt;%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core" %&gt;&lt;!DOCTYPE html&gt;&lt;html lang="en"&gt;&lt;head&gt;    &lt;meta charset="UTF-8"&gt;    &lt;title&gt;Title&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;input type="button" value="新增"&gt;&lt;br&gt;&lt;hr&gt;&lt;table border="1" cellspacing="0" width="800"&gt;    &lt;tr&gt;        &lt;th&gt;序号&lt;/th&gt;        &lt;th&gt;品牌名称&lt;/th&gt;        &lt;th&gt;企业名称&lt;/th&gt;        &lt;th&gt;排序&lt;/th&gt;        &lt;th&gt;品牌介绍&lt;/th&gt;        &lt;th&gt;状态&lt;/th&gt;        &lt;th&gt;操作&lt;/th&gt;    &lt;/tr&gt;    &lt;c:forEach items="${brands}" var="brand" varStatus="status"&gt;        &lt;tr align="center"&gt;            &lt;%--&lt;td&gt;${brand.id}&lt;/td&gt;--%&gt;            &lt;td&gt;${status.count}&lt;/td&gt;            &lt;td&gt;${brand.brandName}&lt;/td&gt;            &lt;td&gt;${brand.companyName}&lt;/td&gt;            &lt;td&gt;${brand.ordered}&lt;/td&gt;            &lt;td&gt;${brand.description}&lt;/td&gt;            &lt;c:if test="${brand.status == 1}"&gt;                &lt;td&gt;启用&lt;/td&gt;            &lt;/c:if&gt;            &lt;c:if test="${brand.status != 1}"&gt;                &lt;td&gt;禁用&lt;/td&gt;            &lt;/c:if&gt;            &lt;td&gt;&lt;a href="#"&gt;修改&lt;/a&gt; &lt;a href="#"&gt;删除&lt;/a&gt;&lt;/td&gt;        &lt;/tr&gt;    &lt;/c:forEach&gt;&lt;/table&gt;&lt;/body&gt;&lt;/html&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h4 id="6-3-2-用法二"><a href="#6-3-2-用法二" class="headerlink" title="6.3.2  用法二"></a>6.3.2  用法二</h4><p>类似于 Java 中的普通for循环。涉及到的 <code>&lt;c:forEach&gt;</code> 中的属性如下</p><ul><li><p>begin：开始数</p></li><li><p>end：结束数</p></li><li><p>step：步长</p></li></ul><p>实例代码：</p><p>从0循环到10，变量名是 <code>i</code> ，每次自增1</p><pre class="line-numbers language-jsp" data-language="jsp"><code class="language-jsp">&lt;c:forEach begin="0" end="10" step="1" var="i"&gt;    ${i}&lt;/c:forEach&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="7，MVC模式和三层架构"><a href="#7，MVC模式和三层架构" class="headerlink" title="7，MVC模式和三层架构"></a>7，MVC模式和三层架构</h2><p>MVC 模式和三层架构是一些理论的知识，将来我们使用了它们进行代码开发会让我们代码维护性和扩展性更好。</p><h3 id="7-1-MVC模式"><a href="#7-1-MVC模式" class="headerlink" title="7.1  MVC模式"></a>7.1  MVC模式</h3><p>MVC 是一种分层开发的模式，其中：</p><ul><li><p>M：Model，业务模型，处理业务</p></li><li><p>V：View，视图，界面展示</p></li><li><p>C：Controller，控制器，处理请求，调用模型和视图</p></li></ul><p><img src="/../images/JavaWeb%E7%9F%A5%E8%AF%86%E7%AC%94%E8%AE%B0%E2%80%94%E2%80%94JSP/image-20210818163348642.png"></p><p>控制器（serlvlet）用来接收浏览器发送过来的请求，控制器调用模型（JavaBean）来获取数据，比如从数据库查询数据；控制器获取到数据后再交由视图（JSP）进行数据展示。</p><p><strong>MVC 好处：</strong></p><ul><li><p>职责单一，互不影响。每个角色做它自己的事，各司其职。</p></li><li><p>有利于分工协作。</p></li><li><p>有利于组件重用</p></li></ul><h3 id="7-2-三层架构"><a href="#7-2-三层架构" class="headerlink" title="7.2  三层架构"></a>7.2  三层架构</h3><p>三层架构是将我们的项目分成了三个层面，分别是 <code>表现层</code>、<code>业务逻辑层</code>、<code>数据访问层</code>。</p><p><img src="/../images/JavaWeb%E7%9F%A5%E8%AF%86%E7%AC%94%E8%AE%B0%E2%80%94%E2%80%94JSP/image-20210818164301154.png"></p><ul><li>数据访问层：对数据库的CRUD基本操作</li><li>业务逻辑层：对业务逻辑进行封装，组合数据访问层层中基本功能，形成复杂的业务逻辑功能。例如 <code>注册业务功能</code> ，我们会先调用 <code>数据访问层</code> 的 <code>selectByName()</code> 方法判断该用户名是否存在，如果不存在再调用 <code>数据访问层</code> 的 <code>insert()</code> 方法进行数据的添加操作</li><li>表现层：接收请求，封装数据，调用业务逻辑层，响应数据</li></ul><p>而整个流程是，浏览器发送请求，表现层的Servlet接收请求并调用业务逻辑层的方法进行业务逻辑处理，而业务逻辑层方法调用数据访问层方法进行数据的操作，依次返回到serlvet，然后servlet将数据交由 JSP 进行展示。</p><p>三层架构的每一层都有特有的包名称：</p><ul><li>表现层： <code>com.itheima.controller</code> 或者 <code>com.itheima.web</code></li><li>业务逻辑层：<code>com.itheima.service</code></li><li>数据访问层：<code>com.itheima.dao</code> 或者 <code>com.itheima.mapper</code></li></ul><p>后期我们还会学习一些框架，不同的框架是对不同层进行封装的</p><p><img src="/../images/JavaWeb%E7%9F%A5%E8%AF%86%E7%AC%94%E8%AE%B0%E2%80%94%E2%80%94JSP/image-20210818165439826.png"></p><h3 id="7-3-MVC-和-三层架构"><a href="#7-3-MVC-和-三层架构" class="headerlink" title="7.3  MVC 和 三层架构"></a>7.3  MVC 和 三层架构</h3><p>通过 MVC 和 三层架构 的学习，有些人肯定混淆了。那他们有什么区别和联系？</p><p><img src="/../images/JavaWeb%E7%9F%A5%E8%AF%86%E7%AC%94%E8%AE%B0%E2%80%94%E2%80%94JSP/image-20210818165808589.png"></p><p>如上图上半部分是 MVC 模式，上图下半部分是三层架构。 <code>MVC 模式</code> 中的 C（控制器）和 V（视图）就是 <code>三层架构</code> 中的表现层，而 <code>MVC 模式</code> 中的 M（模型）就是 <code>三层架构</code> 中的 业务逻辑层 和 数据访问层。</p><p>可以将 <code>MVC 模式</code> 理解成是一个大的概念，而 <code>三层架构</code> 是对 <code>MVC 模式</code> 实现架构的思想。 那么我们以后按照要求将不同层的代码写在不同的包下，每一层里功能职责做到单一，将来如果将表现层的技术换掉，而业务逻辑层和数据访问层的代码不需要发生变化。</p><h2 id="8，案例"><a href="#8，案例" class="headerlink" title="8，案例"></a>8，案例</h2><p><strong>需求：完成品牌数据的增删改查操作</strong></p><p><img src="/../images/JavaWeb%E7%9F%A5%E8%AF%86%E7%AC%94%E8%AE%B0%E2%80%94%E2%80%94JSP/image-20210818171702401.png"></p><p>这个功能我们之前一直在做，而这个案例是将今天学习的所有的内容（包含 MVC模式 和 三层架构）进行应用，并将整个流程贯穿起来。</p><h3 id="8-1-环境准备"><a href="#8-1-环境准备" class="headerlink" title="8.1  环境准备"></a>8.1  环境准备</h3><p>环境准备工作，我们分以下步骤实现：</p><ul><li><p>创建新的模块 brand_demo，引入坐标</p></li><li><p>创建三层架构的包结构</p></li><li><p>数据库表 tb_brand</p></li><li><p>实体类 Brand</p></li><li><p>MyBatis 基础环境</p><ul><li><p>Mybatis-config.xml</p></li><li><p>BrandMapper.xml</p></li><li><p>BrandMapper接口</p></li></ul></li></ul><h4 id="8-1-1-创建工程"><a href="#8-1-1-创建工程" class="headerlink" title="8.1.1  创建工程"></a>8.1.1  创建工程</h4><p>创建新的模块 brand_demo，引入坐标。我们只要分析出要用到哪儿些技术，那么需要哪儿些坐标也就明确了</p><ul><li>需要操作数据库。mysql的驱动包</li><li>要使用mybatis框架。mybaits的依赖包</li><li>web项目需要用到servlet和jsp。servlet和jsp的依赖包</li><li>需要使用 jstl 进行数据展示。jstl的依赖包</li></ul><p><code>pom.xml</code> 内容如下：</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>project</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>modelVersion</span><span class="token punctuation">&gt;</span></span>4.0.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>modelVersion</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.example<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>brand-demo<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>1.0-SNAPSHOT<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>packaging</span><span class="token punctuation">&gt;</span></span>war<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>packaging</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>properties</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>maven.compiler.source</span><span class="token punctuation">&gt;</span></span>8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>maven.compiler.source</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>maven.compiler.target</span><span class="token punctuation">&gt;</span></span>8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>maven.compiler.target</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>properties</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">&gt;</span></span>        <span class="token comment">&lt;!-- mybatis --&gt;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.mybatis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>mybatis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>3.5.5<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token comment">&lt;!--mysql--&gt;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>mysql<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>mysql-connector-java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>5.1.34<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token comment">&lt;!--servlet--&gt;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>javax.servlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>javax.servlet-api<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>3.1.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">&gt;</span></span>provided<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token comment">&lt;!--jsp--&gt;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>javax.servlet.jsp<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>jsp-api<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>2.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">&gt;</span></span>provided<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token comment">&lt;!--jstl--&gt;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>jstl<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>jstl<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>1.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>taglibs<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>standard<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>1.1.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>build</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugins</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.apache.tomcat.maven<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>tomcat7-maven-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>2.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugins</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>build</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>project</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="8-1-2-创建包"><a href="#8-1-2-创建包" class="headerlink" title="8.1.2  创建包"></a>8.1.2  创建包</h4><p>创建不同的包结构，用来存储不同的类。包结构如下</p><p><img src="/../images/JavaWeb%E7%9F%A5%E8%AF%86%E7%AC%94%E8%AE%B0%E2%80%94%E2%80%94JSP/image-20210818173155335.png"></p><h4 id="8-1-3-创建表"><a href="#8-1-3-创建表" class="headerlink" title="8.1.3  创建表"></a>8.1.3  创建表</h4><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 删除tb_brand表</span><span class="token keyword">drop</span> <span class="token keyword">table</span> <span class="token keyword">if</span> <span class="token keyword">exists</span> tb_brand<span class="token punctuation">;</span><span class="token comment">-- 创建tb_brand表</span><span class="token keyword">create</span> <span class="token keyword">table</span> tb_brand<span class="token punctuation">(</span>    <span class="token comment">-- id 主键</span>    id           <span class="token keyword">int</span> <span class="token keyword">primary</span> <span class="token keyword">key</span> <span class="token keyword">auto_increment</span><span class="token punctuation">,</span>    <span class="token comment">-- 品牌名称</span>    brand_name   <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token comment">-- 企业名称</span>    company_name <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token comment">-- 排序字段</span>    ordered      <span class="token keyword">int</span><span class="token punctuation">,</span>    <span class="token comment">-- 描述信息</span>    description  <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token comment">-- 状态：0：禁用  1：启用</span>    <span class="token keyword">status</span>       <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">-- 添加数据</span><span class="token keyword">insert</span> <span class="token keyword">into</span> tb_brand <span class="token punctuation">(</span>brand_name<span class="token punctuation">,</span> company_name<span class="token punctuation">,</span> ordered<span class="token punctuation">,</span> description<span class="token punctuation">,</span> <span class="token keyword">status</span><span class="token punctuation">)</span><span class="token keyword">values</span> <span class="token punctuation">(</span><span class="token string">'三只松鼠'</span><span class="token punctuation">,</span> <span class="token string">'三只松鼠股份有限公司'</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token string">'好吃不上火'</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span>       <span class="token punctuation">(</span><span class="token string">'华为'</span><span class="token punctuation">,</span> <span class="token string">'华为技术有限公司'</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token string">'华为致力于把数字世界带入每个人、每个家庭、每个组织，构建万物互联的智能世界'</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>       <span class="token punctuation">(</span><span class="token string">'小米'</span><span class="token punctuation">,</span> <span class="token string">'小米科技有限公司'</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">,</span> <span class="token string">'are you ok'</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="8-1-4-创建实体类"><a href="#8-1-4-创建实体类" class="headerlink" title="8.1.4  创建实体类"></a>8.1.4  创建实体类</h4><p>在 <code>pojo</code> 包下创建名为 <code>Brand</code> 的类。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Brand</span> <span class="token punctuation">{</span>    <span class="token comment">// id 主键</span>    <span class="token keyword">private</span> <span class="token class-name">Integer</span> id<span class="token punctuation">;</span>    <span class="token comment">// 品牌名称</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> brandName<span class="token punctuation">;</span>    <span class="token comment">// 企业名称</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> companyName<span class="token punctuation">;</span>    <span class="token comment">// 排序字段</span>    <span class="token keyword">private</span> <span class="token class-name">Integer</span> ordered<span class="token punctuation">;</span>    <span class="token comment">// 描述信息</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> description<span class="token punctuation">;</span>    <span class="token comment">// 状态：0：禁用  1：启用</span>    <span class="token keyword">private</span> <span class="token class-name">Integer</span> status<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">Brand</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token class-name">Brand</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> id<span class="token punctuation">,</span> <span class="token class-name">String</span> brandName<span class="token punctuation">,</span> <span class="token class-name">String</span> companyName<span class="token punctuation">,</span> <span class="token class-name">String</span> description<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">=</span> id<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>brandName <span class="token operator">=</span> brandName<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>companyName <span class="token operator">=</span> companyName<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>description <span class="token operator">=</span> description<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token class-name">Brand</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> id<span class="token punctuation">,</span> <span class="token class-name">String</span> brandName<span class="token punctuation">,</span> <span class="token class-name">String</span> companyName<span class="token punctuation">,</span> <span class="token class-name">Integer</span> ordered<span class="token punctuation">,</span> <span class="token class-name">String</span> description<span class="token punctuation">,</span> <span class="token class-name">Integer</span> status<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">=</span> id<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>brandName <span class="token operator">=</span> brandName<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>companyName <span class="token operator">=</span> companyName<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>ordered <span class="token operator">=</span> ordered<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>description <span class="token operator">=</span> description<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>status <span class="token operator">=</span> status<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token class-name">Integer</span> <span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> id<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setId</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> id<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">=</span> id<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getBrandName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> brandName<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setBrandName</span><span class="token punctuation">(</span><span class="token class-name">String</span> brandName<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>brandName <span class="token operator">=</span> brandName<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getCompanyName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> companyName<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setCompanyName</span><span class="token punctuation">(</span><span class="token class-name">String</span> companyName<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>companyName <span class="token operator">=</span> companyName<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token class-name">Integer</span> <span class="token function">getOrdered</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> ordered<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setOrdered</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> ordered<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>ordered <span class="token operator">=</span> ordered<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getDescription</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> description<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setDescription</span><span class="token punctuation">(</span><span class="token class-name">String</span> description<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>description <span class="token operator">=</span> description<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token class-name">Integer</span> <span class="token function">getStatus</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> status<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setStatus</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> status<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>status <span class="token operator">=</span> status<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"Brand{"</span> <span class="token operator">+</span>                <span class="token string">"id="</span> <span class="token operator">+</span> id <span class="token operator">+</span>                <span class="token string">", brandName='"</span> <span class="token operator">+</span> brandName <span class="token operator">+</span> <span class="token char">'\''</span> <span class="token operator">+</span>                <span class="token string">", companyName='"</span> <span class="token operator">+</span> companyName <span class="token operator">+</span> <span class="token char">'\''</span> <span class="token operator">+</span>                <span class="token string">", ordered="</span> <span class="token operator">+</span> ordered <span class="token operator">+</span>                <span class="token string">", description='"</span> <span class="token operator">+</span> description <span class="token operator">+</span> <span class="token char">'\''</span> <span class="token operator">+</span>                <span class="token string">", status="</span> <span class="token operator">+</span> status <span class="token operator">+</span>                <span class="token char">'}'</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="8-1-5-准备mybatis环境"><a href="#8-1-5-准备mybatis环境" class="headerlink" title="8.1.5   准备mybatis环境"></a>8.1.5   准备mybatis环境</h4><p>定义核心配置文件 <code>Mybatis-config.xml</code> ，并将该文件放置在 <code>resources</code> 下</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">configuration</span>        <span class="token name">PUBLIC</span> <span class="token string">"-//mybatis.org//DTD Config 3.0//EN"</span>        <span class="token string">"http://mybatis.org/dtd/mybatis-3-config.dtd"</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!--起别名--&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>typeAliases</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>package</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.itheima.pojo<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>typeAliases</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>environments</span> <span class="token attr-name">default</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>development<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>environment</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>development<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>transactionManager</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>JDBC<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dataSource</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>POOLED<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>driver<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.mysql.jdbc.Driver<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>url<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>jdbc:mysql:///db1?useSSL=false<span class="token entity named-entity" title="&amp;">&amp;amp;</span>useServerPrepStmts=true<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>root<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>1234<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dataSource</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>environment</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>environments</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mappers</span><span class="token punctuation">&gt;</span></span>        <span class="token comment">&lt;!--扫描mapper--&gt;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>package</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.itheima.mapper<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mappers</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在 <code>resources</code> 下创建放置映射配置文件的目录结构 <code>com/itheima/mapper</code>，并在该目录下创建映射配置文件 <code>BrandMapper.xml</code></p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">mapper</span>        <span class="token name">PUBLIC</span> <span class="token string">"-//mybatis.org//DTD Mapper 3.0//EN"</span>        <span class="token string">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mapper</span> <span class="token attr-name">namespace</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.itheima.mapper.BrandMapper<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mapper</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="8-2-查询所有"><a href="#8-2-查询所有" class="headerlink" title="8.2  查询所有"></a>8.2  查询所有</h3><p><img src="/../images/JavaWeb%E7%9F%A5%E8%AF%86%E7%AC%94%E8%AE%B0%E2%80%94%E2%80%94JSP/image-20210818174441917.png"></p><p>当我们点击 <code>index.html</code> 页面中的 <code>查询所有</code> 这个超链接时，就能查询到上图右半部分的数据。</p><p>对于上述的功能，点击 <code>查询所有</code> 超链接是需要先请后端的 <code>servlet</code> ，由 <code>servlet</code> 跳转到对应的页面进行数据的动态展示。而整个流程如下图：</p><p><img src="/../images/JavaWeb%E7%9F%A5%E8%AF%86%E7%AC%94%E8%AE%B0%E2%80%94%E2%80%94JSP/image-20210818174800783.png"></p><h4 id="8-2-1-编写BrandMapper"><a href="#8-2-1-编写BrandMapper" class="headerlink" title="8.2.1  编写BrandMapper"></a>8.2.1  编写BrandMapper</h4><p>在 <code>mapper</code> 包下创建创建 <code>BrandMapper</code> 接口，在接口中定义 <code>selectAll()</code> 方法</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/**  * 查询所有  * @return  */</span><span class="token annotation punctuation">@Select</span><span class="token punctuation">(</span><span class="token string">"select * from tb_brand"</span><span class="token punctuation">)</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Brand</span><span class="token punctuation">&gt;</span></span> <span class="token function">selectAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="8-2-2-编写工具类"><a href="#8-2-2-编写工具类" class="headerlink" title="8.2.2  编写工具类"></a>8.2.2  编写工具类</h4><p>在 <code>com.itheima</code> 包下创建 <code>utils</code> 包，并在该包下创建名为 <code>SqlSessionFactoryUtils</code> 工具类</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SqlSessionFactoryUtils</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">SqlSessionFactory</span> sqlSessionFactory<span class="token punctuation">;</span>    <span class="token keyword">static</span> <span class="token punctuation">{</span>        <span class="token comment">//静态代码块会随着类的加载而自动执行，且只执行一次</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token class-name">String</span> resource <span class="token operator">=</span> <span class="token string">"mybatis-config.xml"</span><span class="token punctuation">;</span>            <span class="token class-name">InputStream</span> inputStream <span class="token operator">=</span> <span class="token class-name">Resources</span><span class="token punctuation">.</span><span class="token function">getResourceAsStream</span><span class="token punctuation">(</span>resource<span class="token punctuation">)</span><span class="token punctuation">;</span>            sqlSessionFactory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SqlSessionFactoryBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span>inputStream<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">SqlSessionFactory</span> <span class="token function">getSqlSessionFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> sqlSessionFactory<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="8-2-3-编写BrandService"><a href="#8-2-3-编写BrandService" class="headerlink" title="8.2.3  编写BrandService"></a>8.2.3  编写BrandService</h4><p>在 <code>service</code> 包下创建 <code>BrandService</code> 类</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BrandService</span> <span class="token punctuation">{</span>    <span class="token class-name">SqlSessionFactory</span> factory <span class="token operator">=</span> <span class="token class-name">SqlSessionFactoryUtils</span><span class="token punctuation">.</span><span class="token function">getSqlSessionFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">/**     * 查询所有     * @return     */</span>    <span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Brand</span><span class="token punctuation">&gt;</span></span> <span class="token function">selectAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment">//调用BrandMapper.selectAll()</span>        <span class="token comment">//2. 获取SqlSession</span>        <span class="token class-name">SqlSession</span> sqlSession <span class="token operator">=</span> factory<span class="token punctuation">.</span><span class="token function">openSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//3. 获取BrandMapper</span>        <span class="token class-name">BrandMapper</span> mapper <span class="token operator">=</span> sqlSession<span class="token punctuation">.</span><span class="token function">getMapper</span><span class="token punctuation">(</span><span class="token class-name">BrandMapper</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//4. 调用方法</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Brand</span><span class="token punctuation">&gt;</span></span> brands <span class="token operator">=</span> mapper<span class="token punctuation">.</span><span class="token function">selectAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        sqlSession<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> brands<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="8-2-4-编写Servlet"><a href="#8-2-4-编写Servlet" class="headerlink" title="8.2.4  编写Servlet"></a>8.2.4  编写Servlet</h4><p>在 <code>web</code> 包下创建名为 <code>SelectAllServlet</code> 的 <code>servlet</code>，该 <code>servlet</code> 的逻辑如下：</p><ul><li>调用 <code>BrandService</code> 的 <code>selectAll()</code> 方法进行业务逻辑处理，并接收返回的结果</li><li>将上一步返回的结果存储到 <code>request</code> 域对象中</li><li>跳转到 <code>brand.jsp</code> 页面进行数据的展示</li></ul><p>具体的代码如下：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@WebServlet</span><span class="token punctuation">(</span><span class="token string">"/selectAllServlet"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SelectAllServlet</span> <span class="token keyword">extends</span> <span class="token class-name">HttpServlet</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span>  <span class="token class-name">BrandService</span> service <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BrandService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doGet</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>        <span class="token comment">//1. 调用BrandService完成查询</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Brand</span><span class="token punctuation">&gt;</span></span> brands <span class="token operator">=</span> service<span class="token punctuation">.</span><span class="token function">selectAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//2. 存入request域中</span>        request<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">"brands"</span><span class="token punctuation">,</span>brands<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//3. 转发到brand.jsp</span>        request<span class="token punctuation">.</span><span class="token function">getRequestDispatcher</span><span class="token punctuation">(</span><span class="token string">"/brand.jsp"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forward</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span>response<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doPost</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">doGet</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="8-2-5-编写brand-jsp页面"><a href="#8-2-5-编写brand-jsp页面" class="headerlink" title="8.2.5  编写brand.jsp页面"></a>8.2.5  编写brand.jsp页面</h4><p>将资料 <code>资料\2. 品牌增删改查案例\静态页面</code> 下的 <code>brand.html</code> 页面拷贝到项目的 <code>webapp</code> 目录下，并将该页面改成 <code>brand.jsp</code> 页面，而 <code>brand.jsp</code> 页面在表格中使用 <code>JSTL</code> 和 <code>EL表达式</code> 从request域对象中获取名为 <code>brands</code> 的集合数据并展示出来。页面内容如下：</p><pre class="line-numbers language-jsp" data-language="jsp"><code class="language-jsp">&lt;%@ page contentType="text/html;charset=UTF-8" language="java" %&gt;&lt;%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core" %&gt;&lt;!DOCTYPE html&gt;&lt;html lang="en"&gt;&lt;head&gt;    &lt;meta charset="UTF-8"&gt;    &lt;title&gt;Title&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;hr&gt;&lt;table border="1" cellspacing="0" width="80%"&gt;    &lt;tr&gt;        &lt;th&gt;序号&lt;/th&gt;        &lt;th&gt;品牌名称&lt;/th&gt;        &lt;th&gt;企业名称&lt;/th&gt;        &lt;th&gt;排序&lt;/th&gt;        &lt;th&gt;品牌介绍&lt;/th&gt;        &lt;th&gt;状态&lt;/th&gt;        &lt;th&gt;操作&lt;/th&gt;    &lt;/tr&gt;    &lt;c:forEach items="${brands}" var="brand" varStatus="status"&gt;        &lt;tr align="center"&gt;            &lt;%--&lt;td&gt;${brand.id}&lt;/td&gt;--%&gt;            &lt;td&gt;${status.count}&lt;/td&gt;            &lt;td&gt;${brand.brandName}&lt;/td&gt;            &lt;td&gt;${brand.companyName}&lt;/td&gt;            &lt;td&gt;${brand.ordered}&lt;/td&gt;            &lt;td&gt;${brand.description}&lt;/td&gt;            &lt;c:if test="${brand.status == 1}"&gt;                &lt;td&gt;启用&lt;/td&gt;            &lt;/c:if&gt;            &lt;c:if test="${brand.status != 1}"&gt;                &lt;td&gt;禁用&lt;/td&gt;            &lt;/c:if&gt;            &lt;td&gt;&lt;a href="/brand-demo/selectByIdServlet?id=${brand.id}"&gt;修改&lt;/a&gt; &lt;a href="#"&gt;删除&lt;/a&gt;&lt;/td&gt;        &lt;/tr&gt;    &lt;/c:forEach&gt;&lt;/table&gt;&lt;/body&gt;&lt;/html&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="8-2-6-测试"><a href="#8-2-6-测试" class="headerlink" title="8.2.6  测试"></a>8.2.6  测试</h4><p>启动服务器，并在浏览器输入 <code>http://localhost:8080/brand-demo/index.html</code>，看到如下 <code>查询所有</code> 的超链接，点击该链接就可以查询出所有的品牌数据</p><p><img src="/../images/JavaWeb%E7%9F%A5%E8%AF%86%E7%AC%94%E8%AE%B0%E2%80%94%E2%80%94JSP/image-20210818182952394.png"></p><p>为什么出现这个问题呢？是因为查询到的字段名和实体类对象的属性名没有一一对应。相比看到这大家一定会解决了，就是在映射配置文件中使用 <code>resultMap</code> 标签定义映射关系。映射配置文件内容如下：</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">mapper</span>        <span class="token name">PUBLIC</span> <span class="token string">"-//mybatis.org//DTD Mapper 3.0//EN"</span>        <span class="token string">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mapper</span> <span class="token attr-name">namespace</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.itheima.mapper.BrandMapper<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resultMap</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>brandResultMap<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>brand<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>brand_name<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>brandName<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>result</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>company_name<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>companyName<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>result</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resultMap</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mapper</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>并且在 <code>BrandMapper</code> 接口中的 <code>selectAll()</code> 上使用 <code>@ResuleMap</code> 注解指定使用该映射</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/**  * 查询所有  * @return  */</span><span class="token annotation punctuation">@Select</span><span class="token punctuation">(</span><span class="token string">"select * from tb_brand"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@ResultMap</span><span class="token punctuation">(</span><span class="token string">"brandResultMap"</span><span class="token punctuation">)</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Brand</span><span class="token punctuation">&gt;</span></span> <span class="token function">selectAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>重启服务器，再次访问就能看到我们想要的数据了</p><p><img src="/../images/JavaWeb%E7%9F%A5%E8%AF%86%E7%AC%94%E8%AE%B0%E2%80%94%E2%80%94JSP/image-20210819190221889.png"></p><h3 id="8-3-添加"><a href="#8-3-添加" class="headerlink" title="8.3  添加"></a>8.3  添加</h3><p><img src="/../images/JavaWeb%E7%9F%A5%E8%AF%86%E7%AC%94%E8%AE%B0%E2%80%94%E2%80%94JSP/image-20210819192049571.png"></p><p>上图是做 添加 功能流程。点击 <code>新增</code> 按钮后，会先跳转到 <code>addBrand.jsp</code> 新增页面，在该页面输入要添加的数据，输入完毕后点击 <code>提交</code> 按钮，需要将数据提交到后端，而后端进行数据添加操作，并重新将所有的数据查询出来。整个流程如下：</p><p><img src="/../images/JavaWeb%E7%9F%A5%E8%AF%86%E7%AC%94%E8%AE%B0%E2%80%94%E2%80%94JSP/image-20210819192737982.png"></p><p>接下来我们根据流程来实现功能：</p><h4 id="8-3-1-编写BrandMapper方法"><a href="#8-3-1-编写BrandMapper方法" class="headerlink" title="8.3.1  编写BrandMapper方法"></a>8.3.1  编写BrandMapper方法</h4><p>在 <code>BrandMapper</code> 接口，在接口中定义 <code>add(Brand brand)</code> 方法</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Insert</span><span class="token punctuation">(</span><span class="token string">"insert into tb_brand values(null,#{brandName},#{companyName},#{ordered},#{description},#{status})"</span><span class="token punctuation">)</span><span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token class-name">Brand</span> brand<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="8-3-2-编写BrandService方法"><a href="#8-3-2-编写BrandService方法" class="headerlink" title="8.3.2  编写BrandService方法"></a>8.3.2  编写BrandService方法</h4><p>在 <code>BrandService</code> 类中定义添加品牌数据方法 <code>add(Brand brand)</code></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/**   * 添加   * @param brand   */</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token class-name">Brand</span> brand<span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token comment">//2. 获取SqlSession</span>      <span class="token class-name">SqlSession</span> sqlSession <span class="token operator">=</span> factory<span class="token punctuation">.</span><span class="token function">openSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">//3. 获取BrandMapper</span>      <span class="token class-name">BrandMapper</span> mapper <span class="token operator">=</span> sqlSession<span class="token punctuation">.</span><span class="token function">getMapper</span><span class="token punctuation">(</span><span class="token class-name">BrandMapper</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">//4. 调用方法</span>      mapper<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>brand<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">//提交事务</span>      sqlSession<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">//释放资源</span>      sqlSession<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="8-3-3-改进brand-jsp页面"><a href="#8-3-3-改进brand-jsp页面" class="headerlink" title="8.3.3  改进brand.jsp页面"></a>8.3.3  改进brand.jsp页面</h4><p>我们需要在该页面表格的上面添加 <code>新增</code> 按钮</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>新增<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>add<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>并给该按钮绑定单击事件，当点击了该按钮需要跳转到 <code>brand.jsp</code> 添加品牌数据的页面</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">    document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"add"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function-variable function">onclick</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        location<span class="token punctuation">.</span>href <span class="token operator">=</span> <span class="token string">"/brand-demo/addBrand.jsp"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>==注意：==该 <code>script</code> 标签建议放在 <code>body</code> 结束标签前面。</p></blockquote><h4 id="8-3-4-编写addBrand-jsp页面"><a href="#8-3-4-编写addBrand-jsp页面" class="headerlink" title="8.3.4  编写addBrand.jsp页面"></a>8.3.4  编写addBrand.jsp页面</h4><p>从资料 <code>资料\2. 品牌增删改查案例\静态页面</code> 中将 <code>addBrand.html</code> 页面拷贝到项目的 <code>webapp</code> 下，并改成 <code>addBrand.jsp</code> 动态页面</p><pre class="line-numbers language-jsp" data-language="jsp"><code class="language-jsp">&lt;%@ page contentType="text/html;charset=UTF-8" language="java" %&gt;&lt;!DOCTYPE html&gt;&lt;html lang="en"&gt;&lt;head&gt;    &lt;meta charset="UTF-8"&gt;    &lt;title&gt;添加品牌&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;h3&gt;添加品牌&lt;/h3&gt;&lt;form action="/brand-demo/addServlet" method="post"&gt;    品牌名称：&lt;input name="brandName"&gt;&lt;br&gt;    企业名称：&lt;input name="companyName"&gt;&lt;br&gt;    排序：&lt;input name="ordered"&gt;&lt;br&gt;    描述信息：&lt;textarea rows="5" cols="20" name="description"&gt;&lt;/textarea&gt;&lt;br&gt;    状态：    &lt;input type="radio" name="status" value="0"&gt;禁用    &lt;input type="radio" name="status" value="1"&gt;启用&lt;br&gt;    &lt;input type="submit" value="提交"&gt;&lt;/form&gt;&lt;/body&gt;&lt;/html&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="8-3-5-编写servlet"><a href="#8-3-5-编写servlet" class="headerlink" title="8.3.5  编写servlet"></a>8.3.5  编写servlet</h4><p>在 <code>web</code> 包下创建 <code>AddServlet</code> 的 <code>servlet</code>，该 <code>servlet</code> 的逻辑如下:</p><ul><li>设置处理post请求乱码的字符集</li><li>接收客户端提交的数据</li><li>将接收到的数据封装到 <code>Brand</code> 对象中</li><li>调用 <code>BrandService</code> 的<code>add()</code> 方法进行添加的业务逻辑处理</li><li>跳转到 <code>selectAllServlet</code> 资源重新查询数据</li></ul><p>具体的代码如下：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@WebServlet</span><span class="token punctuation">(</span><span class="token string">"/addServlet"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AddServlet</span> <span class="token keyword">extends</span> <span class="token class-name">HttpServlet</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">BrandService</span> service <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BrandService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doGet</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>        <span class="token comment">//处理POST请求的乱码问题</span>        request<span class="token punctuation">.</span><span class="token function">setCharacterEncoding</span><span class="token punctuation">(</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//1. 接收表单提交的数据，封装为一个Brand对象</span>        <span class="token class-name">String</span> brandName <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getParameter</span><span class="token punctuation">(</span><span class="token string">"brandName"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> companyName <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getParameter</span><span class="token punctuation">(</span><span class="token string">"companyName"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> ordered <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getParameter</span><span class="token punctuation">(</span><span class="token string">"ordered"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> description <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getParameter</span><span class="token punctuation">(</span><span class="token string">"description"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> status <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getParameter</span><span class="token punctuation">(</span><span class="token string">"status"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//封装为一个Brand对象</span>        <span class="token class-name">Brand</span> brand <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Brand</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        brand<span class="token punctuation">.</span><span class="token function">setBrandName</span><span class="token punctuation">(</span>brandName<span class="token punctuation">)</span><span class="token punctuation">;</span>        brand<span class="token punctuation">.</span><span class="token function">setCompanyName</span><span class="token punctuation">(</span>companyName<span class="token punctuation">)</span><span class="token punctuation">;</span>        brand<span class="token punctuation">.</span><span class="token function">setOrdered</span><span class="token punctuation">(</span><span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>ordered<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        brand<span class="token punctuation">.</span><span class="token function">setDescription</span><span class="token punctuation">(</span>description<span class="token punctuation">)</span><span class="token punctuation">;</span>        brand<span class="token punctuation">.</span><span class="token function">setStatus</span><span class="token punctuation">(</span><span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>status<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//2. 调用service 完成添加</span>        service<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>brand<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//3. 转发到查询所有Servlet</span>        request<span class="token punctuation">.</span><span class="token function">getRequestDispatcher</span><span class="token punctuation">(</span><span class="token string">"/selectAllServlet"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forward</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span>response<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doPost</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">doGet</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="8-3-6-测试"><a href="#8-3-6-测试" class="headerlink" title="8.3.6  测试"></a>8.3.6  测试</h4><p> 点击 <code>brand.jsp</code> 页面的 <code>新增</code> 按钮，会跳转到 <code>addBrand.jsp</code>页面</p><p><img src="/../images/JavaWeb%E7%9F%A5%E8%AF%86%E7%AC%94%E8%AE%B0%E2%80%94%E2%80%94JSP/image-20210819220701121.png"></p><p>点击 <code>提交</code> 按钮，就能看到如下页面，里面就包含我们刚添加的数据</p><p><img src="/../images/JavaWeb%E7%9F%A5%E8%AF%86%E7%AC%94%E8%AE%B0%E2%80%94%E2%80%94JSP/image-20210819220738074.png"></p><h3 id="8-4-修改"><a href="#8-4-修改" class="headerlink" title="8.4  修改"></a>8.4  修改</h3><p><img src="/../images/JavaWeb%E7%9F%A5%E8%AF%86%E7%AC%94%E8%AE%B0%E2%80%94%E2%80%94JSP/image-20210819223202473.png"></p><p>点击每条数据后面的 <code>编辑</code> 按钮会跳转到修改页面，如下图：</p><p><img src="/../images/JavaWeb%E7%9F%A5%E8%AF%86%E7%AC%94%E8%AE%B0%E2%80%94%E2%80%94JSP/image-20210819223314230.png"></p><p>在该修改页面我们可以看到将 <code>编辑</code> 按钮所在行的数据 ==回显== 到表单，然后需要修改那个数据在表单中进行修改，然后点击 <code>提交</code> 的按钮将数据提交到后端，后端再将数据存储到数据库中。</p><p>从上面的例子我们知道 <code>修改</code> 功能需要从两方面进行实现，数据回显和修改操作。</p><h4 id="8-4-1-回显数据"><a href="#8-4-1-回显数据" class="headerlink" title="8.4.1  回显数据"></a>8.4.1  回显数据</h4><p><img src="/../images/JavaWeb%E7%9F%A5%E8%AF%86%E7%AC%94%E8%AE%B0%E2%80%94%E2%80%94JSP/image-20210819223830713.png"></p><p>上图就是回显数据的效果。要实现这个效果，那当点击 <code>修改</code> 按钮时不能直接跳转到 <code>update.jsp</code> 页面，而是需要先带着当前行数据的 <code>id</code> 请求后端程序，后端程序根据 <code>id</code> 查询数据，将数据存储到域对象中跳转到 <code>update.jsp</code> 页面进行数据展示。整体流程如下</p><p><img src="/../images/JavaWeb%E7%9F%A5%E8%AF%86%E7%AC%94%E8%AE%B0%E2%80%94%E2%80%94JSP/image-20210819224243778.png"></p><h5 id="8-4-1-1-编写BrandMapper方法"><a href="#8-4-1-1-编写BrandMapper方法" class="headerlink" title="8.4.1.1  编写BrandMapper方法"></a>8.4.1.1  编写BrandMapper方法</h5><p>在 <code>BrandMapper</code> 接口，在接口中定义 <code>selectById(int id)</code> 方法</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/**    * 根据id查询    * @param id    * @return    */</span>   <span class="token annotation punctuation">@Select</span><span class="token punctuation">(</span><span class="token string">"select * from tb_brand where id = #{id}"</span><span class="token punctuation">)</span>   <span class="token annotation punctuation">@ResultMap</span><span class="token punctuation">(</span><span class="token string">"brandResultMap"</span><span class="token punctuation">)</span>   <span class="token class-name">Brand</span> <span class="token function">selectById</span><span class="token punctuation">(</span><span class="token keyword">int</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="8-4-1-2-编写BrandService方法"><a href="#8-4-1-2-编写BrandService方法" class="headerlink" title="8.4.1.2  编写BrandService方法"></a>8.4.1.2  编写BrandService方法</h5><p>在 <code>BrandService</code> 类中定义根据id查询数据方法 <code>selectById(int id)</code> </p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * 根据id查询 * @return */</span><span class="token keyword">public</span> <span class="token class-name">Brand</span> <span class="token function">selectById</span><span class="token punctuation">(</span><span class="token keyword">int</span> id<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment">//调用BrandMapper.selectAll()</span>    <span class="token comment">//2. 获取SqlSession</span>    <span class="token class-name">SqlSession</span> sqlSession <span class="token operator">=</span> factory<span class="token punctuation">.</span><span class="token function">openSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//3. 获取BrandMapper</span>    <span class="token class-name">BrandMapper</span> mapper <span class="token operator">=</span> sqlSession<span class="token punctuation">.</span><span class="token function">getMapper</span><span class="token punctuation">(</span><span class="token class-name">BrandMapper</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//4. 调用方法</span>    <span class="token class-name">Brand</span> brand <span class="token operator">=</span> mapper<span class="token punctuation">.</span><span class="token function">selectById</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>    sqlSession<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> brand<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="8-4-1-3-编写servlet"><a href="#8-4-1-3-编写servlet" class="headerlink" title="8.4.1.3  编写servlet"></a>8.4.1.3  编写servlet</h5><p>在 <code>web</code> 包下创建 <code>SelectByIdServlet</code> 的 <code>servlet</code>，该 <code>servlet</code> 的逻辑如下:</p><ul><li>获取请求数据 <code>id</code></li><li>调用 <code>BrandService</code> 的 <code>selectById()</code> 方法进行数据查询的业务逻辑</li><li>将查询到的数据存储到 request 域对象中</li><li>跳转到 <code>update.jsp</code> 页面进行数据真实</li></ul><p>具体代码如下：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@WebServlet</span><span class="token punctuation">(</span><span class="token string">"/selectByIdServlet"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SelectByIdServlet</span> <span class="token keyword">extends</span> <span class="token class-name">HttpServlet</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span>  <span class="token class-name">BrandService</span> service <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BrandService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doGet</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>        <span class="token comment">//1. 接收id</span>        <span class="token class-name">String</span> id <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getParameter</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//2. 调用service查询</span>        <span class="token class-name">Brand</span> brand <span class="token operator">=</span> service<span class="token punctuation">.</span><span class="token function">selectById</span><span class="token punctuation">(</span><span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//3. 存储到request中</span>        request<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">"brand"</span><span class="token punctuation">,</span>brand<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//4. 转发到update.jsp</span>        request<span class="token punctuation">.</span><span class="token function">getRequestDispatcher</span><span class="token punctuation">(</span><span class="token string">"/update.jsp"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forward</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span>response<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doPost</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">doGet</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="8-4-1-4-编写update-jsp页面"><a href="#8-4-1-4-编写update-jsp页面" class="headerlink" title="8.4.1.4  编写update.jsp页面"></a>8.4.1.4  编写update.jsp页面</h5><p>拷贝 <code>addBrand.jsp</code> 页面，改名为 <code>update.jsp</code> 并做出以下修改：</p><ul><li><p><code>title</code> 标签内容改为 <code>修改品牌</code></p></li><li><p><code>form</code> 标签的 <code>action</code> 属性值改为 <code>/brand-demo/updateServlet</code></p></li><li><p><code>input</code> 标签要进行数据回显，需要设置 <code>value</code> 属性</p><pre class="line-numbers language-jsp" data-language="jsp"><code class="language-jsp">品牌名称：&lt;input name="brandName" value="${brand.brandName}"&gt;&lt;br&gt;企业名称：&lt;input name="companyName" value="${brand.companyName}"&gt;&lt;br&gt;排序：&lt;input name="ordered" value="${brand.ordered}"&gt;&lt;br&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p><code>textarea</code> 标签要进行数据回显，需要在标签体中使用 <code>EL表达式</code></p><pre class="line-numbers language-jsp" data-language="jsp"><code class="language-jsp">描述信息：&lt;textarea rows="5" cols="20" name="description"&gt;${brand.description} &lt;/textarea&gt;&lt;br&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>单选框使用 <code>if</code> 标签需要判断 <code>brand.status</code> 的值是 1 还是 0 在指定的单选框上使用 <code>checked</code> 属性，表示被选中状态</p><pre class="line-numbers language-jsp" data-language="jsp"><code class="language-jsp">状态：&lt;c:if test="${brand.status == 0}"&gt;    &lt;input type="radio" name="status" value="0" checked&gt;禁用    &lt;input type="radio" name="status" value="1"&gt;启用&lt;br&gt;&lt;/c:if&gt;&lt;c:if test="${brand.status == 1}"&gt;    &lt;input type="radio" name="status" value="0" &gt;禁用    &lt;input type="radio" name="status" value="1" checked&gt;启用&lt;br&gt;&lt;/c:if&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><p>综上，<code>update.jsp</code> 代码如下：</p><pre class="line-numbers language-jsp" data-language="jsp"><code class="language-jsp">&lt;%@ page contentType="text/html;charset=UTF-8" language="java" %&gt;&lt;%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core" %&gt;&lt;!DOCTYPE html&gt;&lt;html lang="en"&gt;&lt;head&gt;    &lt;meta charset="UTF-8"&gt;    &lt;title&gt;修改品牌&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;h3&gt;修改品牌&lt;/h3&gt;&lt;form action="/brand-demo/updateServlet" method="post"&gt;    品牌名称：&lt;input name="brandName" value="${brand.brandName}"&gt;&lt;br&gt;    企业名称：&lt;input name="companyName" value="${brand.companyName}"&gt;&lt;br&gt;    排序：&lt;input name="ordered" value="${brand.ordered}"&gt;&lt;br&gt;    描述信息：&lt;textarea rows="5" cols="20" name="description"&gt;${brand.description} &lt;/textarea&gt;&lt;br&gt;    状态：    &lt;c:if test="${brand.status == 0}"&gt;        &lt;input type="radio" name="status" value="0" checked&gt;禁用        &lt;input type="radio" name="status" value="1"&gt;启用&lt;br&gt;    &lt;/c:if&gt;    &lt;c:if test="${brand.status == 1}"&gt;        &lt;input type="radio" name="status" value="0" &gt;禁用        &lt;input type="radio" name="status" value="1" checked&gt;启用&lt;br&gt;    &lt;/c:if&gt;    &lt;input type="submit" value="提交"&gt;&lt;/form&gt;&lt;/body&gt;&lt;/html&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="8-4-2-修改数据"><a href="#8-4-2-修改数据" class="headerlink" title="8.4.2  修改数据"></a>8.4.2  修改数据</h4><p>做完回显数据后，接下来我们要做修改数据了，而下图是修改数据的效果：</p><p><img src="/../images/JavaWeb%E7%9F%A5%E8%AF%86%E7%AC%94%E8%AE%B0%E2%80%94%E2%80%94JSP/image-20210819225948187.png"></p><p>在修改页面进行数据修改，点击 <code>提交</code> 按钮，会将数据提交到后端程序，后端程序会对表中的数据进行修改操作，然后重新进行数据的查询操作。整体流程如下：</p><p><img src="/../images/JavaWeb%E7%9F%A5%E8%AF%86%E7%AC%94%E8%AE%B0%E2%80%94%E2%80%94JSP/image-20210819230242938.png"></p><h5 id="8-4-2-1-编写BrandMapper方法"><a href="#8-4-2-1-编写BrandMapper方法" class="headerlink" title="8.4.2.1  编写BrandMapper方法"></a>8.4.2.1  编写BrandMapper方法</h5><p>在 <code>BrandMapper</code> 接口，在接口中定义 <code>update(Brand brand)</code> 方法</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/**  * 修改  * @param brand  */</span><span class="token annotation punctuation">@Update</span><span class="token punctuation">(</span><span class="token string">"update tb_brand set brand_name = #{brandName},company_name = #{companyName},ordered = #{ordered},description = #{description},status = #{status} where id = #{id}"</span><span class="token punctuation">)</span><span class="token keyword">void</span> <span class="token function">update</span><span class="token punctuation">(</span><span class="token class-name">Brand</span> brand<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="8-4-2-2-编写BrandService方法"><a href="#8-4-2-2-编写BrandService方法" class="headerlink" title="8.4.2.2  编写BrandService方法"></a>8.4.2.2  编写BrandService方法</h5><p>在 <code>BrandService</code> 类中定义根据id查询数据方法 <code>update(Brand brand)</code> </p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/**    * 修改    * @param brand    */</span>   <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">update</span><span class="token punctuation">(</span><span class="token class-name">Brand</span> brand<span class="token punctuation">)</span><span class="token punctuation">{</span>       <span class="token comment">//2. 获取SqlSession</span>       <span class="token class-name">SqlSession</span> sqlSession <span class="token operator">=</span> factory<span class="token punctuation">.</span><span class="token function">openSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment">//3. 获取BrandMapper</span>       <span class="token class-name">BrandMapper</span> mapper <span class="token operator">=</span> sqlSession<span class="token punctuation">.</span><span class="token function">getMapper</span><span class="token punctuation">(</span><span class="token class-name">BrandMapper</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment">//4. 调用方法</span>       mapper<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span>brand<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment">//提交事务</span>       sqlSession<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment">//释放资源</span>       sqlSession<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="8-4-2-3-编写servlet"><a href="#8-4-2-3-编写servlet" class="headerlink" title="8.4.2.3  编写servlet"></a>8.4.2.3  编写servlet</h5><p>在 <code>web</code> 包下创建 <code>AddServlet</code> 的 <code>servlet</code>，该 <code>servlet</code> 的逻辑如下:</p><ul><li>设置处理post请求乱码的字符集</li><li>接收客户端提交的数据</li><li>将接收到的数据封装到 <code>Brand</code> 对象中</li><li>调用 <code>BrandService</code> 的<code>update()</code> 方法进行添加的业务逻辑处理</li><li>跳转到 <code>selectAllServlet</code> 资源重新查询数据</li></ul><p>具体的代码如下：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@WebServlet</span><span class="token punctuation">(</span><span class="token string">"/updateServlet"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UpdateServlet</span> <span class="token keyword">extends</span> <span class="token class-name">HttpServlet</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">BrandService</span> service <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BrandService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doGet</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>        <span class="token comment">//处理POST请求的乱码问题</span>        request<span class="token punctuation">.</span><span class="token function">setCharacterEncoding</span><span class="token punctuation">(</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//1. 接收表单提交的数据，封装为一个Brand对象</span>        <span class="token class-name">String</span> id <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getParameter</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> brandName <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getParameter</span><span class="token punctuation">(</span><span class="token string">"brandName"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> companyName <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getParameter</span><span class="token punctuation">(</span><span class="token string">"companyName"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> ordered <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getParameter</span><span class="token punctuation">(</span><span class="token string">"ordered"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> description <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getParameter</span><span class="token punctuation">(</span><span class="token string">"description"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> status <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getParameter</span><span class="token punctuation">(</span><span class="token string">"status"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//封装为一个Brand对象</span>        <span class="token class-name">Brand</span> brand <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Brand</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        brand<span class="token punctuation">.</span><span class="token function">setId</span><span class="token punctuation">(</span><span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        brand<span class="token punctuation">.</span><span class="token function">setBrandName</span><span class="token punctuation">(</span>brandName<span class="token punctuation">)</span><span class="token punctuation">;</span>        brand<span class="token punctuation">.</span><span class="token function">setCompanyName</span><span class="token punctuation">(</span>companyName<span class="token punctuation">)</span><span class="token punctuation">;</span>        brand<span class="token punctuation">.</span><span class="token function">setOrdered</span><span class="token punctuation">(</span><span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>ordered<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        brand<span class="token punctuation">.</span><span class="token function">setDescription</span><span class="token punctuation">(</span>description<span class="token punctuation">)</span><span class="token punctuation">;</span>        brand<span class="token punctuation">.</span><span class="token function">setStatus</span><span class="token punctuation">(</span><span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>status<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//2. 调用service 完成修改</span>        service<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span>brand<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//3. 转发到查询所有Servlet</span>        request<span class="token punctuation">.</span><span class="token function">getRequestDispatcher</span><span class="token punctuation">(</span><span class="token string">"/selectAllServlet"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forward</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span>response<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doPost</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">doGet</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>==存在问题：update.jsp 页面提交数据时是没有携带主键数据的，而后台修改数据需要根据主键进行修改。==</p><p>针对这个问题，我们不希望页面将主键id展示给用户看，但是又希望在提交数据时能将主键id提交到后端。此时我们就想到了在学习 HTML 时学习的隐藏域，在 <code>update.jsp</code> 页面的表单中添加如下代码：</p><pre class="line-numbers language-jsp" data-language="jsp"><code class="language-jsp">&lt;%--隐藏域，提交id--%&gt;&lt;input type="hidden" name="id" value="${brand.id}"&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><code>update.jsp</code> 页面的最终代码如下：</p><pre class="line-numbers language-jsp" data-language="jsp"><code class="language-jsp">&lt;%@ page contentType="text/html;charset=UTF-8" language="java" %&gt;&lt;%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core" %&gt;&lt;!DOCTYPE html&gt;&lt;html lang="en"&gt;&lt;head&gt;    &lt;meta charset="UTF-8"&gt;    &lt;title&gt;修改品牌&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;h3&gt;修改品牌&lt;/h3&gt;&lt;form action="/brand-demo/updateServlet" method="post"&gt;    &lt;%--隐藏域，提交id--%&gt;    &lt;input type="hidden" name="id" value="${brand.id}"&gt;    品牌名称：&lt;input name="brandName" value="${brand.brandName}"&gt;&lt;br&gt;    企业名称：&lt;input name="companyName" value="${brand.companyName}"&gt;&lt;br&gt;    排序：&lt;input name="ordered" value="${brand.ordered}"&gt;&lt;br&gt;    描述信息：&lt;textarea rows="5" cols="20" name="description"&gt;${brand.description} &lt;/textarea&gt;&lt;br&gt;    状态：    &lt;c:if test="${brand.status == 0}"&gt;        &lt;input type="radio" name="status" value="0" checked&gt;禁用        &lt;input type="radio" name="status" value="1"&gt;启用&lt;br&gt;    &lt;/c:if&gt;    &lt;c:if test="${brand.status == 1}"&gt;        &lt;input type="radio" name="status" value="0" &gt;禁用        &lt;input type="radio" name="status" value="1" checked&gt;启用&lt;br&gt;    &lt;/c:if&gt;    &lt;input type="submit" value="提交"&gt;&lt;/form&gt;&lt;/body&gt;&lt;/html&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 系统笔记 </tag>
            
            <tag> JavaWeb </tag>
            
            <tag> JSP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>解决IDEA 2021 新建Maven项目没有archetype模板</title>
      <link href="/2023/02/03/jie-jue-idea-2021-xin-jian-maven-xiang-mu-mei-you-archetype-mo-ban/"/>
      <url>/2023/02/03/jie-jue-idea-2021-xin-jian-maven-xiang-mu-mei-you-archetype-mo-ban/</url>
      
        <content type="html"><![CDATA[<h3 id="一、问题描述"><a href="#一、问题描述" class="headerlink" title="一、问题描述"></a>一、问题描述</h3><p><strong>新建Maven项目发现只有两个archetype可选</strong></p><p><img src="/../images/%E8%A7%A3%E5%86%B3IDEA-2021-%E6%96%B0%E5%BB%BAMaven%E9%A1%B9%E7%9B%AE%E6%B2%A1%E6%9C%89archetype%E6%A8%A1%E6%9D%BF/image-20230203173451238.png"></p><h3 id="二、解决方案"><a href="#二、解决方案" class="headerlink" title="二、解决方案"></a>二、解决方案</h3><h4 id="1、Close-Project"><a href="#1、Close-Project" class="headerlink" title="1、Close Project"></a>1、Close Project</h4><p><strong>点击项目左上角 File - Close Project 进入开始界面 Welcome to Intellj IDEA</strong></p><p><img src="/../images/%E8%A7%A3%E5%86%B3IDEA-2021-%E6%96%B0%E5%BB%BAMaven%E9%A1%B9%E7%9B%AE%E6%B2%A1%E6%9C%89archetype%E6%A8%A1%E6%9D%BF/image-20230203173831617.png"></p><p><strong>然后点击 New Project</strong></p><p><img src="/../images/%E8%A7%A3%E5%86%B3IDEA-2021-%E6%96%B0%E5%BB%BAMaven%E9%A1%B9%E7%9B%AE%E6%B2%A1%E6%9C%89archetype%E6%A8%A1%E6%9D%BF/image-20230203173927108.png"></p><p><strong>成功加载骨架模板</strong></p><p><img src="/../images/%E8%A7%A3%E5%86%B3IDEA-2021-%E6%96%B0%E5%BB%BAMaven%E9%A1%B9%E7%9B%AE%E6%B2%A1%E6%9C%89archetype%E6%A8%A1%E6%9D%BF/image-20230203173404234.png"></p><h4 id="2、安装插件"><a href="#2、安装插件" class="headerlink" title="2、安装插件"></a>2、安装插件</h4><ul><li><p><strong>在 Settings 里打开 plugins，然后搜索 Maven Archetype Catalogs 安装并重启IDEA</strong></p></li><li><p><strong>再直接打开 File - New Project 就可以看见archetype列表了</strong></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 难点问题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> maven </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>tomcat、trs-wcm等服务启动一闪而过的问题</title>
      <link href="/2023/02/03/tomcat-trs-wcm-deng-fu-wu-qi-dong-yi-shan-er-guo-de-wen-ti/"/>
      <url>/2023/02/03/tomcat-trs-wcm-deng-fu-wu-qi-dong-yi-shan-er-guo-de-wen-ti/</url>
      
        <content type="html"><![CDATA[<p><strong>故障描述：启动tomcat一闪而过，无法启动包括tomcat服务在内的各种命令行服务</strong></p><h3 id="一、常见解决方案"><a href="#一、常见解决方案" class="headerlink" title="一、常见解决方案"></a>一、常见解决方案</h3><ol><li>这个原因是因为在安装JDK的时候在C:\Windows\System32生成的java.exe、javaw.exe、javaws.exe这个3个引起的；把这3个运行文件删除掉就可以了。</li><li>说电脑配置差。主要是因为jvm无法无法向系统申请到想要的内存，将VM Options那里写上java虚拟机参数（我的设为-Xmx512m）。</li><li>jdk的环境变量如path配置出问题。</li><li>以前装过低版本的JDK,如JDK8之类的。可以通过删除%JAVA_HOME%\jre\lib下的ext文件夹解决。</li></ol><p><strong>以上方式都不适用于我的问题，解决思路从tomcat运行原理入手。</strong></p><h3 id="二、原理分析"><a href="#二、原理分析" class="headerlink" title="二、原理分析"></a>二、原理分析</h3><h4 id="1-首先确定jdk与tomcat环境变量"><a href="#1-首先确定jdk与tomcat环境变量" class="headerlink" title="1. 首先确定jdk与tomcat环境变量"></a>1. 首先确定jdk与tomcat环境变量</h4><p><img src="/../images/tomcat%E3%80%81trs-wcm%E7%AD%89%E6%9C%8D%E5%8A%A1%E5%90%AF%E5%8A%A8%E4%B8%80%E9%97%AA%E8%80%8C%E8%BF%87%E7%9A%84%E9%97%AE%E9%A2%98/image-20230203152513199.png" alt="环境变量"></p><h4 id="2-环境变量没有问题，进入tomcat目录"><a href="#2-环境变量没有问题，进入tomcat目录" class="headerlink" title="2. 环境变量没有问题，进入tomcat目录"></a>2. 环境变量没有问题，进入tomcat目录</h4><p>tomcat目录下有如下三个bat文件，一般通过start.up启动tomcat流程是：startup —&gt; catalina —&gt; setclasspath —&gt; catalina。如果这三个bat文件里有一个出现错误的话，就是启动失败。</p><p><img src="/../images/tomcat%E3%80%81trs-wcm%E7%AD%89%E6%9C%8D%E5%8A%A1%E5%90%AF%E5%8A%A8%E4%B8%80%E9%97%AA%E8%80%8C%E8%BF%87%E7%9A%84%E9%97%AE%E9%A2%98/image-20230203153153160.png" alt="tomcat目录"></p><h3 id="三、解决办法"><a href="#三、解决办法" class="headerlink" title="三、解决办法"></a>三、解决办法</h3><h4 id="1-首先调出错误信息"><a href="#1-首先调出错误信息" class="headerlink" title="1. 首先调出错误信息"></a>1. 首先调出错误信息</h4><p>修改tomcat中bin目录下的启动文件startup.bin</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">//将原文：call “%EXECUTABLE%” start %CMD_LINE_ARGS%:end//修改为：call “%EXECUTABLE%” run %CMD_LINE_ARGS%:endpause<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>修改完成后保存并启动tomcat。</p><p>这样在命令行下，运行startup.bat文件，这样程序就不会一闪而过，而会将启动不起来的原因打印到窗口上。</p><p>在命令行下启动tomcat的方法读者应该都很清楚，大体就是：cmd启动命令行窗口→通过cd命令到tomcat的bin目录下→运行startup.bat。</p><p><img src="/../images/tomcat%E3%80%81trs-wcm%E7%AD%89%E6%9C%8D%E5%8A%A1%E5%90%AF%E5%8A%A8%E4%B8%80%E9%97%AA%E8%80%8C%E8%BF%87%E7%9A%84%E9%97%AE%E9%A2%98/image-20230203153629933.png" alt="错误日志"></p><p><strong>大体可以理解为</strong>:</p><p>因为程序请求不到足够的内存就启动不了vm，导致程序退出。试试申请足够的内存就可以了。</p><h4 id="2-设置内存"><a href="#2-设置内存" class="headerlink" title="2. 设置内存"></a>2. 设置内存</h4><p>在catalina.bat中 找到Execute The Requested Command下面的set JAVA OPTS。</p><p>把这一句替换为：set JAVA OPTS=%JAVA OPTS% -server -Xms800m-Xmx800m -XX:MaxNewSize=256m。</p><p>再次启动startup.bat会看到已经启动成功了(记得把之前修改的内run、pause还原回去)。</p><h4 id="3-此时注意到报错信息还有"><a href="#3-此时注意到报错信息还有" class="headerlink" title="3. 此时注意到报错信息还有"></a>3. 此时注意到报错信息还有</h4><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">Using CATALINA_OPTS: ""Unrecognized option: --add-opens=java.base/java.lang=ALL-UNNAMED<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>发现是tomcat在启动配置tomcat的时候使用了更高版本的jre，因此导致高版本的JDK信息写入到了tomcat启动文件中，包括TRS-WCM等服务都是tomcat7版本，因此无法启动</p><p><strong>解决方法有</strong>：更新到最高版本jdk或者降低tomcat版本。</p><p>这里我选择<strong>完全卸载</strong>tomcat10.1，重新启动tomcat，问题解决并成功访问8080</p><p><img src="/../images/tomcat%E3%80%81trs-wcm%E7%AD%89%E6%9C%8D%E5%8A%A1%E5%90%AF%E5%8A%A8%E4%B8%80%E9%97%AA%E8%80%8C%E8%BF%87%E7%9A%84%E9%97%AE%E9%A2%98/image-20230203155010599.png" alt="tomcat服务"></p><p><img src="/../images/tomcat%E3%80%81trs-wcm%E7%AD%89%E6%9C%8D%E5%8A%A1%E5%90%AF%E5%8A%A8%E4%B8%80%E9%97%AA%E8%80%8C%E8%BF%87%E7%9A%84%E9%97%AE%E9%A2%98/image-20230203155033808.png" alt="tomcat官网"></p><p>同样，内置tomcat7的wcm也可成功启动服务</p><p><img src="/../images/tomcat%E3%80%81trs-wcm%E7%AD%89%E6%9C%8D%E5%8A%A1%E5%90%AF%E5%8A%A8%E4%B8%80%E9%97%AA%E8%80%8C%E8%BF%87%E7%9A%84%E9%97%AE%E9%A2%98/image-20230203155137694.png" alt="wcm服务"></p><p><img src="/../images/tomcat%E3%80%81trs-wcm%E7%AD%89%E6%9C%8D%E5%8A%A1%E5%90%AF%E5%8A%A8%E4%B8%80%E9%97%AA%E8%80%8C%E8%BF%87%E7%9A%84%E9%97%AE%E9%A2%98/image-20230203155154190.png" alt="wcm登录"></p>]]></content>
      
      
      <categories>
          
          <category> 难点问题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> tomcat </tag>
            
            <tag> server服务 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>背部肌肉群与训练方法记录</title>
      <link href="/2023/02/02/bei-bu-ji-rou-qun-yu-xun-lian-fang-fa-ji-lu/"/>
      <url>/2023/02/02/bei-bu-ji-rou-qun-yu-xun-lian-fang-fa-ji-lu/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> 一些想法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 健身 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaWeb知识笔记——Request&amp;Response</title>
      <link href="/2023/02/02/javaweb-zhi-shi-bi-ji-request-response/"/>
      <url>/2023/02/02/javaweb-zhi-shi-bi-ji-request-response/</url>
      
        <content type="html"><![CDATA[<h2 id="Request-amp-Response"><a href="#Request-amp-Response" class="headerlink" title="Request&amp;Response"></a>Request&amp;Response</h2><p><strong>学习目标</strong></p><blockquote><ul><li>掌握Request对象的概念与使用</li><li>掌握Response对象的概念与使用</li><li>能够完成用户登录注册案例的实现</li><li>能够完成SqlSessionFactory工具类的抽取</li></ul></blockquote><h2 id="1，Request和Response的概述"><a href="#1，Request和Response的概述" class="headerlink" title="1，Request和Response的概述"></a>1，Request和Response的概述</h2><p>==Request是请求对象，Response是响应对象。==这两个对象在我们使用Servlet的时候有看到：<img src="/../images/JavaWeb%E7%9F%A5%E8%AF%86%E7%AC%94%E8%AE%B0%E2%80%94%E2%80%94Request-Response/1628735216156.png"></p><p>此时，我们就需要思考一个问题request和response这两个参数的作用是什么?</p><p><img src="/../images/JavaWeb%E7%9F%A5%E8%AF%86%E7%AC%94%E8%AE%B0%E2%80%94%E2%80%94Request-Response/1628735746602.png"></p><ul><li>request:==获取==请求数据<ul><li>浏览器会发送HTTP请求到后台服务器[Tomcat]</li><li>HTTP的请求中会包含很多请求数据[请求行+请求头+请求体]</li><li>后台服务器[Tomcat]会对HTTP请求中的数据进行解析并把解析结果存入到一个对象中</li><li>所存入的对象即为request对象，所以我们可以从request对象中获取请求的相关参数</li><li>获取到数据后就可以继续后续的业务，比如获取用户名和密码就可以实现登录操作的相关业务</li></ul></li><li>response:==设置==响应数据<ul><li>业务处理完后，后台就需要给前端返回业务处理的结果即响应数据</li><li>把响应数据封装到response对象中</li><li>后台服务器[Tomcat]会解析response对象,按照[响应行+响应头+响应体]格式拼接结果</li><li>浏览器最终解析结果，把内容展示在浏览器给用户浏览</li></ul></li></ul><p>对于上述所讲的内容，我们通过一个案例来初步体验下request和response对象的使用。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@WebServlet</span><span class="token punctuation">(</span><span class="token string">"/demo3"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ServletDemo3</span> <span class="token keyword">extends</span> <span class="token class-name">HttpServlet</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doGet</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>        <span class="token comment">//使用request对象 获取请求数据</span>        <span class="token class-name">String</span> name <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getParameter</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//url?name=zhangsan</span>        <span class="token comment">//使用response对象 设置响应数据</span>        response<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token string">"content-type"</span><span class="token punctuation">,</span><span class="token string">"text/html;charset=utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        response<span class="token punctuation">.</span><span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"&lt;h1&gt;"</span><span class="token operator">+</span>name<span class="token operator">+</span><span class="token string">",欢迎您！&lt;/h1&gt;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doPost</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Post..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>启动成功后就可以通过浏览器来访问，并且根据传入参数的不同就可以在页面上展示不同的内容:</p><p><img src="/../images/JavaWeb%E7%9F%A5%E8%AF%86%E7%AC%94%E8%AE%B0%E2%80%94%E2%80%94Request-Response/1628738273049.png"></p><p><strong>小结</strong></p><p>在这节中，我们主要认识了下request对象和reponse对象:</p><ul><li>request对象是用来封装请求数据的对象</li><li>response对象是用来封装响应数据的对象</li></ul><p>目前我们只知道这两个对象是用来干什么的，那么它们具体是如何实现的，就需要我们继续深入的学习。接下来，就先从Request对象来学习,主要学习下面这些内容:</p><ul><li><p>request继承体系</p></li><li><p>request获取请求参数</p></li><li><p>request请求转发</p></li></ul><h2 id="2，Request对象"><a href="#2，Request对象" class="headerlink" title="2，Request对象"></a>2，Request对象</h2><h3 id="2-1-Request继承体系"><a href="#2-1-Request继承体系" class="headerlink" title="2.1 Request继承体系"></a>2.1 Request继承体系</h3><p>在学习这节内容之前，我们先思考一个问题，前面在介绍Request和Reponse对象的时候，比较细心的同学可能已经发现：</p><ul><li>当我们的Servlet类实现的是Servlet接口的时候，service方法中的参数是ServletRequest和ServletResponse</li><li>当我们的Servlet类继承的是HttpServlet类的时候，doGet和doPost方法中的参数就变成HttpServletRequest和HttpServletReponse</li></ul><p>那么，</p><ul><li>ServletRequest和HttpServletRequest的关系是什么?</li><li>request对象是有谁来创建的?</li><li>request提供了哪些API,这些API从哪里查?</li></ul><p>首先，我们先来看下Request的继承体系:</p><p><img src="/../images/JavaWeb%E7%9F%A5%E8%AF%86%E7%AC%94%E8%AE%B0%E2%80%94%E2%80%94Request-Response/1628740441008.png"></p><p>从上图中可以看出，ServletRequest和HttpServletRequest都是Java提供的，所以我们可以打开JavaEE提供的API文档[参考: 资料/JavaEE7-api.chm],打开后可以看到:</p><p><img src="/../images/JavaWeb%E7%9F%A5%E8%AF%86%E7%AC%94%E8%AE%B0%E2%80%94%E2%80%94Request-Response/1628741839475.png"></p><p>所以ServletRequest和HttpServletRequest是继承关系，并且两个都是接口，接口是无法创建对象，这个时候就引发了下面这个问题:</p><p><img src="/../images/JavaWeb%E7%9F%A5%E8%AF%86%E7%AC%94%E8%AE%B0%E2%80%94%E2%80%94Request-Response/1628742224589.png"></p><p>这个时候，我们就需要用到Request继承体系中的<code>RequestFacade</code>:</p><ul><li>该类实现了HttpServletRequest接口，也间接实现了ServletRequest接口。</li><li>Servlet类中的service方法、doGet方法或者是doPost方法最终都是由Web服务器[Tomcat]来调用的，所以Tomcat提供了方法参数接口的具体实现类，并完成了对象的创建</li><li>要想了解RequestFacade中都提供了哪些方法，我们可以直接查看JavaEE的API文档中关于ServletRequest和HttpServletRequest的接口文档，因为RequestFacade实现了其接口就需要重写接口中的方法</li></ul><p>对于上述结论，要想验证，可以编写一个Servlet，在方法中把request对象打印下，就能看到最终的对象是不是RequestFacade,代码如下:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@WebServlet</span><span class="token punctuation">(</span><span class="token string">"/demo2"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ServletDemo2</span> <span class="token keyword">extends</span> <span class="token class-name">HttpServlet</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doGet</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doPost</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>启动服务器，运行访问<code>http://localhost:8080/request-demo/demo2</code>,得到运行结果:</p><p><img src="/../images/JavaWeb%E7%9F%A5%E8%AF%86%E7%AC%94%E8%AE%B0%E2%80%94%E2%80%94Request-Response/1628743040046.png"></p><p><strong>小结</strong></p><ul><li>Request的继承体系为ServletRequest–&gt;HttpServletRequest–&gt;RequestFacade</li><li>Tomcat需要解析请求数据，封装为request对象,并且创建request对象传递到service方法</li><li>使用request对象，可以查阅JavaEE API文档的HttpServletRequest接口中方法说明</li></ul><h3 id="2-2-Request获取请求数据"><a href="#2-2-Request获取请求数据" class="headerlink" title="2.2 Request获取请求数据"></a>2.2 Request获取请求数据</h3><p>HTTP请求数据总共分为三部分内容，分别是==请求行、请求头、请求体==，对于这三部分内容的数据，分别该如何获取，首先我们先来学习请求行数据如何获取?</p><h4 id="2-2-1-获取请求行数据"><a href="#2-2-1-获取请求行数据" class="headerlink" title="2.2.1 获取请求行数据"></a>2.2.1 获取请求行数据</h4><p>请求行包含三块内容，分别是<code>请求方式</code>、<code>请求资源路径</code>、<code>HTTP协议及版本</code></p><p><img src="/../images/JavaWeb%E7%9F%A5%E8%AF%86%E7%AC%94%E8%AE%B0%E2%80%94%E2%80%94Request-Response/1628748240075.png"></p><p>对于这三部分内容，request对象都提供了对应的API方法来获取，具体如下:</p><ul><li>获取请求方式: <code>GET</code></li></ul><pre class="line-numbers language-none"><code class="language-none">String getMethod()<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>获取虚拟目录(项目访问路径): <code>/request-demo</code></li></ul><pre class="line-numbers language-none"><code class="language-none">String getContextPath()<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>获取URL(统一资源定位符): <code>http://localhost:8080/request-demo/req1</code></li></ul><pre class="line-numbers language-none"><code class="language-none">StringBuffer getRequestURL()<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>获取URI(统一资源标识符): <code>/request-demo/req1</code></li></ul><pre class="line-numbers language-none"><code class="language-none">String getRequestURI()<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>获取请求参数(GET方式): <code>username=zhangsan&amp;password=123</code></li></ul><pre class="line-numbers language-none"><code class="language-none">String getQueryString()<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>介绍完上述方法后，咱们通过代码把上述方法都使用下:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * request 获取请求数据 */</span><span class="token annotation punctuation">@WebServlet</span><span class="token punctuation">(</span><span class="token string">"/req1"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RequestDemo1</span> <span class="token keyword">extends</span> <span class="token class-name">HttpServlet</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doGet</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> req<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> resp<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>        <span class="token comment">// String getMethod()：获取请求方式： GET</span>        <span class="token class-name">String</span> method <span class="token operator">=</span> req<span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>method<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//GET</span>        <span class="token comment">// String getContextPath()：获取虚拟目录(项目访问路径)：/request-demo</span>        <span class="token class-name">String</span> contextPath <span class="token operator">=</span> req<span class="token punctuation">.</span><span class="token function">getContextPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>contextPath<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// StringBuffer getRequestURL(): 获取URL(统一资源定位符)：http://localhost:8080/request-demo/req1</span>        <span class="token class-name">StringBuffer</span> url <span class="token operator">=</span> req<span class="token punctuation">.</span><span class="token function">getRequestURL</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>url<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// String getRequestURI()：获取URI(统一资源标识符)： /request-demo/req1</span>        <span class="token class-name">String</span> uri <span class="token operator">=</span> req<span class="token punctuation">.</span><span class="token function">getRequestURI</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>uri<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// String getQueryString()：获取请求参数（GET方式）： username=zhangsan</span>        <span class="token class-name">String</span> queryString <span class="token operator">=</span> req<span class="token punctuation">.</span><span class="token function">getQueryString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>queryString<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doPost</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> req<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> resp<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>启动服务器，访问<code>http://localhost:8080/request-demo/req1?username=zhangsan&amp;passwrod=123</code>，获取的结果如下:</p><p><img src="/../images/JavaWeb%E7%9F%A5%E8%AF%86%E7%AC%94%E8%AE%B0%E2%80%94%E2%80%94Request-Response/1628762794935.png"></p><h4 id="2-2-2-获取请求头数据"><a href="#2-2-2-获取请求头数据" class="headerlink" title="2.2.2 获取请求头数据"></a>2.2.2 获取请求头数据</h4><p>对于请求头的数据，格式为<code>key: value</code>如下:</p><p><img src="/../images/JavaWeb%E7%9F%A5%E8%AF%86%E7%AC%94%E8%AE%B0%E2%80%94%E2%80%94Request-Response/1628768652535.png"></p><p>所以根据请求头名称获取对应值的方法为:</p><pre class="line-numbers language-none"><code class="language-none">String getHeader(String name)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>接下来，在代码中如果想要获取客户端浏览器的版本信息，则可以使用</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * request 获取请求数据 */</span><span class="token annotation punctuation">@WebServlet</span><span class="token punctuation">(</span><span class="token string">"/req1"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RequestDemo1</span> <span class="token keyword">extends</span> <span class="token class-name">HttpServlet</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doGet</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> req<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> resp<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>        <span class="token comment">//获取请求头: user-agent: 浏览器的版本信息</span>        <span class="token class-name">String</span> agent <span class="token operator">=</span> req<span class="token punctuation">.</span><span class="token function">getHeader</span><span class="token punctuation">(</span><span class="token string">"user-agent"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>agent<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doPost</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> req<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> resp<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>重新启动服务器后，<code>http://localhost:8080/request-demo/req1?username=zhangsan&amp;passwrod=123</code>，获取的结果如下:</p><p><img src="/../images/JavaWeb%E7%9F%A5%E8%AF%86%E7%AC%94%E8%AE%B0%E2%80%94%E2%80%94Request-Response/1628769145524.png"></p><h4 id="2-2-3-获取请求体数据"><a href="#2-2-3-获取请求体数据" class="headerlink" title="2.2.3 获取请求体数据"></a>2.2.3 获取请求体数据</h4><p>浏览器在发送GET请求的时候是没有请求体的，所以需要把请求方式变更为POST，请求体中的数据格式如下:</p><p><img src="/../images/JavaWeb%E7%9F%A5%E8%AF%86%E7%AC%94%E8%AE%B0%E2%80%94%E2%80%94Request-Response/1628768665185.png"></p><p>对于请求体中的数据，Request对象提供了如下两种方式来获取其中的数据，分别是:</p><ul><li>获取字节输入流，如果前端发送的是字节数据，比如传递的是文件数据，则使用该方法</li></ul><pre class="line-numbers language-none"><code class="language-none">ServletInputStream getInputStream()该方法可以获取字节<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>获取字符输入流，如果前端发送的是纯文本数据，则使用该方法</li></ul><pre class="line-numbers language-none"><code class="language-none">BufferedReader getReader()<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>接下来，大家需要思考，要想获取到请求体的内容该如何实现?</p><blockquote><p>具体实现的步骤如下:</p><p>1.准备一个页面，在页面中添加form表单,用来发送post请求</p><p>2.在Servlet的doPost方法中获取请求体数据</p><p>3.在doPost方法中使用request的getReader()或者getInputStream()来获取</p><p>4.访问测试</p></blockquote><ol><li>在项目的webapp目录下添加一个html页面，名称为：<code>req.html</code></li></ol><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>Title<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span><span class="token comment">&lt;!--     action:form表单提交的请求地址    method:请求方式，指定为post--&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/request-demo/req1<span class="token punctuation">"</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>post<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li>在Servlet的doPost方法中获取数据</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * request 获取请求数据 */</span><span class="token annotation punctuation">@WebServlet</span><span class="token punctuation">(</span><span class="token string">"/req1"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RequestDemo1</span> <span class="token keyword">extends</span> <span class="token class-name">HttpServlet</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doGet</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> req<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> resp<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doPost</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> req<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> resp<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>        <span class="token comment">//在此处获取请求体中的数据</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="3"><li>调用getReader()或者getInputStream()方法，因为目前前端传递的是纯文本数据，所以我们采用getReader()方法来获取</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * request 获取请求数据 */</span><span class="token annotation punctuation">@WebServlet</span><span class="token punctuation">(</span><span class="token string">"/req1"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RequestDemo1</span> <span class="token keyword">extends</span> <span class="token class-name">HttpServlet</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doGet</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> req<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> resp<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doPost</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> req<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> resp<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>         <span class="token comment">//获取post 请求体：请求参数</span>        <span class="token comment">//1. 获取字符输入流</span>        <span class="token class-name">BufferedReader</span> br <span class="token operator">=</span> req<span class="token punctuation">.</span><span class="token function">getReader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//2. 读取数据</span>        <span class="token class-name">String</span> line <span class="token operator">=</span> br<span class="token punctuation">.</span><span class="token function">readLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>line<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>==注意==</p><p>BufferedReader流是通过request对象来获取的，当请求完成后request对象就会被销毁，request对象被销毁后，BufferedReader流就会自动关闭，所以此处就不需要手动关闭流了。</p><ol start="4"><li>启动服务器，通过浏览器访问<code>http://localhost:8080/request-demo/req.html</code></li></ol><p><img src="/../images/JavaWeb%E7%9F%A5%E8%AF%86%E7%AC%94%E8%AE%B0%E2%80%94%E2%80%94Request-Response/1628770516387.png"></p><p>点击<code>提交</code>按钮后，就可以在控制台看到前端所发送的请求数据</p><p><img src="/../images/JavaWeb%E7%9F%A5%E8%AF%86%E7%AC%94%E8%AE%B0%E2%80%94%E2%80%94Request-Response/1628770585480.png"></p><p><strong>小结</strong></p><p>HTTP请求数据中包含了<code>请求行</code>、<code>请求头</code>和<code>请求体</code>，针对这三部分内容，Request对象都提供了对应的API方法来获取对应的值:</p><ul><li>请求行<ul><li>getMethod()获取请求方式</li><li>getContextPath()获取项目访问路径</li><li>getRequestURL()获取请求URL</li><li>getRequestURI()获取请求URI</li><li>getQueryString()获取GET请求方式的请求参数</li></ul></li><li>请求头<ul><li>getHeader(String name)根据请求头名称获取其对应的值</li></ul></li><li>请求体<ul><li>注意: ==浏览器发送的POST请求才有请求体==</li><li>如果是纯文本数据:getReader()</li><li>如果是字节数据如文件数据:getInputStream()</li></ul></li></ul><h4 id="2-2-4-获取请求参数的通用方式"><a href="#2-2-4-获取请求参数的通用方式" class="headerlink" title="2.2.4 获取请求参数的通用方式"></a>2.2.4 获取请求参数的通用方式</h4><p>在学习下面内容之前，我们先提出两个问题:</p><ul><li>什么是请求参数?</li><li>请求参数和请求数据的关系是什么?</li></ul><p>1.什么是请求参数?</p><p>为了能更好的回答上述两个问题，我们拿用户登录的例子来说明</p><p>1.1 想要登录网址，需要进入登录页面</p><p>1.2 在登录页面输入用户名和密码</p><p>1.3 将用户名和密码提交到后台</p><p>1.4 后台校验用户名和密码是否正确</p><p>1.5 如果正确，则正常登录，如果不正确，则提示用户名或密码错误</p><p>上述例子中，用户名和密码其实就是我们所说的请求参数。</p><p>2.什么是请求数据?</p><p>请求数据则是包含请求行、请求头和请求体的所有数据</p><p>3.请求参数和请求数据的关系是什么?</p><p>3.1 请求参数是请求数据中的部分内容</p><p>3.2 如果是GET请求，请求参数在请求行中</p><p>3.3 如果是POST请求，请求参数一般在请求体中</p><p>对于请求参数的获取,常用的有以下两种:</p><ul><li>GET方式:</li></ul><pre class="line-numbers language-none"><code class="language-none">String getQueryString()<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>POST方式:</li></ul><pre class="line-numbers language-none"><code class="language-none">BufferedReader getReader();<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>有了上述的知识储备，我们来实现一个案例需求:</p><p>（1）发送一个GET请求并携带用户名，后台接收后打印到控制台</p><p>（2）发送一个POST请求并携带用户名，后台接收后打印到控制台</p><p>此处大家需要注意的是GET请求和POST请求接收参数的方式不一样，具体实现的代码如下:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@WebServlet</span><span class="token punctuation">(</span><span class="token string">"/req1"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RequestDemo1</span> <span class="token keyword">extends</span> <span class="token class-name">HttpServlet</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doGet</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> req<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> resp<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>        <span class="token class-name">String</span> result <span class="token operator">=</span> req<span class="token punctuation">.</span><span class="token function">getQueryString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doPost</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> req<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> resp<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>        <span class="token class-name">BufferedReader</span> br <span class="token operator">=</span> req<span class="token punctuation">.</span><span class="token function">getReader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> result <span class="token operator">=</span> br<span class="token punctuation">.</span><span class="token function">readLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>对于上述的代码，会存在什么问题呢?</li></ul><p><img src="/../images/JavaWeb%E7%9F%A5%E8%AF%86%E7%AC%94%E8%AE%B0%E2%80%94%E2%80%94Request-Response/1628776252445.png"></p><ul><li>如何解决上述重复代码的问题呢?</li></ul><p><img src="/../images/JavaWeb%E7%9F%A5%E8%AF%86%E7%AC%94%E8%AE%B0%E2%80%94%E2%80%94Request-Response/1628776433318.png"></p><p>当然，也可以在doGet中调用doPost,在doPost中完成参数的获取和打印,另外需要注意的是，doGet和doPost方法都必须存在，不能删除任意一个。</p><p>==GET请求和POST请求获取请求参数的方式不一样，在获取请求参数这块该如何实现呢?==</p><p>要想实现，我们就需要==思考==:</p><p>GET请求方式和POST请求方式区别主要在于获取请求参数的方式不一样，是否可以提供一种==统一==获取请求参数的方式，从而==统一==doGet和doPost方法内的代码?</p><p>解决方案一:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@WebServlet</span><span class="token punctuation">(</span><span class="token string">"/req1"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RequestDemo1</span> <span class="token keyword">extends</span> <span class="token class-name">HttpServlet</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doGet</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> req<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> resp<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>        <span class="token comment">//获取请求方式</span>        <span class="token class-name">String</span> method <span class="token operator">=</span> req<span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//获取请求参数</span>        <span class="token class-name">String</span> params <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token string">"GET"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>method<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            params <span class="token operator">=</span> req<span class="token punctuation">.</span><span class="token function">getQueryString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token string">"POST"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>method<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token class-name">BufferedReader</span> reader <span class="token operator">=</span> req<span class="token punctuation">.</span><span class="token function">getReader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            params <span class="token operator">=</span> reader<span class="token punctuation">.</span><span class="token function">readLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment">//将请求参数进行打印控制台</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>params<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doPost</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> req<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> resp<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">doGet</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span>resp<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>使用request的getMethod()来获取请求方式，根据请求方式的不同分别获取请求参数值，这样就可以解决上述问题，但是以后每个Servlet都需要这样写代码，实现起来比较麻烦，这种方案我们不采用</p><p>解决方案二:</p><p>request对象已经将上述获取请求参数的方法进行了封装，并且request提供的方法实现的功能更强大，以后只需要调用request提供的方法即可，在request的方法中都实现了哪些操作?</p><p>(1)根据不同的请求方式获取请求参数，获取的内容如下:</p><p><img src="/../images/JavaWeb%E7%9F%A5%E8%AF%86%E7%AC%94%E8%AE%B0%E2%80%94%E2%80%94Request-Response/1628778931277.png"></p><p>(2)把获取到的内容进行分割，内容如下:</p><p><img src="/../images/JavaWeb%E7%9F%A5%E8%AF%86%E7%AC%94%E8%AE%B0%E2%80%94%E2%80%94Request-Response/1628779067793.png"></p><p>(3)把分割后端数据，存入到一个Map集合中:</p><p><img src="/../images/JavaWeb%E7%9F%A5%E8%AF%86%E7%AC%94%E8%AE%B0%E2%80%94%E2%80%94Request-Response/1628779368501.png"></p><p><strong>注意</strong>:因为参数的值可能是一个，也可能有多个，所以Map的值的类型为String数组。</p><p>基于上述理论，request对象为我们提供了如下方法:</p><ul><li>获取所有参数Map集合</li></ul><pre class="line-numbers language-none"><code class="language-none">Map&lt;String,String[]&gt; getParameterMap()<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>根据名称获取参数值（数组）</li></ul><pre class="line-numbers language-none"><code class="language-none">String[] getParameterValues(String name)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>根据名称获取参数值(单个值)</li></ul><pre class="line-numbers language-none"><code class="language-none">String getParameter(String name)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>接下来，我们通过案例来把上述的三个方法进行实例演示:</p><p>1.修改req.html页面，添加爱好选项，爱好可以同时选多个</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>Title<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/request-demo/req2<span class="token punctuation">"</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>get<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>checkbox<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>hobby<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span> 游泳    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>checkbox<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>hobby<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>2<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span> 爬山 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/../images/JavaWeb%E7%9F%A5%E8%AF%86%E7%AC%94%E8%AE%B0%E2%80%94%E2%80%94Request-Response/1628780937599.png"></p><p>2.在Servlet代码中获取页面传递GET请求的参数值</p><p> 2.1获取GET方式的所有请求参数</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * request 通用方式获取请求参数 */</span><span class="token annotation punctuation">@WebServlet</span><span class="token punctuation">(</span><span class="token string">"/req2"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RequestDemo2</span> <span class="token keyword">extends</span> <span class="token class-name">HttpServlet</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doGet</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> req<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> resp<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>        <span class="token comment">//GET请求逻辑</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"get...."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//1. 获取所有参数的Map集合</span>        <span class="token class-name">Map</span><span class="token operator">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">&gt;</span> map <span class="token operator">=</span> req<span class="token punctuation">.</span><span class="token function">getParameterMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">String</span> key <span class="token operator">:</span> map<span class="token punctuation">.</span><span class="token function">keySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment">// username:zhangsan lisi</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>key<span class="token operator">+</span><span class="token string">":"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//获取值</span>            <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> values <span class="token operator">=</span> map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">String</span> value <span class="token operator">:</span> values<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>value <span class="token operator">+</span> <span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doPost</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> req<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> resp<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>获取的结果为:</p><p><img src="/../images/JavaWeb%E7%9F%A5%E8%AF%86%E7%AC%94%E8%AE%B0%E2%80%94%E2%80%94Request-Response/1628780965283.png"></p><p> 2.2获取GET请求参数中的爱好，结果是数组值</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * request 通用方式获取请求参数 */</span><span class="token annotation punctuation">@WebServlet</span><span class="token punctuation">(</span><span class="token string">"/req2"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RequestDemo2</span> <span class="token keyword">extends</span> <span class="token class-name">HttpServlet</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doGet</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> req<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> resp<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>        <span class="token comment">//GET请求逻辑</span>        <span class="token comment">//...</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> hobbies <span class="token operator">=</span> req<span class="token punctuation">.</span><span class="token function">getParameterValues</span><span class="token punctuation">(</span><span class="token string">"hobby"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">String</span> hobby <span class="token operator">:</span> hobbies<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>hobby<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doPost</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> req<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> resp<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>获取的结果为:</p><p><img src="/../images/JavaWeb%E7%9F%A5%E8%AF%86%E7%AC%94%E8%AE%B0%E2%80%94%E2%80%94Request-Response/1628781031437.png"></p><p> 2.3获取GET请求参数中的用户名和密码，结果是单个值</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * request 通用方式获取请求参数 */</span><span class="token annotation punctuation">@WebServlet</span><span class="token punctuation">(</span><span class="token string">"/req2"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RequestDemo2</span> <span class="token keyword">extends</span> <span class="token class-name">HttpServlet</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doGet</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> req<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> resp<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>        <span class="token comment">//GET请求逻辑</span>        <span class="token comment">//...</span>        <span class="token class-name">String</span> username <span class="token operator">=</span> req<span class="token punctuation">.</span><span class="token function">getParameter</span><span class="token punctuation">(</span><span class="token string">"username"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> password <span class="token operator">=</span> req<span class="token punctuation">.</span><span class="token function">getParameter</span><span class="token punctuation">(</span><span class="token string">"password"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>username<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>password<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doPost</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> req<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> resp<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>获取的结果为:</p><p><img src="/../images/JavaWeb%E7%9F%A5%E8%AF%86%E7%AC%94%E8%AE%B0%E2%80%94%E2%80%94Request-Response/1628781176434.png"></p><p>3.在Servlet代码中获取页面传递POST请求的参数值</p><p> 3.1将req.html页面form表单的提交方式改成post</p><p> 3.2将doGet方法中的内容复制到doPost方法中即可</p><p><strong>小结</strong></p><ul><li><p>req.getParameter()方法使用的频率会比较高</p></li><li><p>以后我们再写代码的时候，就只需要按照如下格式来编写:</p></li></ul><pre class="line-numbers language-none"><code class="language-none">public class RequestDemo1 extends HttpServlet {    @Override    protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {       //采用request提供的获取请求参数的通用方式来获取请求参数       //编写其他的业务代码...    }    @Override    protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {        this.doGet(req,resp);    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-3-IDEA快速创建Servlet"><a href="#2-3-IDEA快速创建Servlet" class="headerlink" title="2.3 IDEA快速创建Servlet"></a>2.3 IDEA快速创建Servlet</h3><p>使用通用方式获取请求参数后，屏蔽了GET和POST的请求方式代码的不同，则代码可以定义如下格式:</p><p><img src="/../images/JavaWeb%E7%9F%A5%E8%AF%86%E7%AC%94%E8%AE%B0%E2%80%94%E2%80%94Request-Response/1628781419752.png"></p><p>由于格式固定，所以我们可以使用IDEA提供的模板来制作一个Servlet的模板，这样我们后期在创建Servlet的时候就会更高效，具体如何实现:</p><p>(1)按照自己的需求，修改Servlet创建的模板内容</p><p><img src="/../images/JavaWeb%E7%9F%A5%E8%AF%86%E7%AC%94%E8%AE%B0%E2%80%94%E2%80%94Request-Response/1628781545912.png"></p><p>（2）使用servlet模板创建Servlet类</p><p><img src="/../images/JavaWeb%E7%9F%A5%E8%AF%86%E7%AC%94%E8%AE%B0%E2%80%94%E2%80%94Request-Response/1628782117420.png"></p><h3 id="2-4-请求参数中文乱码问题"><a href="#2-4-请求参数中文乱码问题" class="headerlink" title="2.4 请求参数中文乱码问题"></a>2.4 请求参数中文乱码问题</h3><p>问题展示:</p><p>(1)将req.html页面的请求方式修改为get</p><pre class="line-numbers language-none"><code class="language-none">&lt;!DOCTYPE html&gt;&lt;html lang="en"&gt;&lt;head&gt;    &lt;meta charset="UTF-8"&gt;    &lt;title&gt;Title&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;form action="/request-demo/req2" method="get"&gt;    &lt;input type="text" name="username"&gt;&lt;br&gt;    &lt;input type="password" name="password"&gt;&lt;br&gt;    &lt;input type="checkbox" name="hobby" value="1"&gt; 游泳    &lt;input type="checkbox" name="hobby" value="2"&gt; 爬山 &lt;br&gt;    &lt;input type="submit"&gt;&lt;/form&gt;&lt;/body&gt;&lt;/html&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>(2)在Servlet方法中获取参数，并打印</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * 中文乱码问题解决方案 */</span><span class="token annotation punctuation">@WebServlet</span><span class="token punctuation">(</span><span class="token string">"/req4"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RequestDemo4</span> <span class="token keyword">extends</span> <span class="token class-name">HttpServlet</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doGet</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>       <span class="token comment">//1. 获取username</span>       <span class="token class-name">String</span> username <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getParameter</span><span class="token punctuation">(</span><span class="token string">"username"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>username<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doPost</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">doGet</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>（3）启动服务器，页面上输入中文参数</p><p><img src="/../images/JavaWeb%E7%9F%A5%E8%AF%86%E7%AC%94%E8%AE%B0%E2%80%94%E2%80%94Request-Response/1628784323297.png"></p><p>（4）查看控制台打印内容</p><p><img src="/../images/JavaWeb%E7%9F%A5%E8%AF%86%E7%AC%94%E8%AE%B0%E2%80%94%E2%80%94Request-Response/1628784356157.png"></p><p>（5）把req.html页面的请求方式改成post,再次发送请求和中文参数</p><p><img src="/../images/JavaWeb%E7%9F%A5%E8%AF%86%E7%AC%94%E8%AE%B0%E2%80%94%E2%80%94Request-Response/1628784425182.png"></p><p>（6）查看控制台打印内容，依然为乱码</p><p><img src="/../images/JavaWeb%E7%9F%A5%E8%AF%86%E7%AC%94%E8%AE%B0%E2%80%94%E2%80%94Request-Response/1628784356157.png"></p><p>通过上面的案例，会发现，不管是GET还是POST请求，在发送的请求参数中如果有中文，在后台接收的时候，都会出现中文乱码的问题。具体该如何解决呢？</p><h4 id="2-4-1-POST请求解决方案"><a href="#2-4-1-POST请求解决方案" class="headerlink" title="2.4.1 POST请求解决方案"></a>2.4.1 POST请求解决方案</h4><ul><li>分析出现中文乱码的原因：<ul><li>POST的请求参数是通过request的getReader()来获取流中的数据</li><li>TOMCAT在获取流的时候采用的编码是ISO-8859-1</li><li>ISO-8859-1编码是不支持中文的，所以会出现乱码</li></ul></li><li>解决方案：<ul><li>页面设置的编码格式为UTF-8</li><li>把TOMCAT在获取流数据之前的编码设置为UTF-8</li><li>通过request.setCharacterEncoding(“UTF-8”)设置编码,UTF-8也可以写成小写</li></ul></li></ul><p>修改后的代码为:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * 中文乱码问题解决方案 */</span><span class="token annotation punctuation">@WebServlet</span><span class="token punctuation">(</span><span class="token string">"/req4"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RequestDemo4</span> <span class="token keyword">extends</span> <span class="token class-name">HttpServlet</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doGet</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>        <span class="token comment">//1. 解决乱码: POST getReader()</span>        <span class="token comment">//设置字符输入流的编码，设置的字符集要和页面保持一致</span>        request<span class="token punctuation">.</span><span class="token function">setCharacterEncoding</span><span class="token punctuation">(</span><span class="token string">"UTF-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment">//2. 获取username</span>       <span class="token class-name">String</span> username <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getParameter</span><span class="token punctuation">(</span><span class="token string">"username"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>username<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doPost</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">doGet</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>重新发送POST请求，就会在控制台看到正常展示的中文结果。</p><p>至此POST请求中文乱码的问题就已经解决，但是这种方案不适用于GET请求，这个原因是什么呢，咱们下面再分析。</p><h4 id="2-4-2-GET请求解决方案"><a href="#2-4-2-GET请求解决方案" class="headerlink" title="2.4.2 GET请求解决方案"></a>2.4.2 GET请求解决方案</h4><p>刚才提到一个问题是<code>POST请求的中文乱码解决方案为什么不适用GET请求？</code></p><ul><li>GET请求获取请求参数的方式是<code>request.getQueryString()</code></li><li>POST请求获取请求参数的方式是<code>request.getReader()</code></li><li>request.setCharacterEncoding(“utf-8”)是设置request处理流的编码</li><li>getQueryString方法并没有通过流的方式获取数据</li></ul><p>所以GET请求不能用设置编码的方式来解决中文乱码问题，那问题又来了，如何解决GET请求的中文乱码呢? </p><ol><li>首先我们需要先分析下GET请求出现乱码的原因:</li></ol><p> <img src="/../images/JavaWeb%E7%9F%A5%E8%AF%86%E7%AC%94%E8%AE%B0%E2%80%94%E2%80%94Request-Response/1628829610823.png"></p><p>(1)浏览器通过HTTP协议发送请求和数据给后台服务器（Tomcat)</p><p>(2)浏览器在发送HTTP的过程中会对中文数据进行URL==编码==</p><p>(3)在进行URL编码的时候会采用页面<code>&lt;meta&gt;</code>标签指定的UTF-8的方式进行编码，<code>张三</code>编码后的结果为<code>%E5%BC%A0%E4%B8%89</code></p><p>(4)后台服务器(Tomcat)接收到<code>%E5%BC%A0%E4%B8%89</code>后会默认按照<code>ISO-8859-1</code>进行URL==解码==</p><p>(5)由于前后编码与解码采用的格式不一样，就会导致后台获取到的数据为乱码。</p><p>思考: 如果把<code>req.html</code>页面的<code>&lt;meta&gt;</code>标签的charset属性改成<code>ISO-8859-1</code>,后台不做操作，能解决中文乱码问题么?</p><p>答案是否定的，因为<code>ISO-8859-1</code>本身是不支持中文展示的，所以改了<meta>标签的charset属性后，会导致页面上的中文内容都无法正常展示。</p><p>分析完上面的问题后，我们会发现，其中有两个我们不熟悉的内容就是==URL编码==和==URL解码==，什么是URL编码，什么又是URL解码呢?</p><p><strong>URL编码</strong></p><p>这块知识我们只需要了解下即可,具体编码过程分两步，分别是:</p><p>(1)将字符串按照编码方式转为二进制</p><p>(2)每个字节转为2个16进制数并在前边加上%</p><p><code>张三</code>按照UTF-8的方式转换成二进制的结果为:</p><pre class="line-numbers language-none"><code class="language-none">1110 0101 1011 1100 1010 0000 1110 0100 1011 1000 1000 1001<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这个结果是如何计算的?</p><p>使用<code>http://www.mytju.com/classcode/tools/encode_utf8.asp</code>，输入<code>张三</code></p><p><img src="/../images/JavaWeb%E7%9F%A5%E8%AF%86%E7%AC%94%E8%AE%B0%E2%80%94%E2%80%94Request-Response/1628833310473.png"></p><p>就可以获取张和三分别对应的10进制，然后在使用计算器，选择程序员模式，计算出对应的二进制数据结果:</p><p><img src="/../images/JavaWeb%E7%9F%A5%E8%AF%86%E7%AC%94%E8%AE%B0%E2%80%94%E2%80%94Request-Response/1628833496171.png"></p><p>在计算的十六进制结果中，每两位前面加一个%,就可以获取到<code>%E5%BC%A0%E4%B8%89</code>。</p><p>当然你从上面所提供的网站中就已经能看到编码16进制的结果了:</p><p><img src="/../images/JavaWeb%E7%9F%A5%E8%AF%86%E7%AC%94%E8%AE%B0%E2%80%94%E2%80%94Request-Response/1628833310474.png"></p><p>但是对于上面的计算过程，如果没有工具，纯手工计算的话，相对来说还是比较复杂的，我们也不需要进行手动计算，在Java中已经为我们提供了编码和解码的API工具类可以让我们更快速的进行编码和解码:</p><p>编码:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>net<span class="token punctuation">.</span></span>URLEncoder</span><span class="token punctuation">.</span><span class="token function">encode</span><span class="token punctuation">(</span><span class="token string">"需要被编码的内容"</span><span class="token punctuation">,</span><span class="token string">"字符集(UTF-8)"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>解码:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>net<span class="token punctuation">.</span></span>URLDecoder</span><span class="token punctuation">.</span><span class="token function">decode</span><span class="token punctuation">(</span><span class="token string">"需要被解码的内容"</span><span class="token punctuation">,</span><span class="token string">"字符集(UTF-8)"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>接下来咱们对<code>张三</code>来进行编码和解码</p><pre class="line-numbers language-none"><code class="language-none">public class URLDemo {  public static void main(String[] args) throws UnsupportedEncodingException {        String username = "张三";        //1. URL编码        String encode = URLEncoder.encode(username, "utf-8");        System.out.println(encode); //打印:%E5%BC%A0%E4%B8%89       //2. URL解码       //String decode = URLDecoder.decode(encode, "utf-8");//打印:张三       String decode = URLDecoder.decode(encode, "ISO-8859-1");//打印:`å¼&nbsp;ä¸ `       System.out.println(decode);    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>到这，我们就可以分析出GET请求中文参数出现乱码的原因了，</p><ul><li>浏览器把中文参数按照<code>UTF-8</code>进行URL编码</li><li>Tomcat对获取到的内容进行了<code>ISO-8859-1</code>的URL解码</li><li>在控制台就会出现类上<code>å¼ ä¸</code>的乱码，最后一位是个空格</li></ul><ol start="2"><li>清楚了出现乱码的原因，接下来我们就需要想办法进行解决</li></ol><p><img src="/../images/JavaWeb%E7%9F%A5%E8%AF%86%E7%AC%94%E8%AE%B0%E2%80%94%E2%80%94Request-Response/1628846824194.png"></p><p>从上图可以看住，</p><ul><li><p>在进行编码和解码的时候，不管使用的是哪个字符集，他们对应的<code>%E5%BC%A0%E4%B8%89</code>是一致的</p></li><li><p>那他们对应的二进制值也是一样的，为:</p><ul><li>```<br>1110 0101 1011 1100 1010 0000 1110 0100 1011 1000 1000 1001<pre class="line-numbers language-none"><code class="language-none">* 为所以我们可以考虑把`å¼ ä¸`转换成字节，在把字节转换成`张三`，在转换的过程中是它们的编码一致，就可以解决中文乱码问题。具体的实现步骤为:&gt;1.按照ISO-8859-1编码获取乱码`å¼ ä¸`对应的字节数组&gt;&gt;2.按照UTF-8编码获取字节数组对应的字符串实现代码如下:<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li></ul><p>public class URLDemo {</p><p>  public static void main(String[] args) throws UnsupportedEncodingException {<br>        String username = “张三”;<br>        //1. URL编码<br>        String encode = URLEncoder.encode(username, “utf-8”);<br>        System.out.println(encode);<br>        //2. URL解码<br>        String decode = URLDecoder.decode(encode, “ISO-8859-1”);</p><pre><code>    System.out.println(decode); //此处打印的是对应的乱码数据    //3. 转换为字节数据,编码    byte[] bytes = decode.getBytes("ISO-8859-1");    for (byte b : bytes) {        System.out.print(b + " ");    }    //此处打印的是:-27 -68 -96 -28 -72 -119    //4. 将字节数组转为字符串，解码    String s = new String(bytes, "utf-8");    System.out.println(s); //此处打印的是张三}</code></pre><p>}</p><pre class="line-numbers language-none"><code class="language-none">**说明**:在第18行中打印的数据是`-27 -68 -96 -28 -72 -119`和`张三`转换成的二进制数据`1110 0101 1011 1100 1010 0000 1110 0100 1011 1000 1000 1001`为什么不一样呢？其实打印出来的是十进制数据，我们只需要使用计算机换算下就能得到他们的对应关系，如下图:![](../images/JavaWeb知识笔记——Request-Response/1628849231208.png)至此对于GET请求中文乱码的解决方案，我们就已经分析完了，最后在代码中去实现下:```java/** * 中文乱码问题解决方案 */@WebServlet("/req4")public class RequestDemo4 extends HttpServlet {    @Override    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {        //1. 解决乱码：POST，getReader()        //request.setCharacterEncoding("UTF-8");//设置字符输入流的编码        //2. 获取username        String username = request.getParameter("username");        System.out.println("解决乱码前："+username);        //3. GET,获取参数的方式：getQueryString        // 乱码原因：tomcat进行URL解码，默认的字符集ISO-8859-1       /* //3.1 先对乱码数据进行编码：转为字节数组        byte[] bytes = username.getBytes(StandardCharsets.ISO_8859_1);        //3.2 字节数组解码        username = new String(bytes, StandardCharsets.UTF_8);*/        username  = new String(username.getBytes(StandardCharsets.ISO_8859_1),StandardCharsets.UTF_8);        System.out.println("解决乱码后："+username);    }    @Override    protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {        this.doGet(request, response);    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>注意</strong></p><ul><li>把<code>request.setCharacterEncoding("UTF-8")</code>代码注释掉后，会发现GET请求参数乱码解决方案同时也可也把POST请求参数乱码的问题也解决了</li><li>只不过对于POST请求参数一般都会比较多，采用这种方式解决乱码起来比较麻烦，所以对于POST请求还是建议使用设置编码的方式进行。</li></ul><p>另外需要说明一点的是==Tomcat8.0之后，已将GET请求乱码问题解决，设置默认的解码方式为UTF-8==</p><p><strong>小结</strong></p><ol><li>中文乱码解决方案</li></ol><ul><li><p>POST请求和GET请求的参数中如果有中文，后台接收数据就会出现中文乱码问题</p><p>GET请求在Tomcat8.0以后的版本就不会出现了</p></li><li><p>POST请求解决方案是:设置输入流的编码</p><pre class="line-numbers language-none"><code class="language-none">request.setCharacterEncoding("UTF-8");注意:设置的字符集要和页面保持一致<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>通用方式（GET/POST）：需要先解码，再编码</p><pre class="line-numbers language-none"><code class="language-none">new String(username.getBytes("ISO-8859-1"),"UTF-8");<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><ol start="2"><li>URL编码实现方式:</li></ol><ul><li><p>编码:</p><pre class="line-numbers language-none"><code class="language-none">URLEncoder.encode(str,"UTF-8");<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>解码:</p><pre class="line-numbers language-none"><code class="language-none">URLDecoder.decode(s,"ISO-8859-1");<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><h3 id="2-5-Request请求转发"><a href="#2-5-Request请求转发" class="headerlink" title="2.5 Request请求转发"></a>2.5 Request请求转发</h3><ol><li>==请求转发(forward):一种在服务器内部的资源跳转方式。==</li></ol><p><img src="/../images/JavaWeb%E7%9F%A5%E8%AF%86%E7%AC%94%E8%AE%B0%E2%80%94%E2%80%94Request-Response/1628851404283.png"></p><p>(1)浏览器发送请求给服务器，服务器中对应的资源A接收到请求</p><p>(2)资源A处理完请求后将请求发给资源B</p><p>(3)资源B处理完后将结果响应给浏览器</p><p>(4)请求从资源A到资源B的过程就叫==请求转发==</p><ol start="2"><li>请求转发的实现方式:</li></ol><pre class="line-numbers language-none"><code class="language-none">req.getRequestDispatcher("资源B路径").forward(req,resp);<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>具体如何来使用，我们先来看下需求:</p><p><img src="/../images/JavaWeb%E7%9F%A5%E8%AF%86%E7%AC%94%E8%AE%B0%E2%80%94%E2%80%94Request-Response/1628854783523.png"></p><p>针对上述需求，具体的实现步骤为:</p><blockquote><p>1.创建一个RequestDemo5类，接收/req5的请求，在doGet方法中打印<code>demo5</code></p><p>2.创建一个RequestDemo6类，接收/req6的请求，在doGet方法中打印<code>demo6</code></p><p>3.在RequestDemo5的方法中使用</p><p>​req.getRequestDispatcher(“/req6”).forward(req,resp)进行请求转发</p><p>4.启动测试</p></blockquote><p>(1)创建RequestDemo5类</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * 请求转发 */</span><span class="token annotation punctuation">@WebServlet</span><span class="token punctuation">(</span><span class="token string">"/req5"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RequestDemo5</span> <span class="token keyword">extends</span> <span class="token class-name">HttpServlet</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doGet</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"demo5..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doPost</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">doGet</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>(2)创建RequestDemo6类</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * 请求转发 */</span><span class="token annotation punctuation">@WebServlet</span><span class="token punctuation">(</span><span class="token string">"/req6"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RequestDemo6</span> <span class="token keyword">extends</span> <span class="token class-name">HttpServlet</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doGet</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"demo6..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doPost</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">doGet</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>(3)在RequestDemo5的doGet方法中进行请求转发</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * 请求转发 */</span><span class="token annotation punctuation">@WebServlet</span><span class="token punctuation">(</span><span class="token string">"/req5"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RequestDemo5</span> <span class="token keyword">extends</span> <span class="token class-name">HttpServlet</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doGet</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"demo5..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//请求转发</span>        request<span class="token punctuation">.</span><span class="token function">getRequestDispatcher</span><span class="token punctuation">(</span><span class="token string">"/req6"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forward</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span>response<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doPost</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">doGet</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>(4)启动测试</p><p>访问<code>http://localhost:8080/request-demo/req5</code>,就可以在控制台看到如下内容:</p><p><img src="/../images/JavaWeb%E7%9F%A5%E8%AF%86%E7%AC%94%E8%AE%B0%E2%80%94%E2%80%94Request-Response/1628855192876.png"></p><p>说明请求已经转发到了<code>/req6</code></p><ol start="3"><li>请求转发资源间共享数据:使用Request对象</li></ol><p>此处主要解决的问题是把请求从<code>/req5</code>转发到<code>/req6</code>的时候，如何传递数据给<code>/req6</code>。</p><p>需要使用request对象提供的三个方法:</p><ul><li>存储数据到request域[范围,数据是存储在request对象]中</li></ul><pre class="line-numbers language-none"><code class="language-none">void setAttribute(String name,Object o);<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>根据key获取值</li></ul><pre class="line-numbers language-none"><code class="language-none">Object getAttribute(String name);<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>根据key删除该键值对</li></ul><pre class="line-numbers language-none"><code class="language-none">void removeAttribute(String name);<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>接着上个需求来:</p><p><img src="/../images/JavaWeb%E7%9F%A5%E8%AF%86%E7%AC%94%E8%AE%B0%E2%80%94%E2%80%94Request-Response/1628856995417.png"></p><blockquote><p>1.在RequestDemo5的doGet方法中转发请求之前，将数据存入request域对象中</p><p>2.在RequestDemo6的doGet方法从request域对象中获取数据，并将数据打印到控制台</p><p>3.启动访问测试</p></blockquote><p>(1)修改RequestDemo5中的方法</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@WebServlet</span><span class="token punctuation">(</span><span class="token string">"/req5"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RequestDemo5</span> <span class="token keyword">extends</span> <span class="token class-name">HttpServlet</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doGet</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"demo5..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//存储数据</span>        request<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">"msg"</span><span class="token punctuation">,</span><span class="token string">"hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//请求转发</span>        request<span class="token punctuation">.</span><span class="token function">getRequestDispatcher</span><span class="token punctuation">(</span><span class="token string">"/req6"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forward</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span>response<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doPost</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">doGet</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>(2)修改RequestDemo6中的方法</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * 请求转发 */</span><span class="token annotation punctuation">@WebServlet</span><span class="token punctuation">(</span><span class="token string">"/req6"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RequestDemo6</span> <span class="token keyword">extends</span> <span class="token class-name">HttpServlet</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doGet</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"demo6..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//获取数据</span>        <span class="token class-name">Object</span> msg <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token string">"msg"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doPost</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">doGet</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>(3)启动测试</p><p>访问<code>http://localhost:8080/request-demo/req5</code>,就可以在控制台看到如下内容:</p><p><img src="/../images/JavaWeb%E7%9F%A5%E8%AF%86%E7%AC%94%E8%AE%B0%E2%80%94%E2%80%94Request-Response/1628857213364.png"></p><p>此时就可以实现在转发多个资源之间共享数据。</p><ol start="4"><li>请求转发的特点</li></ol><ul><li><p>浏览器地址栏路径不发生变化</p><p>虽然后台从<code>/req5</code>转发到<code>/req6</code>,但是浏览器的地址一直是<code>/req5</code>,未发生变化</p><p><img src="/../images/JavaWeb%E7%9F%A5%E8%AF%86%E7%AC%94%E8%AE%B0%E2%80%94%E2%80%94Request-Response/1628857365153.png"></p></li><li><p>只能转发到当前服务器的内部资源</p><p>不能从一个服务器通过转发访问另一台服务器</p></li><li><p>一次请求，可以在转发资源间使用request共享数据</p><p>虽然后台从<code>/req5</code>转发到<code>/req6</code>，但是这个==只有一次请求==</p></li></ul><h2 id="3，Response对象"><a href="#3，Response对象" class="headerlink" title="3，Response对象"></a>3，Response对象</h2><p>前面讲解完Request对象，接下来我们回到刚开始的那张图:</p><p><img src="/../images/JavaWeb%E7%9F%A5%E8%AF%86%E7%AC%94%E8%AE%B0%E2%80%94%E2%80%94Request-Response/1628857632899.png"></p><ul><li>Request:使用request对象来==获取==请求数据</li><li>Response:使用response对象来==设置==响应数据</li></ul><p>Reponse的继承体系和Request的继承体系也非常相似:</p><p><img src="/../images/JavaWeb%E7%9F%A5%E8%AF%86%E7%AC%94%E8%AE%B0%E2%80%94%E2%80%94Request-Response/1628857761317.png" alt="1628857761317"></p><p> 介绍完Response的相关体系结构后，接下来对于Response我们需要学习如下内容:</p><ul><li>Response设置响应数据的功能介绍</li><li>Response完成重定向</li><li>Response响应字符数据</li><li>Response响应字节数据</li></ul><h3 id="3-1-Response设置响应数据功能介绍"><a href="#3-1-Response设置响应数据功能介绍" class="headerlink" title="3.1 Response设置响应数据功能介绍"></a>3.1 Response设置响应数据功能介绍</h3><p>HTTP响应数据总共分为三部分内容，分别是==响应行、响应头、响应体==，对于这三部分内容的数据，respone对象都提供了哪些方法来进行设置?</p><ol><li>响应行</li></ol><p><img src="/../images/JavaWeb%E7%9F%A5%E8%AF%86%E7%AC%94%E8%AE%B0%E2%80%94%E2%80%94Request-Response/1628858926498.png"></p><p>对于响应头，比较常用的就是设置响应状态码:</p><pre class="line-numbers language-none"><code class="language-none">void setStatus(int sc);<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="2"><li>响应头</li></ol><p><img src="/../images/JavaWeb%E7%9F%A5%E8%AF%86%E7%AC%94%E8%AE%B0%E2%80%94%E2%80%94Request-Response/1628859051368.png"></p><p>设置响应头键值对：</p><pre class="line-numbers language-none"><code class="language-none">void setHeader(String name,String value);<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="3"><li>响应体</li></ol><p><img src="/../images/JavaWeb%E7%9F%A5%E8%AF%86%E7%AC%94%E8%AE%B0%E2%80%94%E2%80%94Request-Response/1628859268095.png"></p><p>对于响应体，是通过字符、字节输出流的方式往浏览器写，</p><p>获取字符输出流:</p><pre class="line-numbers language-none"><code class="language-none">PrintWriter getWriter();<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>获取字节输出流</p><pre class="line-numbers language-none"><code class="language-none">ServletOutputStream getOutputStream();<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>介绍完这些方法后，后面我们会通过案例把这些方法都用一用，首先先来完成下重定向的功能开发。</p><h3 id="3-2-Respones请求重定向"><a href="#3-2-Respones请求重定向" class="headerlink" title="3.2 Respones请求重定向"></a>3.2 Respones请求重定向</h3><ol><li>==Response重定向(redirect):一种资源跳转方式。==</li></ol><p><img src="/../images/JavaWeb%E7%9F%A5%E8%AF%86%E7%AC%94%E8%AE%B0%E2%80%94%E2%80%94Request-Response/1628859860279.png"></p><p>(1)浏览器发送请求给服务器，服务器中对应的资源A接收到请求</p><p>(2)资源A现在无法处理该请求，就会给浏览器响应一个302的状态码+location的一个访问资源B的路径</p><p>(3)浏览器接收到响应状态码为302就会重新发送请求到location对应的访问地址去访问资源B</p><p>(4)资源B接收到请求后进行处理并最终给浏览器响应结果，这整个过程就叫==重定向==</p><ol start="2"><li>重定向的实现方式:</li></ol><pre class="line-numbers language-none"><code class="language-none">resp.setStatus(302);resp.setHeader("location","资源B的访问路径");<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>具体如何来使用，我们先来看下需求:</p><p><img src="/../images/JavaWeb%E7%9F%A5%E8%AF%86%E7%AC%94%E8%AE%B0%E2%80%94%E2%80%94Request-Response/1628861030429.png"></p><p>针对上述需求，具体的实现步骤为:</p><blockquote><p>1.创建一个ResponseDemo1类，接收/resp1的请求，在doGet方法中打印<code>resp1....</code></p><p>2.创建一个ResponseDemo2类，接收/resp2的请求，在doGet方法中打印<code>resp2....</code></p><p>3.在ResponseDemo1的方法中使用</p><p>​response.setStatus(302);</p><p>​response.setHeader(“Location”,”/request-demo/resp2”) 来给前端响应结果数据</p><p>4.启动测试</p></blockquote><p>(1)创建ResponseDemo1类</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@WebServlet</span><span class="token punctuation">(</span><span class="token string">"/resp1"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ResponseDemo1</span> <span class="token keyword">extends</span> <span class="token class-name">HttpServlet</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doGet</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"resp1...."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doPost</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">doGet</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>(2)创建ResponseDemo2类</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@WebServlet</span><span class="token punctuation">(</span><span class="token string">"/resp2"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ResponseDemo2</span> <span class="token keyword">extends</span> <span class="token class-name">HttpServlet</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doGet</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"resp2...."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doPost</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">doGet</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>(3)在ResponseDemo1的doGet方法中给前端响应数据</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@WebServlet</span><span class="token punctuation">(</span><span class="token string">"/resp1"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ResponseDemo1</span> <span class="token keyword">extends</span> <span class="token class-name">HttpServlet</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doGet</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"resp1...."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//重定向</span>        <span class="token comment">//1.设置响应状态码 302</span>        response<span class="token punctuation">.</span><span class="token function">setStatus</span><span class="token punctuation">(</span><span class="token number">302</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//2. 设置响应头 Location</span>        response<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token string">"Location"</span><span class="token punctuation">,</span><span class="token string">"/request-demo/resp2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doPost</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">doGet</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>(4)启动测试</p><p>访问<code>http://localhost:8080/request-demo/resp1</code>,就可以在控制台看到如下内容:</p><p><img src="/../images/JavaWeb%E7%9F%A5%E8%AF%86%E7%AC%94%E8%AE%B0%E2%80%94%E2%80%94Request-Response/1628861404699.png"></p><p>说明<code>/resp1</code>和<code>/resp2</code>都被访问到了。到这重定向就已经完成了。</p><p>虽然功能已经实现，但是从设置重定向的两行代码来看，会发现除了重定向的地址不一样，其他的内容都是一模一样，所以request对象给我们提供了简化的编写方式为:</p><pre class="line-numbers language-none"><code class="language-none">resposne.sendRedirect("/request-demo/resp2")<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>所以第3步中的代码就可以简化为：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@WebServlet</span><span class="token punctuation">(</span><span class="token string">"/resp1"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ResponseDemo1</span> <span class="token keyword">extends</span> <span class="token class-name">HttpServlet</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doGet</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"resp1...."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//重定向</span>        resposne<span class="token punctuation">.</span><span class="token function">sendRedirect</span><span class="token punctuation">(</span><span class="token string">"/request-demo/resp2"</span><span class="token punctuation">)</span>；    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doPost</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">doGet</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="3"><li>重定向的特点</li></ol><ul><li><p>浏览器地址栏路径发送变化</p><p>当进行重定向访问的时候，由于是由浏览器发送的两次请求，所以地址会发生变化</p><p><img src="/../images/JavaWeb%E7%9F%A5%E8%AF%86%E7%AC%94%E8%AE%B0%E2%80%94%E2%80%94Request-Response/1628861893130.png"></p></li><li><p>可以重定向到任何位置的资源(服务内容、外部均可)</p><p>因为第一次响应结果中包含了浏览器下次要跳转的路径，所以这个路径是可以任意位置资源。</p></li><li><p>两次请求，不能在多个资源使用request共享数据</p><p>因为浏览器发送了两次请求，是两个不同的request对象，就无法通过request对象进行共享数据</p></li></ul><p>介绍完==请求重定向==和==请求转发==以后，接下来需要把这两个放在一块对比下:</p><p><img src="/../images/JavaWeb%E7%9F%A5%E8%AF%86%E7%AC%94%E8%AE%B0%E2%80%94%E2%80%94Request-Response/1628862170296.png"></p><p>以后到底用哪个，还是需要根据具体的业务来决定。</p><h3 id="3-3-路径问题"><a href="#3-3-路径问题" class="headerlink" title="3.3 路径问题"></a>3.3 路径问题</h3><ol><li>问题1：转发的时候路径上没有加<code>/request-demo</code>而重定向加了，那么到底什么时候需要加，什么时候不需要加呢?</li></ol><p><img src="/../images/JavaWeb%E7%9F%A5%E8%AF%86%E7%AC%94%E8%AE%B0%E2%80%94%E2%80%94Request-Response/1628862652700.png"></p><p>其实判断的依据很简单，只需要记住下面的规则即可:</p><ul><li>浏览器使用:需要加虚拟目录(项目访问路径)</li><li>服务端使用:不需要加虚拟目录</li></ul><p>对于转发来说，因为是在服务端进行的，所以不需要加虚拟目录</p><p>对于重定向来说，路径最终是由浏览器来发送请求，就需要添加虚拟目录。</p><p>掌握了这个规则，接下来就通过一些练习来强化下知识的学习:</p><ul><li><code>&lt;a href='路劲'&gt;</code></li><li><code>&lt;form action='路径'&gt;</code></li><li>req.getRequestDispatcher(“路径”)</li><li>resp.sendRedirect(“路径”)</li></ul><p>答案:</p><pre class="line-numbers language-none"><code class="language-none">1.超链接，从浏览器发送，需要加2.表单，从浏览器发送，需要加3.转发，是从服务器内部跳转，不需要加4.重定向，是由浏览器进行跳转，需要加。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li>问题2：在重定向的代码中，<code>/request-demo</code>是固定编码的，如果后期通过Tomcat插件配置了项目的访问路径，那么所有需要重定向的地方都需要重新修改，该如何优化?</li></ol><p><img src="/../images/JavaWeb%E7%9F%A5%E8%AF%86%E7%AC%94%E8%AE%B0%E2%80%94%E2%80%94Request-Response/1628863270545.png" alt="1628863270545"></p><p>答案也比较简单，我们可以在代码中动态去获取项目访问的虚拟目录，具体如何获取，我们可以借助前面咱们所学习的request对象中的getContextPath()方法，修改后的代码如下:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@WebServlet</span><span class="token punctuation">(</span><span class="token string">"/resp1"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ResponseDemo1</span> <span class="token keyword">extends</span> <span class="token class-name">HttpServlet</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doGet</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"resp1...."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//简化方式完成重定向</span>        <span class="token comment">//动态获取虚拟目录</span>        <span class="token class-name">String</span> contextPath <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getContextPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        response<span class="token punctuation">.</span><span class="token function">sendRedirect</span><span class="token punctuation">(</span>contextPath<span class="token operator">+</span><span class="token string">"/resp2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doPost</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">doGet</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>重新启动访问测试，功能依然能够实现，此时就可以动态获取项目访问的虚拟路径，从而降低代码的耦合度。</p><h3 id="3-4-Response响应字符数据"><a href="#3-4-Response响应字符数据" class="headerlink" title="3.4 Response响应字符数据"></a>3.4 Response响应字符数据</h3><p>要想将字符数据写回到浏览器，我们需要两个步骤:</p><ul><li><p>通过Response对象获取字符输出流： PrintWriter writer = resp.getWriter();</p></li><li><p>通过字符输出流写数据: writer.write(“aaa”);</p></li></ul><p>接下来，我们实现通过些案例把响应字符数据给实际应用下:</p><ol><li>返回一个简单的字符串<code>aaa</code></li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * 响应字符数据：设置字符数据的响应体 */</span><span class="token annotation punctuation">@WebServlet</span><span class="token punctuation">(</span><span class="token string">"/resp3"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ResponseDemo3</span> <span class="token keyword">extends</span> <span class="token class-name">HttpServlet</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doGet</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>        response<span class="token punctuation">.</span><span class="token function">setContentType</span><span class="token punctuation">(</span><span class="token string">"text/html;charset=utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//1. 获取字符输出流</span>        <span class="token class-name">PrintWriter</span> writer <span class="token operator">=</span> response<span class="token punctuation">.</span><span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> writer<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"aaa"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doPost</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">doGet</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/../images/JavaWeb%E7%9F%A5%E8%AF%86%E7%AC%94%E8%AE%B0%E2%80%94%E2%80%94Request-Response/1628863905362.png"></p><ol start="2"><li>返回一串html字符串，并且能被浏览器解析</li></ol><pre class="line-numbers language-none"><code class="language-none">PrintWriter writer = response.getWriter();//content-type，告诉浏览器返回的数据类型是HTML类型数据，这样浏览器才会解析HTML标签response.setHeader("content-type","text/html");writer.write("&lt;h1&gt;aaa&lt;/h1&gt;");<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/../images/JavaWeb%E7%9F%A5%E8%AF%86%E7%AC%94%E8%AE%B0%E2%80%94%E2%80%94Request-Response/1628864140820.png"></p><p>==注意:==一次请求响应结束后，response对象就会被销毁掉，所以不要手动关闭流。</p><ol start="3"><li>返回一个中文的字符串<code>你好</code>，需要注意设置响应数据的编码为<code>utf-8</code></li></ol><pre class="line-numbers language-none"><code class="language-none">//设置响应的数据格式及数据的编码response.setContentType("text/html;charset=utf-8");writer.write("你好");<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="/../images/JavaWeb%E7%9F%A5%E8%AF%86%E7%AC%94%E8%AE%B0%E2%80%94%E2%80%94Request-Response/1628864390263.png"></p><h3 id="3-3-Response响应字节数据"><a href="#3-3-Response响应字节数据" class="headerlink" title="3.3 Response响应字节数据"></a>3.3 Response响应字节数据</h3><p>要想将字节数据写回到浏览器，我们需要两个步骤:</p><ul><li><p>通过Response对象获取字节输出流：ServletOutputStream outputStream = resp.getOutputStream();</p></li><li><p>通过字节输出流写数据: outputStream.write(字节数据);</p></li></ul><p>接下来，我们实现通过些案例把响应字符数据给实际应用下:</p><ol><li>返回一个图片文件到浏览器</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * 响应字节数据：设置字节数据的响应体 */</span><span class="token annotation punctuation">@WebServlet</span><span class="token punctuation">(</span><span class="token string">"/resp4"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ResponseDemo4</span> <span class="token keyword">extends</span> <span class="token class-name">HttpServlet</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doGet</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>        <span class="token comment">//1. 读取文件</span>        <span class="token class-name">FileInputStream</span> fis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">"d://a.jpg"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//2. 获取response字节输出流</span>        <span class="token class-name">ServletOutputStream</span> os <span class="token operator">=</span> response<span class="token punctuation">.</span><span class="token function">getOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//3. 完成流的copy</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> buff <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> len <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>len <span class="token operator">=</span> fis<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>buff<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            os<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>buff<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>len<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        fis<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doPost</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">doGet</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/../images/JavaWeb%E7%9F%A5%E8%AF%86%E7%AC%94%E8%AE%B0%E2%80%94%E2%80%94Request-Response/1628864883564.png"></p><p>上述代码中，对于流的copy的代码还是比较复杂的，所以我们可以使用别人提供好的方法来简化代码的开发，具体的步骤是:</p><p>(1)pom.xml添加依赖</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>commons-io<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>commons-io<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>2.6<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>(2)调用工具类方法</p><pre class="line-numbers language-none"><code class="language-none">//fis:输入流//os:输出流IOUtils.copy(fis,os);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>优化后的代码:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * 响应字节数据：设置字节数据的响应体 */</span><span class="token annotation punctuation">@WebServlet</span><span class="token punctuation">(</span><span class="token string">"/resp4"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ResponseDemo4</span> <span class="token keyword">extends</span> <span class="token class-name">HttpServlet</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doGet</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>        <span class="token comment">//1. 读取文件</span>        <span class="token class-name">FileInputStream</span> fis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">"d://a.jpg"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//2. 获取response字节输出流</span>        <span class="token class-name">ServletOutputStream</span> os <span class="token operator">=</span> response<span class="token punctuation">.</span><span class="token function">getOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//3. 完成流的copy</span>      <span class="token class-name">IOUtils</span><span class="token punctuation">.</span><span class="token function">copy</span><span class="token punctuation">(</span>fis<span class="token punctuation">,</span>os<span class="token punctuation">)</span><span class="token punctuation">;</span>        fis<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doPost</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">doGet</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4，用户注册登录案例"><a href="#4，用户注册登录案例" class="headerlink" title="4，用户注册登录案例"></a>4，用户注册登录案例</h2><p>接下来我们通过两个比较常见的案例，一个是==注册==，一个是==登录==来对今天学习的内容进行一个实战演练，首先来实现用户登录。</p><h3 id="4-1-用户登录"><a href="#4-1-用户登录" class="headerlink" title="4.1 用户登录"></a>4.1 用户登录</h3><h4 id="4-1-1-需求分析"><a href="#4-1-1-需求分析" class="headerlink" title="4.1.1 需求分析"></a>4.1.1 需求分析</h4><p><img src="/../images/JavaWeb%E7%9F%A5%E8%AF%86%E7%AC%94%E8%AE%B0%E2%80%94%E2%80%94Request-Response/1628865728305.png"></p><ol><li>用户在登录页面输入用户名和密码，提交请求给LoginServlet</li><li>在LoginServlet中接收请求和数据[用户名和密码]</li><li>在LoginServlt中通过Mybatis实现调用UserMapper来根据用户名和密码查询数据库表</li><li>将查询的结果封装到User对象中进行返回</li><li>在LoginServlet中判断返回的User对象是否为null</li><li>如果为nul，说明根据用户名和密码没有查询到用户，则登录失败，返回”登录失败”数据给前端</li><li>如果不为null,则说明用户存在并且密码正确，则登录成功，返回”登录成功”数据给前端</li></ol><h4 id="4-1-2-环境准备"><a href="#4-1-2-环境准备" class="headerlink" title="4.1.2 环境准备"></a>4.1.2 环境准备</h4><ol><li>复制资料中的静态页面到项目的webapp目录下</li></ol><p>参考<code>资料\1. 登陆注册案例\1. 静态页面</code>,拷贝完效果如下:</p><p><img src="/../images/JavaWeb%E7%9F%A5%E8%AF%86%E7%AC%94%E8%AE%B0%E2%80%94%E2%80%94Request-Response/1628866248169.png"></p><ol start="2"><li>创建db1数据库，创建tb_user表，创建User实体类</li></ol><p>2.1 将<code>资料\1. 登陆注册案例\2. MyBatis环境\tb_user.sql</code>中的sql语句执行下:</p><p><img src="/../images/JavaWeb%E7%9F%A5%E8%AF%86%E7%AC%94%E8%AE%B0%E2%80%94%E2%80%94Request-Response/1628866403891.png"></p><p> 2.2 将<code>资料\1. 登陆注册案例\2. MyBatis环境\User.java</code>拷贝到com.itheima.pojo</p><p><img src="/../images/JavaWeb%E7%9F%A5%E8%AF%86%E7%AC%94%E8%AE%B0%E2%80%94%E2%80%94Request-Response/1628866560738.png"></p><ol start="3"><li>在项目的pom.xml导入Mybatis和Mysql驱动坐标</li></ol><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.mybatis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>mybatis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>3.5.5<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>mysql<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>mysql-connector-java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>5.1.34<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="4"><li>创建mybatis-config.xml核心配置文件，UserMapper.xml映射文件,UserMapper接口</li></ol><p>4.1  将<code>资料\1. 登陆注册案例\2. MyBatis环境\mybatis-config.xml</code>拷贝到resources目录下</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">configuration</span>        <span class="token name">PUBLIC</span> <span class="token string">"-//mybatis.org//DTD Config 3.0//EN"</span>        <span class="token string">"http://mybatis.org/dtd/mybatis-3-config.dtd"</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!--起别名--&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>typeAliases</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>package</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.itheima.pojo<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>typeAliases</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>environments</span> <span class="token attr-name">default</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>development<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>environment</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>development<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>transactionManager</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>JDBC<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dataSource</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>POOLED<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>driver<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.mysql.jdbc.Driver<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>                <span class="token comment">&lt;!--                    useSSL:关闭SSL安全连接 性能更高                    useServerPrepStmts:开启预编译功能                    &amp;amp; 等同于 &amp; ,xml配置文件中不能直接写 &amp;符号                --&gt;</span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>url<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>jdbc:mysql:///db1?useSSL=false<span class="token entity named-entity" title="&amp;">&amp;amp;</span>useServerPrepStmts=true<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>root<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>1234<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dataSource</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>environment</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>environments</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mappers</span><span class="token punctuation">&gt;</span></span>        <span class="token comment">&lt;!--扫描mapper--&gt;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>package</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.itheima.mapper<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mappers</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>4.2 在com.itheima.mapper包下创建UserMapper接口</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">UserMapper</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>4.3 将<code>资料\1. 登陆注册案例\2. MyBatis环境\UserMapper.xml</code>拷贝到resources目录下</p><p>==注意：在resources下创建UserMapper.xml的目录时，要使用/分割==</p><p><img src="/../images/JavaWeb%E7%9F%A5%E8%AF%86%E7%AC%94%E8%AE%B0%E2%80%94%E2%80%94Request-Response/1628867237329.png"></p><p>至此我们所需要的环境就都已经准备好了，具体该如何实现?</p><h4 id="4-1-3-代码实现"><a href="#4-1-3-代码实现" class="headerlink" title="4.1.3 代码实现"></a>4.1.3 代码实现</h4><ol><li>在UserMapper接口中提供一个根据用户名和密码查询用户对象的方法</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/**     * 根据用户名和密码查询用户对象     * @param username     * @param password     * @return     */</span>    <span class="token annotation punctuation">@Select</span><span class="token punctuation">(</span><span class="token string">"select * from tb_user where username = #{username} and password = #{password}"</span><span class="token punctuation">)</span>    <span class="token class-name">User</span> <span class="token function">select</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Param</span><span class="token punctuation">(</span><span class="token string">"username"</span><span class="token punctuation">)</span> <span class="token class-name">String</span> username<span class="token punctuation">,</span><span class="token annotation punctuation">@Param</span><span class="token punctuation">(</span><span class="token string">"password"</span><span class="token punctuation">)</span>  <span class="token class-name">String</span> password<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>说明</strong></p><p>@Param注解的作用:用于传递参数,是方法的参数可以与SQL中的字段名相对应。</p><ol start="2"><li>修改loign.html</li></ol><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>login<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>css/login.css<span class="token punctuation">"</span></span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>loginDiv<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/request-demo/loginServlet<span class="token punctuation">"</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>post<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>form<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>loginMsg<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>LOGIN IN<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>Username:<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>Password:<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>subDiv<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>login up<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>reset<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>reset<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token entity named-entity" title="&nbsp;">&amp;nbsp;</span><span class="token entity named-entity" title="&nbsp;">&amp;nbsp;</span><span class="token entity named-entity" title="&nbsp;">&amp;nbsp;</span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>register.html<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>没有账号？点击注册<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="3"><li>编写LoginServlet</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@WebServlet</span><span class="token punctuation">(</span><span class="token string">"/loginServlet"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LoginServlet</span> <span class="token keyword">extends</span> <span class="token class-name">HttpServlet</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doGet</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>        <span class="token comment">//1. 接收用户名和密码</span>        <span class="token class-name">String</span> username <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getParameter</span><span class="token punctuation">(</span><span class="token string">"username"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> password <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getParameter</span><span class="token punctuation">(</span><span class="token string">"password"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//2. 调用MyBatis完成查询</span>        <span class="token comment">//2.1 获取SqlSessionFactory对象</span>        <span class="token class-name">String</span> resource <span class="token operator">=</span> <span class="token string">"mybatis-config.xml"</span><span class="token punctuation">;</span>        <span class="token class-name">InputStream</span> inputStream <span class="token operator">=</span> <span class="token class-name">Resources</span><span class="token punctuation">.</span><span class="token function">getResourceAsStream</span><span class="token punctuation">(</span>resource<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">SqlSessionFactory</span> sqlSessionFactory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SqlSessionFactoryBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span>inputStream<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//2.2 获取SqlSession对象</span>        <span class="token class-name">SqlSession</span> sqlSession <span class="token operator">=</span> sqlSessionFactory<span class="token punctuation">.</span><span class="token function">openSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//2.3 获取Mapper</span>        <span class="token class-name">UserMapper</span> userMapper <span class="token operator">=</span> sqlSession<span class="token punctuation">.</span><span class="token function">getMapper</span><span class="token punctuation">(</span><span class="token class-name">UserMapper</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//2.4 调用方法</span>        <span class="token class-name">User</span> user <span class="token operator">=</span> userMapper<span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span>username<span class="token punctuation">,</span> password<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//2.5 释放资源</span>        sqlSession<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//获取字符输出流，并设置content type</span>        response<span class="token punctuation">.</span><span class="token function">setContentType</span><span class="token punctuation">(</span><span class="token string">"text/html;charset=utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">PrintWriter</span> writer <span class="token operator">=</span> response<span class="token punctuation">.</span><span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//3. 判断user释放为null</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>user <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token comment">// 登陆成功</span>            writer<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"登陆成功"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token comment">// 登陆失败</span>            writer<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"登陆失败"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doPost</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">doGet</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="4"><li>启动服务器测试</li></ol><p>4.1 如果用户名和密码输入错误，则</p><p><img src="/../images/JavaWeb%E7%9F%A5%E8%AF%86%E7%AC%94%E8%AE%B0%E2%80%94%E2%80%94Request-Response/1628867761245.png"></p><p>4.2 如果用户名和密码输入正确，则</p><p><img src="/../images/JavaWeb%E7%9F%A5%E8%AF%86%E7%AC%94%E8%AE%B0%E2%80%94%E2%80%94Request-Response/1628867801708.png"></p><p>至此用户的登录功能就已经完成了~</p><h3 id="4-2-用户注册"><a href="#4-2-用户注册" class="headerlink" title="4.2 用户注册"></a>4.2 用户注册</h3><h4 id="4-2-1-需求分析"><a href="#4-2-1-需求分析" class="headerlink" title="4.2.1 需求分析"></a>4.2.1 需求分析</h4><p><img src="/../images/JavaWeb%E7%9F%A5%E8%AF%86%E7%AC%94%E8%AE%B0%E2%80%94%E2%80%94Request-Response/1628867904783.png"></p><ol><li>用户在注册页面输入用户名和密码，提交请求给RegisterServlet</li><li>在RegisterServlet中接收请求和数据[用户名和密码]</li><li>在RegisterServlet中通过Mybatis实现调用UserMapper来根据用户名查询数据库表</li><li>将查询的结果封装到User对象中进行返回</li><li>在RegisterServlet中判断返回的User对象是否为null</li><li>如果为nul，说明根据用户名可用，则调用UserMapper来实现添加用户</li><li>如果不为null,则说明用户不可以，返回”用户名已存在”数据给前端</li></ol><h4 id="4-2-2-代码编写"><a href="#4-2-2-代码编写" class="headerlink" title="4.2.2 代码编写"></a>4.2.2 代码编写</h4><ol><li>编写UserMapper提供根据用户名查询用户数据方法和添加用户方法</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/*** 根据用户名查询用户对象* @param username* @return*/</span><span class="token annotation punctuation">@Select</span><span class="token punctuation">(</span><span class="token string">"select * from tb_user where username = #{username}"</span><span class="token punctuation">)</span><span class="token class-name">User</span> <span class="token function">selectByUsername</span><span class="token punctuation">(</span><span class="token class-name">String</span> username<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/*** 添加用户* @param user*/</span><span class="token annotation punctuation">@Insert</span><span class="token punctuation">(</span><span class="token string">"insert into tb_user values(null,#{username},#{password})"</span><span class="token punctuation">)</span><span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token class-name">User</span> user<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li>修改register.html</li></ol><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>欢迎注册<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>css/register.css<span class="token punctuation">"</span></span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>form-div<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>reg-content<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">&gt;</span></span>欢迎注册<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">&gt;</span></span>已有帐号？<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">&gt;</span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>login.html<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>登录<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>reg-form<span class="token punctuation">"</span></span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/request-demo/registerServlet<span class="token punctuation">"</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>post<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>table</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">&gt;</span></span>用户名<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>inputs<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">&gt;</span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>username_err<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>err_msg<span class="token punctuation">"</span></span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value css language-css"><span class="token property">display</span><span class="token punctuation">:</span> none</span><span class="token punctuation">"</span></span></span><span class="token punctuation">&gt;</span></span>用户名不太受欢迎<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">&gt;</span></span>密码<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>inputs<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">&gt;</span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>password_err<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>err_msg<span class="token punctuation">"</span></span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value css language-css"><span class="token property">display</span><span class="token punctuation">:</span> none</span><span class="token punctuation">"</span></span></span><span class="token punctuation">&gt;</span></span>密码格式有误<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>table</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>buttons<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>注 册<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>reg_btn<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>clear<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="3"><li>创建RegisterServlet类</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@WebServlet</span><span class="token punctuation">(</span><span class="token string">"/registerServlet"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RegisterServlet</span> <span class="token keyword">extends</span> <span class="token class-name">HttpServlet</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doGet</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>        <span class="token comment">//1. 接收用户数据</span>        <span class="token class-name">String</span> username <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getParameter</span><span class="token punctuation">(</span><span class="token string">"username"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> password <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getParameter</span><span class="token punctuation">(</span><span class="token string">"password"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//封装用户对象</span>        <span class="token class-name">User</span> user <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        user<span class="token punctuation">.</span><span class="token function">setUsername</span><span class="token punctuation">(</span>username<span class="token punctuation">)</span><span class="token punctuation">;</span>        user<span class="token punctuation">.</span><span class="token function">setPassword</span><span class="token punctuation">(</span>password<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//2. 调用mapper 根据用户名查询用户对象</span>        <span class="token comment">//2.1 获取SqlSessionFactory对象</span>        <span class="token class-name">String</span> resource <span class="token operator">=</span> <span class="token string">"mybatis-config.xml"</span><span class="token punctuation">;</span>        <span class="token class-name">InputStream</span> inputStream <span class="token operator">=</span> <span class="token class-name">Resources</span><span class="token punctuation">.</span><span class="token function">getResourceAsStream</span><span class="token punctuation">(</span>resource<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">SqlSessionFactory</span> sqlSessionFactory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SqlSessionFactoryBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span>inputStream<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//2.2 获取SqlSession对象</span>        <span class="token class-name">SqlSession</span> sqlSession <span class="token operator">=</span> sqlSessionFactory<span class="token punctuation">.</span><span class="token function">openSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//2.3 获取Mapper</span>        <span class="token class-name">UserMapper</span> userMapper <span class="token operator">=</span> sqlSession<span class="token punctuation">.</span><span class="token function">getMapper</span><span class="token punctuation">(</span><span class="token class-name">UserMapper</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//2.4 调用方法</span>        <span class="token class-name">User</span> u <span class="token operator">=</span> userMapper<span class="token punctuation">.</span><span class="token function">selectByUsername</span><span class="token punctuation">(</span>username<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//3. 判断用户对象释放为null</span>        <span class="token keyword">if</span><span class="token punctuation">(</span> u <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token comment">// 用户名不存在，添加用户</span>            userMapper<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 提交事务</span>            sqlSession<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 释放资源</span>            sqlSession<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token comment">// 用户名存在，给出提示信息</span>            response<span class="token punctuation">.</span><span class="token function">setContentType</span><span class="token punctuation">(</span><span class="token string">"text/html;charset=utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            response<span class="token punctuation">.</span><span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"用户名已存在"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doPost</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">doGet</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="4"><li>启动服务器进行测试</li></ol><p>4.1 如果测试成功，则在数据库中就能查看到新注册的数据</p><p>4.2 如果用户已经存在，则在页面上展示 <code>用户名已存在</code> 的提示信息</p><h3 id="4-3-SqlSessionFactory工具类抽取"><a href="#4-3-SqlSessionFactory工具类抽取" class="headerlink" title="4.3 SqlSessionFactory工具类抽取"></a>4.3 SqlSessionFactory工具类抽取</h3><p>上面两个功能已经实现，但是在写Servlet的时候，因为需要使用Mybatis来完成数据库的操作，所以对于Mybatis的基础操作就出现了些重复代码，如下</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">String</span> resource <span class="token operator">=</span> <span class="token string">"mybatis-config.xml"</span><span class="token punctuation">;</span><span class="token class-name">InputStream</span> inputStream <span class="token operator">=</span> <span class="token class-name">Resources</span><span class="token punctuation">.</span><span class="token function">getResourceAsStream</span><span class="token punctuation">(</span>resource<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">SqlSessionFactory</span> sqlSessionFactory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SqlSessionFactoryBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span>inputStream<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>有了这些重复代码就会造成一些问题:</p><ul><li>重复代码不利于后期的维护</li><li>SqlSessionFactory工厂类进行重复创建<ul><li>就相当于每次买手机都需要重新创建一个手机生产工厂来给你制造一个手机一样，资源消耗非常大但性能却非常低。所以这么做是不允许的。</li></ul></li></ul><p>那如何来优化呢？</p><ul><li>代码重复可以抽取工具类</li><li>对指定代码只需要执行一次可以使用静态代码块</li></ul><p>有了这两个方向后，代码具体该如何编写?</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SqlSessionFactoryUtils</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">SqlSessionFactory</span> sqlSessionFactory<span class="token punctuation">;</span>    <span class="token keyword">static</span> <span class="token punctuation">{</span>        <span class="token comment">//静态代码块会随着类的加载而自动执行，且只执行一次</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token class-name">String</span> resource <span class="token operator">=</span> <span class="token string">"mybatis-config.xml"</span><span class="token punctuation">;</span>            <span class="token class-name">InputStream</span> inputStream <span class="token operator">=</span> <span class="token class-name">Resources</span><span class="token punctuation">.</span><span class="token function">getResourceAsStream</span><span class="token punctuation">(</span>resource<span class="token punctuation">)</span><span class="token punctuation">;</span>            sqlSessionFactory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SqlSessionFactoryBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span>inputStream<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">SqlSessionFactory</span> <span class="token function">getSqlSessionFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> sqlSessionFactory<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>工具类抽取以后，以后在对Mybatis的SqlSession进行操作的时候，就可以直接使用</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">SqlSessionFactory</span> sqlSessionFactory <span class="token operator">=</span><span class="token class-name">SqlSessionFactoryUtils</span><span class="token punctuation">.</span><span class="token function">getSqlSessionFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这样就可以很好的解决上面所说的代码重复和重复创建工厂导致性能低的问题了。</p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 系统笔记 </tag>
            
            <tag> JavaWeb </tag>
            
            <tag> Request&amp;Response </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaWeb知识笔记——HTTP&amp;Tomcat&amp;Servlet</title>
      <link href="/2023/02/02/javaweb-zhi-shi-bi-ji-http-tomcat-servlet/"/>
      <url>/2023/02/02/javaweb-zhi-shi-bi-ji-http-tomcat-servlet/</url>
      
        <content type="html"><![CDATA[<h2 id="HTTP-amp-Tomcat-amp-Servlet"><a href="#HTTP-amp-Tomcat-amp-Servlet" class="headerlink" title="HTTP&amp;Tomcat&amp;Servlet"></a>HTTP&amp;Tomcat&amp;Servlet</h2><p><strong>学习目标：</strong></p><blockquote><ul><li>了解JavaWeb开发的技术栈</li><li>理解HTTP协议和HTTP请求与响应数据的格式</li><li>掌握Tomcat的使用</li><li>掌握在IDEA中使用Tomcat插件</li><li>理解Servlet的执行流程和生命周期</li><li>掌握Servlet的使用和相关配置</li></ul></blockquote><h2 id="1，Web概述"><a href="#1，Web概述" class="headerlink" title="1，Web概述"></a>1，Web概述</h2><h3 id="1-1-Web和JavaWeb的概念"><a href="#1-1-Web和JavaWeb的概念" class="headerlink" title="1.1 Web和JavaWeb的概念"></a>1.1 Web和JavaWeb的概念</h3><p>==Web是全球广域网，也称为万维网(www)，能够通过浏览器访问的网站。==<br>在我们日常的生活中，经常会使用浏览器去访问<code>百度</code>、<code>京东</code>、<code>传智官网</code>等这些网站，这些网站统称为Web网站。如下就是通过浏览器访问传智官网的界面:<br><img src="/../images/HTTP-Tomcat-Servlet/1627031023395.png"><br>我们知道了什么是Web，那么JavaWeb又是什么呢？顾名思义==JavaWeb就是用Java技术来解决相关web互联网领域的技术栈。==<br>等学习完JavaWeb之后，同学们就可以使用Java语言开发我们上述所说的网站。而国内很多大型网站公司也是首选Java语言来解决web互联网相关的问题。那都有哪些公司的系统是使用Java语言的呢?<br> <img src="/../images/HTTP-Tomcat-Servlet/20210717183958532.png"><br>使用Java语言开发互联网系统是有很多技术栈需要大家了解，具体都有哪些呢?</p><h3 id="1-2-JavaWeb技术栈"><a href="#1-2-JavaWeb技术栈" class="headerlink" title="1.2 JavaWeb技术栈"></a>1.2 JavaWeb技术栈</h3><p>了解JavaWeb技术栈之前，有一个很重要的概念要介绍。</p><h4 id="1-2-1-B-x2F-S架构"><a href="#1-2-1-B-x2F-S架构" class="headerlink" title="1.2.1 B/S架构"></a>1.2.1 B/S架构</h4><p>什么是B/S架构?<br>B/S 架构：Browser/Server，浏览器/服务器 架构模式，它的特点是，客户端只需要浏览器，应用程序的逻辑和数据都存储在服务器端。浏览器只需要请求服务器，获取Web资源，服务器把Web资源发送给浏览器即可。大家可以通过下面这张图来回想下我们平常的上网过程:<br><img src="/../images/HTTP-Tomcat-Servlet/1627031933553.png"></p><ul><li>打开浏览器访问百度首页，输入要搜索的内容，点击回车或百度一下，就可以获取和搜索相关的内容</li><li>思考下搜索的内容并不在我们自己的点上，那么这些内容从何而来？答案很明显是从百度服务器返回给我们的</li><li>日常百度的小细节，逢年过节百度的logo会更换不同的图片，服务端发生变化，客户端不需做任务事情就能获取最新内容</li><li>所以说B/S架构的好处:易于维护升级：服务器端升级后，客户端无需任何部署就可以使用到新的版本。<br>了解了什么是B/S架构后，作为后台开发工程师的我们将来主要关注的是服务端的开发和维护工作。在服务端将来会放很多资源,都有哪些资源呢?</li></ul><h4 id="1-2-2-静态资源"><a href="#1-2-2-静态资源" class="headerlink" title="1.2.2 静态资源"></a>1.2.2 静态资源</h4><ul><li>静态资源主要包含HTML、CSS、JavaScript、图片等，主要负责页面的展示。</li><li>我们之前已经学过前端网页制作<code>三剑客</code>(HTML+CSS+JavaScript),使用这些技术我们就可以制作出效果比较丰富的网页，将来展现给用户。但是由于做出来的这些内容都是静态的，这就会导致所有的人看到的内容将是一模一样。</li><li>在日常上网的过程中，我们除了看到这些好看的页面以外，还会碰到很多动态内容，比如我们常见的百度登录效果:<br><img src="/../images/HTTP-Tomcat-Servlet/1627037814180.png"><br><code>张三</code>登录以后在网页的右上角看到的是 <code>张三</code>，而<code>李四</code>登录以后看到的则是<code>李四</code>。所以不同的用户访问相同的资源看到的内容大多数是不一样的，要想实现这样的效果，光靠静态资源是无法实现的。</li></ul><h4 id="1-2-3-动态资源"><a href="#1-2-3-动态资源" class="headerlink" title="1.2.3 动态资源"></a>1.2.3 动态资源</h4><ul><li>动态资源主要包含Servlet、JSP等，主要用来负责逻辑处理。</li><li>动态资源处理完逻辑后会把得到的结果交给静态资源来进行展示，动态资源和静态资源要结合一起使用。</li><li>动态资源虽然可以处理逻辑，但是当用户来登录百度的时候，就需要输入<code>用户名</code>和<code>密码</code>,这个时候我们就又需要解决的一个问题是，用户在注册的时候填入的用户名和密码、以及我们经常会访问到一些数据列表的内容展示(如下图所示)，这些数据都存储在哪里?我们需要的时候又是从哪里来取呢?<br><img src="/../images/HTTP-Tomcat-Servlet/1627038674340.png"></li></ul><h4 id="1-2-4-数据库"><a href="#1-2-4-数据库" class="headerlink" title="1.2.4 数据库"></a>1.2.4 数据库</h4><ul><li>数据库主要负责存储数据。</li><li>整个Web的访问过程就如下图所示:<br><img src="/../images/HTTP-Tomcat-Servlet/1627039320220.png"><br>(1)浏览器发送一个请求到服务端，去请求所需要的相关资源;<br>(2)资源分为动态资源和静态资源,动态资源可以是使用Java代码按照Servlet和JSP的规范编写的内容;<br>(3)在Java代码可以进行业务处理也可以从数据库中读取数据;<br>(4)拿到数据后，把数据交给HTML页面进行展示,再结合CSS和JavaScript使展示效果更好;<br>(5)服务端将静态资源响应给浏览器;<br>(6)浏览器将这些资源进行解析;<br>(7)解析后将效果展示在浏览器，用户就可以看到最终的结果。<br>在整个Web的访问过程中，会设计到很多技术，这些技术有已经学习过的，也有还未涉及到的内容，都有哪些还没有涉及到呢?</li></ul><h4 id="1-2-5-HTTP协议"><a href="#1-2-5-HTTP协议" class="headerlink" title="1.2.5 HTTP协议"></a>1.2.5 HTTP协议</h4><ul><li>HTTP协议:主要定义通信规则</li><li>浏览器发送请求给服务器，服务器响应数据给浏览器，这整个过程都需要遵守一定的规则，之前大家学习过TCP、UDP，这些都属于规则，这里我们需要使用的是HTTP协议，这也是一种规则。</li></ul><h4 id="1-2-6-Web服务器"><a href="#1-2-6-Web服务器" class="headerlink" title="1.2.6 Web服务器"></a>1.2.6 Web服务器</h4><ul><li>Web服务器:负责解析 HTTP 协议，解析请求数据，并发送响应数据</li><li>浏览器按照HTTP协议发送请求和数据，后台就需要一个Web服务器软件来根据HTTP协议解析请求和数据，然后把处理结果再按照HTTP协议发送给浏览器</li><li>Web服务器软件有很多，我们课程中将学习的是目前最为常用的==Tomcat==服务器</li></ul><p>到这为止，关于JavaWeb中用到的技术栈我们就介绍完了，这里面就只有HTTP协议、Servlet、JSP以及Tomcat这些知识是没有学习过的，所以整个Web核心主要就是来学习这些技术。</p><h3 id="1-3-Web核心课程安排"><a href="#1-3-Web核心课程安排" class="headerlink" title="1.3 Web核心课程安排"></a>1.3 Web核心课程安排</h3><p><img src="/../images/HTTP-Tomcat-Servlet/1627043194238.png"></p><p>整个Web核心，我们总共有六天的学习内容，分别是:</p><ul><li>第一天：HTTP、Tomcat、Servlet</li><li>第二天：Request(请求)、Response(响应)</li><li>第三天：JSP、会话技术(Cookie、Session)</li><li>第四天：Filter(过滤器)、Listener(监听器)</li><li>第五天：Ajax、Vue、ElementUI</li><li>第六天：综合案例</li></ul><p>(1)Request是从客户端向服务端发出的请求对象，</p><p>(2)Response是从服务端响应给客户端的结果对象，</p><p>(3)JSP是动态网页技术,</p><p>(4)会话技术是用来存储客户端和服务端交互所产生的数据，</p><p>(5)过滤器是用来拦截客户端的请求,</p><p>(6)监听器是用来监听特定事件,</p><p>(7)Ajax、Vue、ElementUI都是属于前端技术</p><p>这些技术都该如何来使用，我们后面会一个个进行详细的讲解。接下来我们来学习下HTTP、Tomcat和Servlet。 </p><h2 id="2-HTTP"><a href="#2-HTTP" class="headerlink" title="2, HTTP"></a>2, HTTP</h2><h3 id="2-1-简介"><a href="#2-1-简介" class="headerlink" title="2.1 简介"></a>2.1 简介</h3><p><strong>HTTP概念</strong></p><p>HyperText Transfer Protocol，超文本传输协议，规定了浏览器和服务器之间==数据传输的规则==。</p><ul><li>数据传输的规则指的是请求数据和响应数据需要按照指定的格式进行传输。</li><li>如果想知道具体的格式，可以打开浏览器，点击<code>F12</code>打开开发者工具，点击<code>Network</code>来查看某一次请求的请求数据和响应数据具体的格式内容，如下图所示:</li></ul><p><img src="/../images/HTTP-Tomcat-Servlet/1627046235092.png"></p><blockquote><p>注意:在浏览器中如果看不到上述内容，需要清除浏览器的浏览数据。chrome浏览器可以使用ctrl+shift+Del进行清除。</p></blockquote><p>==所以学习HTTP主要就是学习请求和响应数据的具体格式内容。==</p><p><strong>HTTP协议特点</strong></p><p>HTTP协议有它自己的一些特点，分别是:</p><ul><li><p>基于TCP协议: 面向连接，安全</p><p>TCP是一种面向连接的(建立连接之前是需要经过三次握手)、可靠的、基于字节流的传输层通信协议，在数据传输方面更安全。</p></li><li><p>基于请求-响应模型的:一次请求对应一次响应</p><p>请求和响应是一一对应关系</p></li><li><p>HTTP协议是无状态协议:对于事物处理没有记忆能力。每次请求-响应都是独立的</p><p>无状态指的是客户端发送HTTP请求给服务端之后，服务端根据请求响应数据，响应完后，不会记录任何信息。这种特性有优点也有缺点，</p><ul><li>缺点:多次请求间不能共享数据</li><li>优点:速度快</li></ul><p>请求之间无法共享数据会引发的问题，如:</p><ul><li>京东购物，<code>加入购物车</code>和<code>去购物车结算</code>是两次请求，</li><li>HTTP协议的无状态特性，加入购物车请求响应结束后，并未记录加入购物车是何商品</li><li>发起去购物车结算的请求后，因为无法获取哪些商品加入了购物车，会导致此次请求无法正确展示数据</li></ul><p>具体使用的时候，我们发现京东是可以正常展示数据的，原因是Java早已考虑到这个问题，并提出了使用<code>会话技术(Cookie、Session)</code>来解决这个问题。具体如何来做，我们后面会详细讲到。刚才提到HTTP协议是规定了请求和响应数据的格式，那具体的格式是什么呢?</p></li></ul><h3 id="2-2-请求数据格式"><a href="#2-2-请求数据格式" class="headerlink" title="2.2 请求数据格式"></a>2.2 请求数据格式</h3><h4 id="2-2-1-格式介绍"><a href="#2-2-1-格式介绍" class="headerlink" title="2.2.1 格式介绍"></a>2.2.1 格式介绍</h4><p>请求数据总共分为三部分内容，分别是==请求行==、==请求头==、==请求体==</p><p><img src="/../images/HTTP-Tomcat-Servlet/1627050004221.png"></p><ul><li><p>请求行: HTTP请求中的第一行数据，请求行包含三块内容，分别是 GET[请求方式] /[请求URL路径] HTTP/1.1[HTTP协议及版本]</p><p>请求方式有七种,最常用的是GET和POST</p></li><li><p>请求头: 第二行开始，格式为key: value形式</p><p>请求头中会包含若干个属性，常见的HTTP请求头有:</p><pre class="line-numbers language-none"><code class="language-none">Host: 表示请求的主机名User-Agent: 浏览器版本,例如Chrome浏览器的标识类似Mozilla/5.0 ...Chrome/79，IE浏览器的标识类似Mozilla/5.0 (Windows NT ...)like Gecko；Accept：表示浏览器能接收的资源类型，如text/*，image/*或者*/*表示所有；Accept-Language：表示浏览器偏好的语言，服务器可以据此返回不同语言的网页；Accept-Encoding：表示浏览器可以支持的压缩类型，例如gzip, deflate等。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p> ==这些数据有什么用处?==</p><p>举例说明:服务端可以根据请求头中的内容来获取客户端的相关信息，有了这些信息服务端就可以处理不同的业务需求，比如:</p><ul><li>不同浏览器解析HTML和CSS标签的结果会有不一致，所以就会导致相同的代码在不同的浏览器会出现不同的效果</li><li>服务端根据客户端请求头中的数据获取到客户端的浏览器类型，就可以根据不同的浏览器设置不同的代码来达到一致的效果</li><li>这就是我们常说的浏览器兼容问题</li></ul></li><li><p>请求体: POST请求的最后一部分，存储请求参数</p><p><img src="/../images/HTTP-Tomcat-Servlet/1627050930378.png"></p><p>如上图红线框的内容就是请求体的内容，请求体和请求头之间是有一个空行隔开。此时浏览器发送的是POST请求，为什么不能使用GET呢?这时就需要回顾GET和POST两个请求之间的区别了:</p><ul><li>GET请求请求参数在请求行中，没有请求体，POST请求请求参数在请求体中</li><li>GET请求请求参数大小有限制，POST没有</li></ul></li></ul><h4 id="2-2-2-实例演示"><a href="#2-2-2-实例演示" class="headerlink" title="2.2.2 实例演示"></a>2.2.2 实例演示</h4><p>把 <code>代码\http</code> 拷贝到IDEA的工作目录中，比如<code>D:\workspace\web</code>目录，</p><p><img src="/../images/HTTP-Tomcat-Servlet/1627278511902.png"></p><p>使用IDEA打开</p><p><img src="/../images/HTTP-Tomcat-Servlet/1627278583127.png"></p><p>打开后，可以点击项目中的<code>html\19-表单验证.html</code>，使用浏览器打开，通过修改页面中form表单的method属性来测试GET请求和POST请求的参数携带方式。</p><p><img src="/../images/HTTP-Tomcat-Servlet/1627278725007.png"></p><p><strong>小结</strong>:</p><ol><li><p>请求数据中包含三部分内容，分别是请求行、请求头和请求体</p></li><li><p>POST请求数据在请求体中，GET请求数据在请求行上</p></li></ol><h3 id="2-3-响应数据格式"><a href="#2-3-响应数据格式" class="headerlink" title="2.3 响应数据格式"></a>2.3 响应数据格式</h3><h4 id="2-3-1-格式介绍"><a href="#2-3-1-格式介绍" class="headerlink" title="2.3.1 格式介绍"></a>2.3.1 格式介绍</h4><p>响应数据总共分为三部分内容，分别是==响应行==、==响应头==、==响应体==</p><p><img src="/../images/HTTP-Tomcat-Servlet/1627053710214.png"></p><ul><li><p>响应行：响应数据的第一行,响应行包含三块内容，分别是 HTTP/1.1[HTTP协议及版本] 200[响应状态码] ok[状态码的描述]</p></li><li><p>响应头：第二行开始，格式为key：value形式</p><p>响应头中会包含若干个属性，常见的HTTP响应头有:</p><pre class="line-numbers language-none"><code class="language-none">Content-Type：表示该响应内容的类型，例如text/html，image/jpeg；Content-Length：表示该响应内容的长度（字节数）；Content-Encoding：表示该响应压缩算法，例如gzip；Cache-Control：指示客户端应如何缓存，例如max-age=300表示可以最多缓存300秒<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>响应体： 最后一部分。存放响应数据</p><p>上图中…这部分内容就是响应体，它和响应头之间有一个空行隔开。</p></li></ul><h4 id="2-3-2-响应状态码"><a href="#2-3-2-响应状态码" class="headerlink" title="2.3.2 响应状态码"></a>2.3.2 响应状态码</h4><p>参考: 资料/1.HTTP/《响应状态码.md》</p><p>关于响应状态码，我们先主要认识三个状态码，其余的等后期用到了再去掌握:</p><ul><li>200  ok 客户端请求成功</li><li>404  Not Found 请求资源不存在</li><li>500 Internal Server Error 服务端发生不可预期的错误</li></ul><h4 id="2-3-3-自定义服务器"><a href="#2-3-3-自定义服务器" class="headerlink" title="2.3.3 自定义服务器"></a>2.3.3 自定义服务器</h4><p>在前面我们导入到IDEA中的http项目中，有一个Server.java类，这里面就是自定义的一个服务器代码，主要使用到的是<code>ServerSocket</code>和<code>Socket</code></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>itheima</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">sun<span class="token punctuation">.</span>misc<span class="token punctuation">.</span></span><span class="token class-name">IOUtils</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>net<span class="token punctuation">.</span></span><span class="token class-name">ServerSocket</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>net<span class="token punctuation">.</span></span><span class="token class-name">Socket</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>nio<span class="token punctuation">.</span>charset<span class="token punctuation">.</span></span><span class="token class-name">StandardCharsets</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>nio<span class="token punctuation">.</span>file<span class="token punctuation">.</span></span><span class="token class-name">Files</span></span><span class="token punctuation">;</span><span class="token comment">/*    自定义服务器 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Server</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>        <span class="token class-name">ServerSocket</span> ss <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ServerSocket</span><span class="token punctuation">(</span><span class="token number">8080</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 监听指定端口</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"server is running..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token class-name">Socket</span> sock <span class="token operator">=</span> ss<span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"connected from "</span> <span class="token operator">+</span> sock<span class="token punctuation">.</span><span class="token function">getRemoteSocketAddress</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">Thread</span> t <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Handler</span><span class="token punctuation">(</span>sock<span class="token punctuation">)</span><span class="token punctuation">;</span>            t<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Handler</span> <span class="token keyword">extends</span> <span class="token class-name">Thread</span> <span class="token punctuation">{</span>    <span class="token class-name">Socket</span> sock<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">Handler</span><span class="token punctuation">(</span><span class="token class-name">Socket</span> sock<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>sock <span class="token operator">=</span> sock<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">(</span><span class="token class-name">InputStream</span> input <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>sock<span class="token punctuation">.</span><span class="token function">getInputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">try</span> <span class="token punctuation">(</span><span class="token class-name">OutputStream</span> output <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>sock<span class="token punctuation">.</span><span class="token function">getOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token function">handle</span><span class="token punctuation">(</span>input<span class="token punctuation">,</span> output<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>sock<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> ioe<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token punctuation">}</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"client disconnected."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">handle</span><span class="token punctuation">(</span><span class="token class-name">InputStream</span> input<span class="token punctuation">,</span> <span class="token class-name">OutputStream</span> output<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>        <span class="token class-name">BufferedReader</span> reader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedReader</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">InputStreamReader</span><span class="token punctuation">(</span>input<span class="token punctuation">,</span> <span class="token class-name">StandardCharsets</span><span class="token punctuation">.</span><span class="token constant">UTF_8</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">BufferedWriter</span> writer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedWriter</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">OutputStreamWriter</span><span class="token punctuation">(</span>output<span class="token punctuation">,</span> <span class="token class-name">StandardCharsets</span><span class="token punctuation">.</span><span class="token constant">UTF_8</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 读取HTTP请求:</span>        <span class="token keyword">boolean</span> requestOk <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> first <span class="token operator">=</span> reader<span class="token punctuation">.</span><span class="token function">readLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>first<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">"GET / HTTP/1."</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            requestOk <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">String</span> header <span class="token operator">=</span> reader<span class="token punctuation">.</span><span class="token function">readLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>header<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// 读取到空行时, HTTP Header读取完毕</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>header<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>requestOk <span class="token operator">?</span> <span class="token string">"Response OK"</span> <span class="token operator">:</span> <span class="token string">"Response Error"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>requestOk<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment">// 发送错误响应:</span>            writer<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"HTTP/1.0 404 Not Found\r\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            writer<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"Content-Length: 0\r\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            writer<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"\r\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            writer<span class="token punctuation">.</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token comment">// 发送成功响应:</span>            <span class="token comment">//读取html文件，转换为字符串</span>            <span class="token class-name">BufferedReader</span> br <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedReader</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileReader</span><span class="token punctuation">(</span><span class="token string">"http/html/a.html"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">StringBuilder</span> data <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">String</span> line <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>line <span class="token operator">=</span> br<span class="token punctuation">.</span><span class="token function">readLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                data<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>line<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            br<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> length <span class="token operator">=</span> data<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token class-name">StandardCharsets</span><span class="token punctuation">.</span><span class="token constant">UTF_8</span><span class="token punctuation">)</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span>            writer<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"HTTP/1.1 200 OK\r\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            writer<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"Connection: keep-alive\r\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            writer<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"Content-Type: text/html\r\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            writer<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"Content-Length: "</span> <span class="token operator">+</span> length <span class="token operator">+</span> <span class="token string">"\r\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            writer<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"\r\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 空行标识Header和Body的分隔</span>            writer<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            writer<span class="token punctuation">.</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面代码，大家不需要自己写，主要通过上述代码，只需要大家了解到服务器可以使用java完成编写，是可以接受页面发送的请求和响应数据给前端浏览器的，真正用到的Web服务器，我们不会自己写，都是使用目前比较流行的web服务器，比如==Tomcat==</p><p><strong>小结</strong></p><ol><li><p>响应数据中包含三部分内容，分别是响应行、响应头和响应体</p></li><li><p>掌握200，404，500这三个响应状态码所代表含义，分布是成功、所访问资源不存在和服务的错误</p></li></ol><h2 id="3-Tomcat"><a href="#3-Tomcat" class="headerlink" title="3, Tomcat"></a>3, Tomcat</h2><h3 id="3-1-简介"><a href="#3-1-简介" class="headerlink" title="3.1 简介"></a>3.1 简介</h3><h4 id="3-1-1-什么是Web服务器"><a href="#3-1-1-什么是Web服务器" class="headerlink" title="3.1.1 什么是Web服务器"></a>3.1.1 什么是Web服务器</h4><p>Web服务器是一个应用程序（==软件==），对HTTP协议的操作进行封装，使得程序员不必直接对协议进行操作，让Web开发更加便捷。主要功能是”提供网上信息浏览服务”。</p><p><img src="/../images/HTTP-Tomcat-Servlet/1627058356051.png"></p><p> Web服务器是安装在服务器端的一款软件，将来我们把自己写的Web项目部署到Web Tomcat服务器软件中，当Web服务器软件启动后，部署在Web服务器软件中的页面就可以直接通过浏览器来访问了。</p><p><strong>Web服务器软件使用步骤</strong></p><ul><li>准备静态资源</li><li>下载安装Web服务器软件</li><li>将静态资源部署到Web服务器上</li><li>启动Web服务器使用浏览器访问对应的资源</li></ul><p>上述内容在演示的时候，使用的是Apache下的Tomcat软件，至于Tomcat软件如何使用，后面会详细的讲到。而对于Web服务器来说，实现的方案有很多，Tomcat只是其中的一种，而除了Tomcat以外，还有很多优秀的Web服务器，比如:</p><p><img src="/../images/HTTP-Tomcat-Servlet/1627060368806.png"></p><p>Tomcat就是一款软件，我们主要是以学习如何去使用为主。具体我们会从以下这些方向去学习:</p><ol><li><p>简介: 初步认识下Tomcat</p></li><li><p>基本使用: 安装、卸载、启动、关闭、配置和项目部署，这些都是对Tomcat的基本操作</p></li><li><p>IDEA中如何创建Maven Web项目</p></li><li><p>IDEA中如何使用Tomcat,后面这两个都是我们以后开发经常会用到的方式</p></li></ol><p>首选我们来认识下Tomcat。</p><p><strong>Tomcat</strong></p><p>Tomcat的相关概念:</p><ul><li><p>Tomcat是Apache软件基金会一个核心项目，是一个开源免费的轻量级Web服务器，支持Servlet/JSP少量JavaEE规范。</p></li><li><p>概念中提到了JavaEE规范，那什么又是JavaEE规范呢?</p><p>JavaEE: Java Enterprise Edition,Java企业版。指Java企业级开发的技术规范总和。包含13项技术规范:JDBC、JNDI、EJB、RMI、JSP、Servlet、XML、JMS、Java IDL、JTS、JTA、JavaMail、JAF。</p></li><li><p>因为Tomcat支持Servlet/JSP规范，所以Tomcat也被称为Web容器、Servlet容器。Servlet需要依赖Tomcat才能运行。</p></li><li><p>Tomcat的官网: <a href="https://tomcat.apache.org/">https://tomcat.apache.org/</a> 从官网上可以下载对应的版本进行使用。</p></li></ul><p><strong>Tomcat的LOGO</strong></p><p><img src="/../images/HTTP-Tomcat-Servlet/1627176045795.png"></p><p><strong>小结</strong></p><p>通过这一节的学习，我们需要掌握以下内容:</p><ol><li>Web服务器的作用</li></ol><blockquote><p>封装HTTP协议操作，简化开发</p><p>可以将Web项目部署到服务器中，对外提供网上浏览服务</p></blockquote><ol start="2"><li>Tomcat是一个轻量级的Web服务器，支持Servlet/JSP少量JavaEE规范，也称为Web容器，Servlet容器。</li></ol><h3 id="3-2-基本使用"><a href="#3-2-基本使用" class="headerlink" title="3.2 基本使用"></a>3.2 基本使用</h3><p>Tomcat总共分两部分学习，先来学习Tomcat的基本使用，包括Tomcat的==下载、安装、卸载、启动和关闭==。</p><h4 id="3-2-1-下载"><a href="#3-2-1-下载" class="headerlink" title="3.2.1 下载"></a>3.2.1 下载</h4><p>直接从官网下载</p><p><img src="/../images/HTTP-Tomcat-Servlet/1627178001030.png"></p><p>大家可以自行下载，也可以直接使用资料中已经下载好的资源，</p><p>Tomcat的软件程序  资料/2. Tomcat/apache-tomcat-8.5.68-windows-x64.zip</p><p>Tomcat的源码资料/2. Tomcat/tomcat源码/apache-tomcat-8.5.68-src.zip</p><h4 id="3-2-2-安装"><a href="#3-2-2-安装" class="headerlink" title="3.2.2 安装"></a>3.2.2 安装</h4><p>Tomcat是绿色版,直接解压即可</p><ul><li><p>在D盘的software目录下，将<code>apache-tomcat-8.5.68-windows-x64.zip</code>进行解压缩，会得到一个<code>apache-tomcat-8.5.68</code>的目录，Tomcat就已经安装成功。</p><p>==注意==，Tomcat在解压缩的时候，解压所在的目录可以任意，但最好解压到一个不包含中文和空格的目录，因为后期在部署项目的时候，如果路径有中文或者空格可能会导致程序部署失败。</p></li><li><p>打开<code>apache-tomcat-8.5.68</code>目录就能看到如下目录结构，每个目录中包含的内容需要认识下,</p><p><img src="/../images/HTTP-Tomcat-Servlet/1627178815892.png"></p><p>bin:目录下有两类文件，一种是以<code>.bat</code>结尾的，是Windows系统的可执行文件，一种是以<code>.sh</code>结尾的，是Linux系统的可执行文件。</p><p>webapps:就是以后项目部署的目录</p><p>到此，Tomcat的安装就已经完成。</p></li></ul><h4 id="3-2-3-卸载"><a href="#3-2-3-卸载" class="headerlink" title="3.2.3 卸载"></a>3.2.3 卸载</h4><p>卸载比较简单，可以直接删除目录即可</p><h4 id="3-2-4-启动"><a href="#3-2-4-启动" class="headerlink" title="3.2.4 启动"></a>3.2.4 启动</h4><p>双击: bin\startup.bat</p><p><img src="/../images/HTTP-Tomcat-Servlet/1627179006011.png"></p><p>启动后，通过浏览器访问 <code>http://localhost:8080</code>能看到Apache Tomcat的内容就说明Tomcat已经启动成功。</p><p><img src="/../images/HTTP-Tomcat-Servlet/1627199957728.png"></p><p>==注意==: 启动的过程中，控制台有中文乱码，需要修改conf/logging.prooperties</p><p><img src="/../images/HTTP-Tomcat-Servlet/1627199827589.png"></p><h4 id="3-2-5-关闭"><a href="#3-2-5-关闭" class="headerlink" title="3.2.5 关闭"></a>3.2.5 关闭</h4><p>关闭有三种方式 </p><ul><li>直接x掉运行窗口:强制关闭[不建议]</li><li>bin\shutdown.bat：正常关闭</li><li>ctrl+c： 正常关闭</li></ul><h4 id="3-2-6-配置"><a href="#3-2-6-配置" class="headerlink" title="3.2.6 配置"></a>3.2.6 配置</h4><p><strong>修改端口</strong></p><ul><li>Tomcat默认的端口是8080，要想修改Tomcat启动的端口号，需要修改 conf/server.xml</li></ul><p><img src="/../images/HTTP-Tomcat-Servlet/1627200509883.png"></p><blockquote><p>注: HTTP协议默认端口号为80，如果将Tomcat端口号改为80，则将来访问Tomcat时，将不用输入端口号。</p></blockquote><p><strong>启动时可能出现的错误</strong></p><ul><li><p>Tomcat的端口号取值范围是0-65535之间任意未被占用的端口，如果设置的端口号被占用，启动的时候就会包如下的错误</p><p><img src="/../images/HTTP-Tomcat-Servlet/1627200780590.png"></p></li><li><p>Tomcat启动的时候，启动窗口一闪而过: 需要检查JAVA_HOME环境变量是否正确配置</p></li></ul><p><img src="/../images/HTTP-Tomcat-Servlet/1627201248802.png"></p><h4 id="3-2-7-部署"><a href="#3-2-7-部署" class="headerlink" title="3.2.7 部署"></a>3.2.7 部署</h4><ul><li><p>Tomcat部署项目： 将项目放置到webapps目录下，即部署完成。</p><ul><li><p>将 <code>资料/2. Tomcat/hello</code> 目录拷贝到Tomcat的webapps目录下</p></li><li><p>通过浏览器访问<code>http://localhost/hello/a.html</code>，能看到下面的内容就说明项目已经部署成功。</p><p><img src="/../images/HTTP-Tomcat-Servlet/1627201572748.png"></p><p>但是呢随着项目的增大，项目中的资源也会越来越多，项目在拷贝的过程中也会越来越费时间，该如何解决呢?</p></li></ul></li><li><p>一般JavaWeb项目会被打包称==war==包，然后将war包放到Webapps目录下，Tomcat会自动解压缩war文件</p><ul><li><p>将 <code>资料/2. Tomcat/haha.war</code>目录拷贝到Tomcat的webapps目录下</p></li><li><p>Tomcat检测到war包后会自动完成解压缩，在webapps目录下就会多一个haha目录</p></li><li><p>通过浏览器访问<code>http://localhost/haha/a.html</code>，能看到下面的内容就说明项目已经部署成功。</p><p><img src="/../images/HTTP-Tomcat-Servlet/1627201868752.png"></p></li></ul></li></ul><p>至此，Tomcat的部署就已经完成了，至于如何获得项目对应的war包，后期我们会借助于IDEA工具来生成。</p><h3 id="3-3-Maven创建Web项目"><a href="#3-3-Maven创建Web项目" class="headerlink" title="3.3 Maven创建Web项目"></a>3.3 Maven创建Web项目</h3><p>介绍完Tomcat的基本使用后，我们来学习在IDEA中如何创建Maven Web项目，学习这种方式的原因是以后Tomcat中运行的绝大多数都是Web项目，而使用Maven工具能更加简单快捷的把Web项目给创建出来，所以Maven的Web项目具体如何来构建呢?</p><p>在真正创建Maven Web项目之前，我们先要知道Web项目长什么样子，具体的结构是什么?</p><h4 id="3-3-1-Web项目结构"><a href="#3-3-1-Web项目结构" class="headerlink" title="3.3.1 Web项目结构"></a>3.3.1 Web项目结构</h4><p>Web项目的结构分为:开发中的项目和开发完可以部署的Web项目,这两种项目的结构是不一样的，我们一个个来介绍下:</p><ul><li><p>Maven Web项目结构: 开发中的项目</p><p><img src="/../images/HTTP-Tomcat-Servlet/1627202865978.png"></p></li><li><p>开发完成部署的Web项目</p><p><img src="/../images/HTTP-Tomcat-Servlet/1627202903750.png"></p><ul><li>开发项目通过执行Maven打包命令==package==,可以获取到部署的Web项目目录</li><li>编译后的Java字节码文件和resources的资源文件，会被放到WEB-INF下的classes目录下</li><li>pom.xml中依赖坐标对应的jar包，会被放入WEB-INF下的lib目录下</li></ul></li></ul><h4 id="3-3-2-创建Maven-Web项目"><a href="#3-3-2-创建Maven-Web项目" class="headerlink" title="3.3.2 创建Maven Web项目"></a>3.3.2 创建Maven Web项目</h4><p>介绍完Maven Web的项目结构后，接下来使用Maven来创建Web项目，创建方式有两种:使用骨架和不使用骨架</p><p><strong>使用骨架</strong></p><blockquote><p>具体的步骤包含:</p><p>1.创建Maven项目</p><p>2.选择使用Web项目骨架</p><p>3.输入Maven项目坐标创建项目</p><p>4.确认Maven相关的配置信息后，完成项目创建</p><p>5.删除pom.xml中多余内容</p><p>6.补齐Maven Web项目缺失的目录结构</p></blockquote><ol><li><p>创建Maven项目</p><p><img src="/../images/HTTP-Tomcat-Servlet/1627227574092.png"></p></li><li><p>选择使用Web项目骨架</p><p><img src="/../images/HTTP-Tomcat-Servlet/1627227650406.png"></p></li><li><p>输入Maven项目坐标创建项目</p><p><img src="/../images/HTTP-Tomcat-Servlet/1627228065007.png"></p></li><li><p>确认Maven相关的配置信息后，完成项目创建</p><p><img src="/../images/HTTP-Tomcat-Servlet/1627228413280.png"></p></li><li><p>删除pom.xml中多余内容，只留下面的这些内容，注意打包方式 jar和war的区别</p><p><img src="/../images/HTTP-Tomcat-Servlet/1627228584625.png"></p></li><li><p>补齐Maven Web项目缺失的目录结构，默认没有java和resources目录，需要手动完成创建补齐，最终的目录结果如下</p><p><img src="/../images/HTTP-Tomcat-Servlet/1627228673162.png"></p></li></ol><p><strong>不使用骨架</strong></p><blockquote><p>具体的步骤包含:</p><p>1.创建Maven项目</p><p>2.选择不使用Web项目骨架</p><p>3.输入Maven项目坐标创建项目</p><p>4.在pom.xml设置打包方式为war</p><p>5.补齐Maven Web项目缺失webapp的目录结构</p><p>6.补齐Maven Web项目缺失WEB-INF/web.xml的目录结构</p></blockquote><ol><li><p>创建Maven项目</p><p><img src="/../images/HTTP-Tomcat-Servlet/1627229111549.png"></p></li><li><p>选择不使用Web项目骨架</p><p><img src="/../images/HTTP-Tomcat-Servlet/1627229137316.png"></p></li><li><p>输入Maven项目坐标创建项目</p><p><img src="/../images/HTTP-Tomcat-Servlet/1627229371251.png"></p></li><li><p>在pom.xml设置打包方式为war,默认是不写代表打包方式为jar</p><p><img src="/../images/HTTP-Tomcat-Servlet/1627229428161.png"></p></li><li><p>补齐Maven Web项目缺失webapp的目录结构</p><p><img src="/../images/HTTP-Tomcat-Servlet/1627229584134.png"></p></li><li><p>补齐Maven Web项目缺失WEB-INF/web.xml的目录结构</p><p><img src="/../images/HTTP-Tomcat-Servlet/1627229676800.png"></p></li><li><p>补充完后，最终的项目结构如下:</p><p><img src="/../images/HTTP-Tomcat-Servlet/1627229478030.png" alt="1627229478030"></p></li></ol><p>上述两种方式，创建的web项目，都不是很全，需要手动补充内容，至于最终采用哪种方式来创建Maven Web项目，都是可以的，根据各自的喜好来选择使用即可。</p><p><strong>小结</strong></p><p>1.掌握Maven Web项目的目录结构</p><p>2.掌握使用骨架的方式创建Maven Web项目</p><p><img src="/../images/HTTP-Tomcat-Servlet/1627204022604.png"></p><blockquote><p>3.掌握不使用骨架的方式创建Maven Web项目</p></blockquote><p><img src="/../images/HTTP-Tomcat-Servlet/1627204076090.png"></p><h3 id="3-4-IDEA使用Tomcat"><a href="#3-4-IDEA使用Tomcat" class="headerlink" title="3.4 IDEA使用Tomcat"></a>3.4 IDEA使用Tomcat</h3><ul><li>Maven Web项目创建成功后，通过Maven的package命令可以将项目打包成war包，将war文件拷贝到Tomcat的webapps目录下，启动Tomcat就可以将项目部署成功，然后通过浏览器进行访问即可。</li><li>然而我们在开发的过程中，项目中的内容会经常发生变化，如果按照上面这种方式来部署测试，是非常不方便的</li><li>如何在IDEA中能快速使用Tomcat呢?</li></ul><p>在IDEA中集成使用Tomcat有两种方式，分别是==集成本地Tomcat==和==Tomcat Maven插件==</p><h4 id="3-4-1-集成本地Tomcat"><a href="#3-4-1-集成本地Tomcat" class="headerlink" title="3.4.1 集成本地Tomcat"></a>3.4.1 集成本地Tomcat</h4><p>目标: 将刚才本地安装好的Tomcat8集成到IDEA中，完成项目部署，具体的实现步骤</p><ol><li><p>打开添加本地Tomcat的面板</p><p><img src="/../images/HTTP-Tomcat-Servlet/1627229992900.png"></p></li><li><p>指定本地Tomcat的具体路径</p><p><img src="/../images/HTTP-Tomcat-Servlet/1627230313062.png"></p></li><li><p>修改Tomcat的名称，此步骤可以不改，只是让名字看起来更有意义，HTTP port中的端口也可以进行修改，比如把8080改成80</p><p><img src="/../images/HTTP-Tomcat-Servlet/1627230366658.png"></p></li><li><p>将开发项目部署项目到Tomcat中</p><p><img src="/../images/HTTP-Tomcat-Servlet/1627230913259.png"></p><p>扩展内容： xxx.war和 xxx.war exploded这两种部署项目模式的区别?</p><ul><li><p>war模式是将WEB工程打成war包，把war包发布到Tomcat服务器上</p></li><li><p>war exploded模式是将WEB工程以当前文件夹的位置关系发布到Tomcat服务器上</p></li><li><p>war模式部署成功后，Tomcat的webapps目录下会有部署的项目内容</p></li><li><p>war exploded模式部署成功后，Tomcat的webapps目录下没有，而使用的是项目的target目录下的内容进行部署</p></li><li><p>建议大家都选war模式进行部署，更符合项目部署的实际情况</p></li></ul></li><li><p>部署成功后，就可以启动项目，为了能更好的看到启动的效果，可以在webapp目录下添加a.html页面</p><p><img src="/../images/HTTP-Tomcat-Servlet/1627233265351.png"></p></li><li><p>启动成功后，可以通过浏览器进行访问测试</p><p><img src="/../images/HTTP-Tomcat-Servlet/1627232743706.png"></p></li><li><p>最终的注意事项</p><p><img src="/../images/HTTP-Tomcat-Servlet/1627232916624.png"></p></li></ol><p>至此，IDEA中集成本地Tomcat进行项目部署的内容我们就介绍完了，整体步骤如下，大家需要按照流程进行部署操作练习。</p><p><img src="/../images/HTTP-Tomcat-Servlet/1627205657117.png"></p><h4 id="3-4-2-Tomcat-Maven插件"><a href="#3-4-2-Tomcat-Maven插件" class="headerlink" title="3.4.2 Tomcat Maven插件"></a>3.4.2 Tomcat Maven插件</h4><p>在IDEA中使用本地Tomcat进行项目部署，相对来说步骤比较繁琐，所以我们需要一种更简便的方式来替换它，那就是直接使用Maven中的Tomcat插件来部署项目，具体的实现步骤，只需要两步，分别是:</p><ol><li><p>在pom.xml中添加Tomcat插件</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>build</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugins</span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!--Tomcat插件 --&gt;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.apache.tomcat.maven<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>tomcat7-maven-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>2.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugins</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>build</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>使用Maven Helper插件快速启动项目，选中项目，右键–&gt;Run Maven –&gt; tomcat7:run</p></li></ol><p><img src="/../images/HTTP-Tomcat-Servlet/1627233963315.png"></p><p>==注意:==</p><ul><li>如果选中项目并右键点击后，看不到Run Maven和Debug Maven，这个时候就需要在IDEA中下载Maven Helper插件，具体的操作方式为: File –&gt; Settings –&gt; Plugins –&gt; Maven Helper —&gt; Install,安装完后按照提示重启IDEA，就可以看到了。</li></ul><p><img src="/../images/HTTP-Tomcat-Servlet/1627234184076.png"></p><ul><li>Maven Tomcat插件目前只有Tomcat7版本，没有更高的版本可以使用</li><li>使用Maven Tomcat插件，要想修改Tomcat的端口和访问路径，可以直接修改pom.xml</li></ul><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>build</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugins</span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!--Tomcat插件 --&gt;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.apache.tomcat.maven<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>tomcat7-maven-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>2.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>port</span><span class="token punctuation">&gt;</span></span>80<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>port</span><span class="token punctuation">&gt;</span></span><span class="token comment">&lt;!--访问端口号 --&gt;</span>                <span class="token comment">&lt;!--项目访问路径未配置访问路径: http://localhost:80/tomcat-demo2/a.html配置/后访问路径: http://localhost:80/a.html如果配置成 /hello,访问路径会变成什么?答案: http://localhost:80/hello/a.html--&gt;</span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>path</span><span class="token punctuation">&gt;</span></span>/<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>path</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugins</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>build</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>小结</strong></p><p>通过这一节的学习，大家要掌握在IDEA中使用Tomcat的两种方式，集成本地Tomcat和使用Maven的Tomcat插件。后者更简单，推荐大家使用，但是如果对于Tomcat的版本有比较高的要求，要在Tomcat7以上，这个时候就只能用前者了。</p><h2 id="4，-Servlet"><a href="#4，-Servlet" class="headerlink" title="4， Servlet"></a>4， Servlet</h2><h3 id="4-1-简介"><a href="#4-1-简介" class="headerlink" title="4.1 简介"></a>4.1 简介</h3><p><img src="/../images/HTTP-Tomcat-Servlet/1627234763207.png"></p><ul><li><p>Servlet是JavaWeb最为核心的内容，它是Java提供的一门==动态==web资源开发技术。</p></li><li><p>使用Servlet就可以实现，根据不同的登录用户在页面上动态显示不同内容。</p></li><li><p>Servlet是JavaEE规范之一，其实就是一个接口，将来我们需要定义Servlet类实现Servlet接口，并由web服务器运行Servlet</p><p><img src="/../images/HTTP-Tomcat-Servlet/1627234972853.png"></p></li></ul><p>介绍完Servlet是什么以后，接下来我们就按照<code>快速入门</code>-&gt;<code>执行流程</code>-&gt;<code>生命周期</code>-&gt;<code>体系结构</code>-&gt;<code>urlPattern配置</code>-&gt;<code>XML配置</code>的学习步骤，一步步完成对Servlet的知识学习，首选我们来通过一个入门案例来快速把Servlet用起来。</p><h3 id="4-2-快速入门"><a href="#4-2-快速入门" class="headerlink" title="4.2 快速入门"></a>4.2 快速入门</h3><p>==需求分析: 编写一个Servlet类，并使用IDEA中Tomcat插件进行部署，最终通过浏览器访问所编写的Servlet程序。==</p><p>具体的实现步骤为:</p><ol><li>创建Web项目<code>web-demo</code>，导入Servlet依赖坐标</li></ol><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>javax.servlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>javax.servlet-api<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>3.1.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!--      此处为什么需要添加该标签?      provided指的是在编译和测试过程中有效,最后生成的war包时不会加入       因为Tomcat的lib目录中已经有servlet-api这个jar包，如果在生成war包的时候生效就会和Tomcat中的jar包冲突，导致报错    --&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">&gt;</span></span>provided<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li>创建:定义一个类，实现Servlet接口，并重写接口中所有方法，并在service方法中输入一句话</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>itheima<span class="token punctuation">.</span>web</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ServletDemo1</span> <span class="token keyword">implements</span> <span class="token class-name">Servlet</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">service</span><span class="token punctuation">(</span><span class="token class-name">ServletRequest</span> servletRequest<span class="token punctuation">,</span> <span class="token class-name">ServletResponse</span> servletResponse<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"servlet hello world~"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token class-name">ServletConfig</span> servletConfig<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token class-name">ServletConfig</span> <span class="token function">getServletConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getServletInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">destroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="3"><li>配置:在类上使用@WebServlet注解，配置该Servlet的访问路径</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@WebServlet</span><span class="token punctuation">(</span><span class="token string">"/demo1"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="4"><li>访问:启动Tomcat,浏览器中输入URL地址访问该Servlet</li></ol><pre class="line-numbers language-none"><code class="language-none">http://localhost:8080/web-demo/demo1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="5"><li>器访问后，在控制台会打印<code>servlet hello world~</code> 说明servlet程序已经成功运行。</li></ol><p>至此，Servlet的入门案例就已经完成，大家可以按照上面的步骤进行练习了。</p><h3 id="4-3-执行流程"><a href="#4-3-执行流程" class="headerlink" title="4.3 执行流程"></a>4.3 执行流程</h3><p>Servlet程序已经能正常运行，但是我们需要思考个问题: 我们并没有创建ServletDemo1类的对象，也没有调用对象中的service方法，为什么在控制台就打印了<code>servlet hello world~</code>这句话呢?</p><p>要想回答上述问题，我们就需要对Servlet的执行流程进行一个学习。</p><p><img src="/../images/HTTP-Tomcat-Servlet/1627236923139.png"></p><ul><li>浏览器发出<code>http://localhost:8080/web-demo/demo1</code>请求，从请求中可以解析出三部分内容，分别是<code>localhost:8080</code>、<code>web-demo</code>、<code>demo1</code><ul><li>根据<code>localhost:8080</code>可以找到要访问的Tomcat Web服务器</li><li>根据<code>web-demo</code>可以找到部署在Tomcat服务器上的web-demo项目</li><li>根据<code>demo1</code>可以找到要访问的是项目中的哪个Servlet类，根据@WebServlet后面的值进行匹配</li></ul></li><li>找到ServletDemo1这个类后，Tomcat Web服务器就会为ServletDemo1这个类创建一个对象，然后调用对象中的service方法<ul><li>ServletDemo1实现了Servlet接口，所以类中必然会重写service方法供Tomcat Web服务器进行调用</li><li>service方法中有ServletRequest和ServletResponse两个参数，ServletRequest封装的是请求数据，ServletResponse封装的是响应数据，后期我们可以通过这两个参数实现前后端的数据交互</li></ul></li></ul><p><strong>小结</strong></p><p>介绍完Servlet的执行流程，需要大家掌握两个问题：</p><ol><li>Servlet由谁创建?Servlet方法由谁调用?</li></ol><blockquote><p>Servlet由web服务器创建，Servlet方法由web服务器调用</p></blockquote><ol start="2"><li>服务器怎么知道Servlet中一定有service方法?</li></ol><blockquote><p>因为我们自定义的Servlet,必须实现Servlet接口并复写其方法，而Servlet接口中有service方法</p></blockquote><h3 id="4-4-生命周期"><a href="#4-4-生命周期" class="headerlink" title="4.4 生命周期"></a>4.4 生命周期</h3><p>介绍完Servlet的执行流程后，我们知道Servlet是由Tomcat Web服务器帮我们创建的。</p><p>接下来咱们再来思考一个问题:==Tomcat什么时候创建的Servlet对象?==</p><p>要想回答上述问题，我们就需要对Servlet的生命周期进行一个学习。</p><ul><li><p>生命周期: 对象的生命周期指一个对象从被创建到被销毁的整个过程。</p></li><li><p>Servlet运行在Servlet容器(web服务器)中，其生命周期由容器来管理，分为4个阶段：</p><ol><li>==加载和实例化==：默认情况下，当Servlet第一次被访问时，由容器创建Servlet对象</li></ol><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">默认情况，Servlet会在第一次访问被容器创建，但是如果创建Servlet比较耗时的话，那么第一个访问的人等待的时间就比较长，用户的体验就比较差，那么我们能不能把Servlet的创建放到服务器启动的时候来创建，具体如何来配置?@WebServlet(urlPatterns = "/demo1",loadOnStartup = 1)loadOnstartup的取值有两类情况（1）负整数:第一次访问时创建Servlet对象（2）0或正整数:服务器启动时创建Servlet对象，数字越小优先级越高<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li>==初始化==：在Servlet实例化之后，容器将调用Servlet的==init()==方法初始化这个对象，完成一些如加载配置文件、创建连接等初始化的工作。该方法只==调用一次==</li><li>==请求处理==：==每次==请求Servlet时，Servlet容器都会调用Servlet的==service()==方法对请求进行处理</li><li>==服务终止==：当需要释放内存或者容器关闭时，容器就会调用Servlet实例的==destroy()==方法完成资源的释放。在destroy()方法调用之后，容器会释放这个Servlet实例，该实例随后会被Java的垃圾收集器所回收</li></ol></li><li><p>通过案例演示下上述的生命周期</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>itheima<span class="token punctuation">.</span>web</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">WebServlet</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span></span><span class="token punctuation">;</span><span class="token comment">/*** Servlet生命周期方法*/</span><span class="token annotation punctuation">@WebServlet</span><span class="token punctuation">(</span>urlPatterns <span class="token operator">=</span> <span class="token string">"/demo2"</span><span class="token punctuation">,</span>loadOnStartup <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ServletDemo2</span> <span class="token keyword">implements</span> <span class="token class-name">Servlet</span> <span class="token punctuation">{</span>    <span class="token comment">/**     *  初始化方法     *  1.调用时机：默认情况下，Servlet被第一次访问时，调用     *      * loadOnStartup: 默认为-1，修改为0或者正整数，则会在服务器启动的时候，调用     *  2.调用次数: 1次     * @param config     * @throws ServletException     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token class-name">ServletConfig</span> config<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"init..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * 提供服务     * 1.调用时机:每一次Servlet被访问时，调用     * 2.调用次数: 多次     * @param req     * @param res     * @throws ServletException     * @throws IOException     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">service</span><span class="token punctuation">(</span><span class="token class-name">ServletRequest</span> req<span class="token punctuation">,</span> <span class="token class-name">ServletResponse</span> res<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"servlet hello world~"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * 销毁方法     * 1.调用时机：内存释放或者服务器关闭的时候，Servlet对象会被销毁，调用     * 2.调用次数: 1次     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">destroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"destroy..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token class-name">ServletConfig</span> <span class="token function">getServletConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getServletInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>==注意:如何才能让Servlet中的destroy方法被执行？==</p><p><img src="/../images/HTTP-Tomcat-Servlet/1627239292226.png"></p></li></ul><p>在Terminal命令行中，先使用<code>mvn tomcat7:run</code>启动，然后再使用<code>ctrl+c</code>关闭tomcat</p><p><strong>小结</strong></p><p>这节中需要掌握的内容是:</p><ol><li>Servlet对象在什么时候被创建的?</li></ol><blockquote><p>默认是第一次访问的时候被创建，可以使用@WebServlet(urlPatterns = “/demo2”,loadOnStartup = 1)的loadOnStartup 修改成在服务器启动的时候创建。</p></blockquote><ol start="2"><li>Servlet生命周期中涉及到的三个方法，这三个方法是什么?什么时候被调用?调用几次?</li></ol><blockquote><p>涉及到三个方法，分别是 init()、service()、destroy()</p><p>init方法在Servlet对象被创建的时候执行，只执行1次</p><p>service方法在Servlet被访问的时候调用，每访问1次就调用1次</p><p>destroy方法在Servlet对象被销毁的时候调用，只执行1次</p></blockquote><h3 id="4-5-方法介绍"><a href="#4-5-方法介绍" class="headerlink" title="4.5 方法介绍"></a>4.5 方法介绍</h3><p>Servlet中总共有5个方法，我们已经介绍过其中的三个，剩下的两个方法作用分别是什么？</p><p>我们先来回顾下前面讲的三个方法，分别是:</p><ul><li>初始化方法，在Servlet被创建时执行，只执行一次</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token class-name">ServletConfig</span> config<span class="token punctuation">)</span> <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>提供服务方法， 每次Servlet被访问，都会调用该方法</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">void</span> <span class="token function">service</span><span class="token punctuation">(</span><span class="token class-name">ServletRequest</span> req<span class="token punctuation">,</span> <span class="token class-name">ServletResponse</span> res<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>销毁方法，当Servlet被销毁时，调用该方法。在内存释放或服务器关闭时销毁Servlet</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">void</span> <span class="token function">destroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>剩下的两个方法是:</p><ul><li>获取Servlet信息</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">String</span> <span class="token function">getServletInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">//该方法用来返回Servlet的相关信息，没有什么太大的用处，一般我们返回一个空字符串即可</span><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getServletInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token string">""</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>获取ServletConfig对象</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">ServletConfig</span> <span class="token function">getServletConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>ServletConfig对象，在init方法的参数中有，而Tomcat Web服务器在创建Servlet对象的时候会调用init方法，必定会传入一个ServletConfig对象，我们只需要将服务器传过来的ServletConfig进行返回即可。具体如何操作?</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>itheima<span class="token punctuation">.</span>web</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">WebServlet</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span></span><span class="token punctuation">;</span><span class="token comment">/** * Servlet方法介绍 */</span><span class="token annotation punctuation">@WebServlet</span><span class="token punctuation">(</span>urlPatterns <span class="token operator">=</span> <span class="token string">"/demo3"</span><span class="token punctuation">,</span>loadOnStartup <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ServletDemo3</span> <span class="token keyword">implements</span> <span class="token class-name">Servlet</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">ServletConfig</span> servletConfig<span class="token punctuation">;</span>    <span class="token comment">/**     *  初始化方法     *  1.调用时机：默认情况下，Servlet被第一次访问时，调用     *      * loadOnStartup: 默认为-1，修改为0或者正整数，则会在服务器启动的时候，调用     *  2.调用次数: 1次     * @param config     * @throws ServletException     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token class-name">ServletConfig</span> config<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>servletConfig <span class="token operator">=</span> config<span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"init..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token class-name">ServletConfig</span> <span class="token function">getServletConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> servletConfig<span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token comment">/**     * 提供服务     * 1.调用时机:每一次Servlet被访问时，调用     * 2.调用次数: 多次     * @param req     * @param res     * @throws ServletException     * @throws IOException     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">service</span><span class="token punctuation">(</span><span class="token class-name">ServletRequest</span> req<span class="token punctuation">,</span> <span class="token class-name">ServletResponse</span> res<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"servlet hello world~"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * 销毁方法     * 1.调用时机：内存释放或者服务器关闭的时候，Servlet对象会被销毁，调用     * 2.调用次数: 1次     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">destroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"destroy..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getServletInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">""</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>getServletInfo()和getServletConfig()这两个方法使用的不是很多，大家了解下。</p><h3 id="4-6-体系结构"><a href="#4-6-体系结构" class="headerlink" title="4.6 体系结构"></a>4.6 体系结构</h3><p>通过上面的学习，我们知道要想编写一个Servlet就必须要实现Servlet接口，重写接口中的5个方法，虽然已经能完成要求，但是编写起来还是比较麻烦的，因为我们更关注的其实只有service方法，那有没有更简单方式来创建Servlet呢?</p><p>要想解决上面的问题，我们需要先对Servlet的体系结构进行下了解:</p><p><img src="/../images/HTTP-Tomcat-Servlet/1627240593506.png"></p><p>因为我们将来开发B/S架构的web项目，都是针对HTTP协议，所以我们自定义Servlet,会通过继承==HttpServlet==</p><p>具体的编写格式如下:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@WebServlet</span><span class="token punctuation">(</span><span class="token string">"/demo4"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ServletDemo4</span> <span class="token keyword">extends</span> <span class="token class-name">HttpServlet</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doGet</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> req<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> resp<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>        <span class="token comment">//TODO GET 请求方式处理逻辑</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"get..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doPost</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> req<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> resp<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>        <span class="token comment">//TODO Post 请求方式处理逻辑</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"post..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>要想发送一个GET请求，请求该Servlet，只需要通过浏览器发送<code>http://localhost:8080/web-demo/demo4</code>,就能看到doGet方法被执行了</li><li>要想发送一个POST请求，请求该Servlet，单单通过浏览器是无法实现的，这个时候就需要编写一个form表单来发送请求，在webapp下创建一个<code>a.html</code>页面，内容如下:</li></ul><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>Title<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/web-demo/demo4<span class="token punctuation">"</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>post<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>启动测试，即可看到doPost方法被执行了。</p><p>Servlet的简化编写就介绍完了，接着需要思考两个问题:</p><ol><li>HttpServlet中为什么要根据请求方式的不同，调用不同的方法?</li><li>如何调用?</li></ol><p>针对问题一，我们需要回顾之前的知识点==前端发送GET和POST请求的时候，参数的位置不一致，GET请求参数在请求行中，POST请求参数在请求体中==，为了能处理不同的请求方式，我们得在service方法中进行判断，然后写不同的业务处理，这样能实现，但是每个Servlet类中都将有相似的代码，针对这个问题，有什么可以优化的策略么?</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>itheima<span class="token punctuation">.</span>web</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">WebServlet</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span><span class="token class-name">HttpServlet</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span><span class="token class-name">HttpServletRequest</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span><span class="token class-name">HttpServletResponse</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span></span><span class="token punctuation">;</span><span class="token annotation punctuation">@WebServlet</span><span class="token punctuation">(</span><span class="token string">"/demo5"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ServletDemo5</span> <span class="token keyword">implements</span> <span class="token class-name">Servlet</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token class-name">ServletConfig</span> config<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token class-name">ServletConfig</span> <span class="token function">getServletConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">service</span><span class="token punctuation">(</span><span class="token class-name">ServletRequest</span> req<span class="token punctuation">,</span> <span class="token class-name">ServletResponse</span> res<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>        <span class="token comment">//如何调用?</span>        <span class="token comment">//获取请求方式，根据不同的请求方式进行不同的业务处理</span>        <span class="token class-name">HttpServletRequest</span> request <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span><span class="token punctuation">)</span>req<span class="token punctuation">;</span>       <span class="token comment">//1. 获取请求方式</span>        <span class="token class-name">String</span> method <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//2. 判断</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token string">"GET"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>method<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token comment">// get方式的处理逻辑</span>        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token string">"POST"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>method<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token comment">// post方式的处理逻辑</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getServletInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">destroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>要解决上述问题，我们可以对Servlet接口进行继承封装，来简化代码开发。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>itheima<span class="token punctuation">.</span>web</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span><span class="token class-name">HttpServletRequest</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyHttpServlet</span> <span class="token keyword">implements</span> <span class="token class-name">Servlet</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token class-name">ServletConfig</span> config<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token class-name">ServletConfig</span> <span class="token function">getServletConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">service</span><span class="token punctuation">(</span><span class="token class-name">ServletRequest</span> req<span class="token punctuation">,</span> <span class="token class-name">ServletResponse</span> res<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>        <span class="token class-name">HttpServletRequest</span> request <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span><span class="token punctuation">)</span>req<span class="token punctuation">;</span>        <span class="token comment">//1. 获取请求方式</span>        <span class="token class-name">String</span> method <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//2. 判断</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token string">"GET"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>method<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token comment">// get方式的处理逻辑</span>            <span class="token function">doGet</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token string">"POST"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>method<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token comment">// post方式的处理逻辑</span>            <span class="token function">doPost</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doPost</span><span class="token punctuation">(</span><span class="token class-name">ServletRequest</span> req<span class="token punctuation">,</span> <span class="token class-name">ServletResponse</span> res<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doGet</span><span class="token punctuation">(</span><span class="token class-name">ServletRequest</span> req<span class="token punctuation">,</span> <span class="token class-name">ServletResponse</span> res<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getServletInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">destroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>有了MyHttpServlet这个类，以后我们再编写Servlet类的时候，只需要继承MyHttpServlet，重写父类中的doGet和doPost方法，就可以用来处理GET和POST请求的业务逻辑。接下来，可以把ServletDemo5代码进行改造</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@WebServlet</span><span class="token punctuation">(</span><span class="token string">"/demo5"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ServletDemo5</span> <span class="token keyword">extends</span> <span class="token class-name">MyHttpServlet</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doGet</span><span class="token punctuation">(</span><span class="token class-name">ServletRequest</span> req<span class="token punctuation">,</span> <span class="token class-name">ServletResponse</span> res<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"get..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doPost</span><span class="token punctuation">(</span><span class="token class-name">ServletRequest</span> req<span class="token punctuation">,</span> <span class="token class-name">ServletResponse</span> res<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"post..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>将来页面发送的是GET请求，则会进入到doGet方法中进行执行，如果是POST请求，则进入到doPost方法。这样代码在编写的时候就相对来说更加简单快捷。</p><p>类似MyHttpServlet这样的类Servlet中已经为我们提供好了，就是HttpServlet,翻开源码，大家可以搜索<code>service()</code>方法，你会发现HttpServlet做的事更多，不仅可以处理GET和POST还可以处理其他五种请求方式。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">service</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> req<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> resp<span class="token punctuation">)</span>        <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span>    <span class="token punctuation">{</span>        <span class="token class-name">String</span> method <span class="token operator">=</span> req<span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>method<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token constant">METHOD_GET</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">long</span> lastModified <span class="token operator">=</span> <span class="token function">getLastModified</span><span class="token punctuation">(</span>req<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>lastModified <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment">// servlet doesn't support if-modified-since, no reason</span>                <span class="token comment">// to go through further expensive logic</span>                <span class="token function">doGet</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span> resp<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token keyword">long</span> ifModifiedSince <span class="token operator">=</span> req<span class="token punctuation">.</span><span class="token function">getDateHeader</span><span class="token punctuation">(</span><span class="token constant">HEADER_IFMODSINCE</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>ifModifiedSince <span class="token operator">&lt;</span> lastModified<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token comment">// If the servlet mod time is later, call doGet()</span>                    <span class="token comment">// Round down to the nearest second for a proper compare</span>                    <span class="token comment">// A ifModifiedSince of -1 will always be less</span>                    <span class="token function">maybeSetLastModified</span><span class="token punctuation">(</span>resp<span class="token punctuation">,</span> lastModified<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token function">doGet</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span> resp<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                    resp<span class="token punctuation">.</span><span class="token function">setStatus</span><span class="token punctuation">(</span><span class="token class-name">HttpServletResponse</span><span class="token punctuation">.</span><span class="token constant">SC_NOT_MODIFIED</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>method<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token constant">METHOD_HEAD</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">long</span> lastModified <span class="token operator">=</span> <span class="token function">getLastModified</span><span class="token punctuation">(</span>req<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">maybeSetLastModified</span><span class="token punctuation">(</span>resp<span class="token punctuation">,</span> lastModified<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">doHead</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span> resp<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>method<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token constant">METHOD_POST</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">doPost</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span> resp<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>method<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token constant">METHOD_PUT</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">doPut</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span> resp<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>method<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token constant">METHOD_DELETE</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">doDelete</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span> resp<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>method<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token constant">METHOD_OPTIONS</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">doOptions</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span>resp<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>method<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token constant">METHOD_TRACE</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">doTrace</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span>resp<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token comment">//</span>            <span class="token comment">// Note that this means NO servlet supports whatever</span>            <span class="token comment">// method was requested, anywhere on this server.</span>            <span class="token comment">//</span>            <span class="token class-name">String</span> errMsg <span class="token operator">=</span> lStrings<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token string">"http.method_not_implemented"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> errArgs <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            errArgs<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> method<span class="token punctuation">;</span>            errMsg <span class="token operator">=</span> <span class="token class-name">MessageFormat</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>errMsg<span class="token punctuation">,</span> errArgs<span class="token punctuation">)</span><span class="token punctuation">;</span>                        resp<span class="token punctuation">.</span><span class="token function">sendError</span><span class="token punctuation">(</span><span class="token class-name">HttpServletResponse</span><span class="token punctuation">.</span><span class="token constant">SC_NOT_IMPLEMENTED</span><span class="token punctuation">,</span> errMsg<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>小结</strong></p><p>通过这一节的学习，要掌握:</p><ol><li>HttpServlet的使用步骤</li></ol><blockquote><p>继承HttpServlet</p><p>重写doGet和doPost方法</p></blockquote><ol start="2"><li>HttpServlet原理</li></ol><blockquote><p>获取请求方式，并根据不同的请求方式，调用不同的doXxx方法</p></blockquote><h3 id="4-7-urlPattern配置"><a href="#4-7-urlPattern配置" class="headerlink" title="4.7 urlPattern配置"></a>4.7 urlPattern配置</h3><p>Servlet类编写好后，要想被访问到，就需要配置其访问路径（==urlPattern==）</p><ul><li><p>一个Servlet,可以配置多个urlPattern</p><p><img src="/../images/HTTP-Tomcat-Servlet/1627272805178.png" alt="1627272805178"></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>itheima<span class="token punctuation">.</span>web</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span></span><span class="token class-name">ServletRequest</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span></span><span class="token class-name">ServletResponse</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">WebServlet</span></span><span class="token punctuation">;</span><span class="token comment">/*** urlPattern: 一个Servlet可以配置多个访问路径*/</span><span class="token annotation punctuation">@WebServlet</span><span class="token punctuation">(</span>urlPatterns <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"/demo7"</span><span class="token punctuation">,</span><span class="token string">"/demo8"</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ServletDemo7</span> <span class="token keyword">extends</span> <span class="token class-name">MyHttpServlet</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doGet</span><span class="token punctuation">(</span><span class="token class-name">ServletRequest</span> req<span class="token punctuation">,</span> <span class="token class-name">ServletResponse</span> res<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"demo7 get..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doPost</span><span class="token punctuation">(</span><span class="token class-name">ServletRequest</span> req<span class="token punctuation">,</span> <span class="token class-name">ServletResponse</span> res<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在浏览器上输入<code>http://localhost:8080/web-demo/demo7</code>,<code>http://localhost:8080/web-demo/demo8</code>这两个地址都能访问到ServletDemo7的doGet方法。</p></li><li><p>==urlPattern配置规则==</p><ul><li><p>精确匹配</p><p><img src="/../images/HTTP-Tomcat-Servlet/1627273174144.png" alt="1627273174144"></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * UrlPattern: * * 精确匹配 */</span><span class="token annotation punctuation">@WebServlet</span><span class="token punctuation">(</span>urlPatterns <span class="token operator">=</span> <span class="token string">"/user/select"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ServletDemo8</span> <span class="token keyword">extends</span> <span class="token class-name">MyHttpServlet</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doGet</span><span class="token punctuation">(</span><span class="token class-name">ServletRequest</span> req<span class="token punctuation">,</span> <span class="token class-name">ServletResponse</span> res<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"demo8 get..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doPost</span><span class="token punctuation">(</span><span class="token class-name">ServletRequest</span> req<span class="token punctuation">,</span> <span class="token class-name">ServletResponse</span> res<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>访问路径<code>http://localhost:8080/web-demo/user/select</code></p></li><li><p>目录匹配</p><p><img src="/../images/HTTP-Tomcat-Servlet/1627273184095.png" alt="1627273184095"></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>itheima<span class="token punctuation">.</span>web</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span></span><span class="token class-name">ServletRequest</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span></span><span class="token class-name">ServletResponse</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">WebServlet</span></span><span class="token punctuation">;</span><span class="token comment">/** * UrlPattern: * * 目录匹配: /user/* */</span><span class="token annotation punctuation">@WebServlet</span><span class="token punctuation">(</span>urlPatterns <span class="token operator">=</span> <span class="token string">"/user/*"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ServletDemo9</span> <span class="token keyword">extends</span> <span class="token class-name">MyHttpServlet</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doGet</span><span class="token punctuation">(</span><span class="token class-name">ServletRequest</span> req<span class="token punctuation">,</span> <span class="token class-name">ServletResponse</span> res<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"demo9 get..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doPost</span><span class="token punctuation">(</span><span class="token class-name">ServletRequest</span> req<span class="token punctuation">,</span> <span class="token class-name">ServletResponse</span> res<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>访问路径<code>http://localhost:8080/web-demo/user/任意</code></p><p>==思考:==</p><ol><li>访问路径<code>http://localhost:8080/web-demo/user</code>是否能访问到demo9的doGet方法?</li><li>访问路径<code>http://localhost:8080/web-demo/user/a/b</code>是否能访问到demo9的doGet方法?</li><li>访问路径<code>http://localhost:8080/web-demo/user/select</code>是否能访问到demo9还是demo8的doGet方法?</li></ol><p>答案是: 能、能、demo8，进而我们可以得到的结论是<code>/user/*</code>中的<code>/*</code>代表的是零或多个层级访问目录同时精确匹配优先级要高于目录匹配。</p></li><li><p>扩展名匹配</p><p><img src="/../images/HTTP-Tomcat-Servlet/1627273194118.png" alt="1627273194118"></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>itheima<span class="token punctuation">.</span>web</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span></span><span class="token class-name">ServletRequest</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span></span><span class="token class-name">ServletResponse</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">WebServlet</span></span><span class="token punctuation">;</span><span class="token comment">/** * UrlPattern: * * 扩展名匹配: *.do */</span><span class="token annotation punctuation">@WebServlet</span><span class="token punctuation">(</span>urlPatterns <span class="token operator">=</span> <span class="token string">"*.do"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ServletDemo10</span> <span class="token keyword">extends</span> <span class="token class-name">MyHttpServlet</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doGet</span><span class="token punctuation">(</span><span class="token class-name">ServletRequest</span> req<span class="token punctuation">,</span> <span class="token class-name">ServletResponse</span> res<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"demo10 get..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doPost</span><span class="token punctuation">(</span><span class="token class-name">ServletRequest</span> req<span class="token punctuation">,</span> <span class="token class-name">ServletResponse</span> res<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>访问路径<code>http://localhost:8080/web-demo/任意.do</code></p><p>==注意==:</p><ol><li>如果路径配置的不是扩展名，那么在路径的前面就必须要加<code>/</code>否则会报错</li></ol><p><img src="/../images/HTTP-Tomcat-Servlet/1627274483755.png"></p><ol start="2"><li>如果路径配置的是<code>*.do</code>,那么在*.do的前面不能加<code>/</code>,否则会报错</li></ol><p><img src="/../images/HTTP-Tomcat-Servlet/1627274368245.png"></p></li><li><p>任意匹配</p><p><img src="/../images/HTTP-Tomcat-Servlet/1627273201370.png"></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>itheima<span class="token punctuation">.</span>web</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span></span><span class="token class-name">ServletRequest</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span></span><span class="token class-name">ServletResponse</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">WebServlet</span></span><span class="token punctuation">;</span><span class="token comment">/** * UrlPattern: * * 任意匹配： / */</span><span class="token annotation punctuation">@WebServlet</span><span class="token punctuation">(</span>urlPatterns <span class="token operator">=</span> <span class="token string">"/"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ServletDemo11</span> <span class="token keyword">extends</span> <span class="token class-name">MyHttpServlet</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doGet</span><span class="token punctuation">(</span><span class="token class-name">ServletRequest</span> req<span class="token punctuation">,</span> <span class="token class-name">ServletResponse</span> res<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"demo11 get..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doPost</span><span class="token punctuation">(</span><span class="token class-name">ServletRequest</span> req<span class="token punctuation">,</span> <span class="token class-name">ServletResponse</span> res<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>访问路径<code>http://localhost:8080/demo-web/任意</code></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>itheima<span class="token punctuation">.</span>web</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span></span><span class="token class-name">ServletRequest</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span></span><span class="token class-name">ServletResponse</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">WebServlet</span></span><span class="token punctuation">;</span><span class="token comment">/** * UrlPattern: * * 任意匹配： /* */</span><span class="token annotation punctuation">@WebServlet</span><span class="token punctuation">(</span>urlPatterns <span class="token operator">=</span> <span class="token string">"/*"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ServletDemo12</span> <span class="token keyword">extends</span> <span class="token class-name">MyHttpServlet</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doGet</span><span class="token punctuation">(</span><span class="token class-name">ServletRequest</span> req<span class="token punctuation">,</span> <span class="token class-name">ServletResponse</span> res<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"demo12 get..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doPost</span><span class="token punctuation">(</span><span class="token class-name">ServletRequest</span> req<span class="token punctuation">,</span> <span class="token class-name">ServletResponse</span> res<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>访问路径`<a href="http://localhost:8080/demo-web/%E4%BB%BB%E6%84%8F">http://localhost:8080/demo-web/任意</a></p><p>==注意:==<code>/</code>和<code>/*</code>的区别?</p><ol><li><p>当我们的项目中的Servlet配置了 “/“,会覆盖掉tomcat中的DefaultServlet,当其他的url-pattern都匹配不上时都会走这个Servlet</p></li><li><p>当我们的项目中配置了”/*”,意味着匹配任意访问路径</p></li><li><p>DefaultServlet是用来处理静态资源，如果配置了”/“会把默认的覆盖掉，就会引发请求静态资源的时候没有走默认的而是走了自定义的Servlet类，最终导致静态资源不能被访问</p></li></ol></li></ul></li></ul><p><strong>小结</strong></p><ol><li><p>urlPattern总共有四种配置方式，分别是精确匹配、目录匹配、扩展名匹配、任意匹配</p></li><li><p>五种配置的优先级为 精确匹配 &gt; 目录匹配&gt; 扩展名匹配 &gt; /* &gt; / ,无需记，以最终运行结果为准。</p></li></ol><h3 id="4-8-XML配置"><a href="#4-8-XML配置" class="headerlink" title="4.8 XML配置"></a>4.8 XML配置</h3><p>前面对应Servlet的配置，我们都使用的是@WebServlet,这个是Servlet从3.0版本后开始支持注解配置，3.0版本前只支持XML配置文件的配置方法。</p><p>对于XML的配置步骤有两步:</p><ul><li>编写Servlet类</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>itheima<span class="token punctuation">.</span>web</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span></span><span class="token class-name">ServletRequest</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span></span><span class="token class-name">ServletResponse</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">WebServlet</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ServletDemo13</span> <span class="token keyword">extends</span> <span class="token class-name">MyHttpServlet</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doGet</span><span class="token punctuation">(</span><span class="token class-name">ServletRequest</span> req<span class="token punctuation">,</span> <span class="token class-name">ServletResponse</span> res<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"demo13 get..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doPost</span><span class="token punctuation">(</span><span class="token class-name">ServletRequest</span> req<span class="token punctuation">,</span> <span class="token class-name">ServletResponse</span> res<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>在web.xml中配置该Servlet</li></ul><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>web-app</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://xmlns.jcp.org/xml/ns/javaee<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd<span class="token punctuation">"</span></span>         <span class="token attr-name">version</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>4.0<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>                <span class="token comment">&lt;!--         Servlet 全类名    --&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet</span><span class="token punctuation">&gt;</span></span>        <span class="token comment">&lt;!-- servlet的名称，名字任意--&gt;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">&gt;</span></span>demo13<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">&gt;</span></span>        <span class="token comment">&lt;!--servlet的类全名--&gt;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-class</span><span class="token punctuation">&gt;</span></span>com.itheima.web.ServletDemo13<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-class</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet</span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!--         Servlet 访问路径    --&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-mapping</span><span class="token punctuation">&gt;</span></span>        <span class="token comment">&lt;!-- servlet的名称，要和上面的名称一致--&gt;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">&gt;</span></span>demo13<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">&gt;</span></span>        <span class="token comment">&lt;!-- servlet的访问路径--&gt;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">&gt;</span></span>/demo13<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-mapping</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>web-app</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这种配置方式和注解比起来，确认麻烦很多，所以建议大家使用注解来开发。但是大家要认识上面这种配置方式，因为并不是所有的项目都是基于注解开发的。</p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 系统笔记 </tag>
            
            <tag> JavaWeb </tag>
            
            <tag> HTTP&amp;Tomcat&amp;Servlet </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>已知待优化内容</title>
      <link href="/2023/02/02/yi-zhi-dai-you-hua-nei-rong/"/>
      <url>/2023/02/02/yi-zhi-dai-you-hua-nei-rong/</url>
      
        <content type="html"><![CDATA[<p>一、评论区安全性问题<br>二、相册分组，重定向到新增页面</p>]]></content>
      
      
      
        <tags>
            
            <tag> 日志 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>响应状态码</title>
      <link href="/2023/02/01/xiang-ying-zhuang-tai-ma/"/>
      <url>/2023/02/01/xiang-ying-zhuang-tai-ma/</url>
      
        <content type="html"><![CDATA[<h2 id="一、状态码大类"><a href="#一、状态码大类" class="headerlink" title="一、状态码大类"></a>一、状态码大类</h2><table><thead><tr><th>状态码分类</th><th>说明</th></tr></thead><tbody><tr><td>1xx</td><td><strong>响应中</strong>——临时状态码，表示请求已经接受，告诉客户端应该继续请求或者如果它已经完成则忽略它</td></tr><tr><td>2xx</td><td><strong>成功</strong>——表示请求已经被成功接收，处理已完成</td></tr><tr><td>3xx</td><td><strong>重定向</strong>——重定向到其它地方：它让客户端再发起一个请求以完成整个处理。</td></tr><tr><td>4xx</td><td><strong>客户端错误</strong>——处理发生错误，责任在客户端，如：客户端的请求一个不存在的资源，客户端未被授权，禁止访问等</td></tr><tr><td>5xx</td><td><strong>服务器端错误</strong>——处理发生错误，责任在服务端，如：服务端抛出异常，路由出错，HTTP版本不支持等</td></tr></tbody></table><p>状态码大全：<a href="https://cloud.tencent.com/developer/chapter/13553">https://cloud.tencent.com/developer/chapter/13553</a> </p><h2 id="二、常见的响应状态码"><a href="#二、常见的响应状态码" class="headerlink" title="二、常见的响应状态码"></a>二、常见的响应状态码</h2><table><thead><tr><th>状态码</th><th>英文描述</th><th>解释</th></tr></thead><tbody><tr><td>200</td><td><strong><code>OK</code></strong></td><td>客户端请求成功，即<strong>处理成功</strong>，这是我们最想看到的状态码</td></tr><tr><td>302</td><td><strong><code>Found</code></strong></td><td>指示所请求的资源已移动到由<code>Location</code>响应头给定的 URL，浏览器会自动重新访问到这个页面</td></tr><tr><td>304</td><td><strong><code>Not Modified</code></strong></td><td>告诉客户端，你请求的资源至上次取得后，服务端并未更改，你直接用你本地缓存吧。隐式重定向</td></tr><tr><td>400</td><td><strong><code>Bad Request</code></strong></td><td>客户端请求有<strong>语法错误</strong>，不能被服务器所理解</td></tr><tr><td>403</td><td><strong><code>Forbidden</code></strong></td><td>服务器收到请求，但是<strong>拒绝提供服务</strong>，比如：没有权限访问相关资源</td></tr><tr><td>404</td><td><strong><code>Not Found</code></strong></td><td><strong>请求资源不存在</strong>，一般是URL输入有误，或者网站资源被删除了</td></tr><tr><td>428</td><td><strong><code>Precondition Required</code></strong></td><td><strong>服务器要求有条件的请求</strong>，告诉客户端要想访问该资源，必须携带特定的请求头</td></tr><tr><td>429</td><td><strong><code>Too Many Requests</code></strong></td><td><strong>太多请求</strong>，可以限制客户端请求某个资源的数量，配合 Retry-After(多长时间后可以请求)响应头一起使用</td></tr><tr><td>431</td><td><strong><code> Request Header Fields Too Large</code></strong></td><td><strong>请求头太大</strong>，服务器不愿意处理请求，因为它的头部字段太大。请求可以在减少请求头域的大小后重新提交。</td></tr><tr><td>405</td><td><strong><code>Method Not Allowed</code></strong></td><td>请求方式有误，比如应该用GET请求方式的资源，用了POST</td></tr><tr><td>500</td><td><strong><code>Internal Server Error</code></strong></td><td><strong>服务器发生不可预期的错误</strong>。服务器出异常了，赶紧看日志去吧</td></tr><tr><td>503</td><td><strong><code>Service Unavailable</code></strong></td><td><strong>服务器尚未准备好处理请求</strong>，服务器刚刚启动，还未初始化好</td></tr><tr><td>511</td><td><strong><code>Network Authentication Required</code></strong></td><td><strong>客户端需要进行身份验证才能获得网络访问权限</strong></td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaWeb </tag>
            
            <tag> HTTP&amp;Tomcat&amp;Servlet </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>VMware实现Windows3.1安装</title>
      <link href="/2023/02/01/vmware-shi-xian-windows3.1-an-zhuang/"/>
      <url>/2023/02/01/vmware-shi-xian-windows3.1-an-zhuang/</url>
      
        <content type="html"><![CDATA[<h2 id="一、iso制作"><a href="#一、iso制作" class="headerlink" title="一、iso制作"></a>一、iso制作</h2><h2 id="二、安装MS-DOS-7-1"><a href="#二、安装MS-DOS-7-1" class="headerlink" title="二、安装MS-DOS 7.1"></a>二、安装MS-DOS 7.1</h2><h2 id="三、安装Windows-3-1"><a href="#三、安装Windows-3-1" class="headerlink" title="三、安装Windows 3.1"></a>三、安装Windows 3.1</h2>]]></content>
      
      
      <categories>
          
          <category> 教程文章 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> win3.1 </tag>
            
            <tag> DOS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Space Engine太空旅行——太阳系</title>
      <link href="/2023/01/31/space-engine-tai-kong-lu-xing-tai-yang-xi/"/>
      <url>/2023/01/31/space-engine-tai-kong-lu-xing-tai-yang-xi/</url>
      
        <content type="html"><![CDATA[<p><img src="/../images/Space-Engine%E5%A4%AA%E7%A9%BA%E6%97%85%E8%A1%8C%E2%80%94%E2%80%94%E5%A4%AA%E9%98%B3%E7%B3%BB/%E5%9C%B0%E7%90%83%E7%9C%8B%E5%A4%AA%E9%98%B3%E7%B3%BB.png" alt="地球看太阳系"><img src="/../images/Space-Engine%E5%A4%AA%E7%A9%BA%E6%97%85%E8%A1%8C%E2%80%94%E2%80%94%E5%A4%AA%E9%98%B3%E7%B3%BB/%E5%A4%AA%E9%98%B3%E7%B3%BB.png" alt="太阳系"><img src="/../images/Space-Engine%E5%A4%AA%E7%A9%BA%E6%97%85%E8%A1%8C%E2%80%94%E2%80%94%E5%A4%AA%E9%98%B3%E7%B3%BB/%E5%9C%B0%E7%90%83%E7%9C%8B%E5%A4%AA%E9%98%B3%E7%B3%BB2.png" alt="地球看太阳系2"><img src="/../images/Space-Engine%E5%A4%AA%E7%A9%BA%E6%97%85%E8%A1%8C%E2%80%94%E2%80%94%E5%A4%AA%E9%98%B3%E7%B3%BB/%E5%86%A5%E7%8E%8B%E6%98%9F%E7%9C%8B%E5%A4%AA%E9%98%B3%E7%B3%BB.png" alt="冥王星看太阳系"><img src="/../images/Space-Engine%E5%A4%AA%E7%A9%BA%E6%97%85%E8%A1%8C%E2%80%94%E2%80%94%E5%A4%AA%E9%98%B3%E7%B3%BB/%E6%AF%94%E9%82%BB%E6%98%9F%E7%9C%8B%E5%A4%AA%E9%98%B3%E7%B3%BB.png" alt="比邻星看太阳系"><img src="/../images/Space-Engine%E5%A4%AA%E7%A9%BA%E6%97%85%E8%A1%8C%E2%80%94%E2%80%94%E5%A4%AA%E9%98%B3%E7%B3%BB/%E5%9C%B0%E7%90%83.png" alt="地球"></p>]]></content>
      
      
      <categories>
          
          <category> 一些想法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Space Engine </tag>
            
            <tag> 图库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>VMware实现WinXP安装</title>
      <link href="/2023/01/31/vmware-shi-xian-winxp-an-zhuang/"/>
      <url>/2023/01/31/vmware-shi-xian-winxp-an-zhuang/</url>
      
        <content type="html"><![CDATA[<h3 id="1-安装VMware虚拟机"><a href="#1-安装VMware虚拟机" class="headerlink" title="1.安装VMware虚拟机"></a>1.安装VMware虚拟机</h3><p><strong>VMware下载地址：</strong><a href="https://www.vmware.com/cn/products/workstation-pro/workstation-pro-evaluation.html">下载 VMware Workstation Pro | CN</a></p><h3 id="2-Windows-XP系统镜像下载"><a href="#2-Windows-XP系统镜像下载" class="headerlink" title="2.Windows XP系统镜像下载"></a>2.Windows XP系统镜像下载</h3><p><strong>Windows XP下载地址</strong>：<a href="https://msdn.itellyou.cn/">下载Windows XP系统镜像</a></p><p>点击进入MSDN官方连接，找到Windows XP如下图所示版本，展开详情后复制ed2k链接到迅雷，即可开始下载。</p><p><img src="/../images/VMware%E5%AE%9E%E7%8E%B0WinXP%E5%AE%89%E8%A3%85/image-20230131162006430.png" alt="image-20230131162006430"></p><h3 id="3-创建Windows-XP虚拟机"><a href="#3-创建Windows-XP虚拟机" class="headerlink" title="3.创建Windows XP虚拟机"></a>3.创建Windows XP虚拟机</h3><ol><li>新建虚拟机</li><li>选择自定义安装</li><li>默认最高版本下一步</li><li>选择刚刚下载的光盘iso映像文件，下一步</li><li>密钥不填，下一步，选择是</li></ol><p><img src="/../images/VMware%E5%AE%9E%E7%8E%B0WinXP%E5%AE%89%E8%A3%85/image-20230131164051973.png" alt="image-20230131164051973"></p><ol start="6"><li>这是虚拟机安装名称与路径，下一步</li><li>默认处理器，内存，网络类型，I/O控制器类型，虚拟磁盘类型，下一步</li><li>默认选择创建新磁盘，下一步</li><li>磁盘大小可设置小一些，稍后虚拟机磁盘选择与本地共享</li></ol><p><img src="/../images/VMware%E5%AE%9E%E7%8E%B0WinXP%E5%AE%89%E8%A3%85/image-20230131164322224.png" alt="image-20230131164322224"></p><ol start="10"><li>下一步，完成安装并启动虚拟机</li></ol><h3 id="4-等待虚拟机完成安装"><a href="#4-等待虚拟机完成安装" class="headerlink" title="4.等待虚拟机完成安装"></a>4.等待虚拟机完成安装</h3><ol><li>等待安装完成</li></ol><p><img src="/../images/VMware%E5%AE%9E%E7%8E%B0WinXP%E5%AE%89%E8%A3%85/image-20230131164458233.png" alt="image-20230131164458233"></p><p><img src="/../images/VMware%E5%AE%9E%E7%8E%B0WinXP%E5%AE%89%E8%A3%85/image-20230131164640086.png" alt="image-20230131164640086"></p><ol start="2"><li>无视错误，确定并下一步</li></ol><p><img src="/../images/VMware%E5%AE%9E%E7%8E%B0WinXP%E5%AE%89%E8%A3%85/image-20230131164928194.png" alt="image-20230131164928194"></p><ol start="3"><li>选择否并下一步</li></ol><p><img src="/../images/VMware%E5%AE%9E%E7%8E%B0WinXP%E5%AE%89%E8%A3%85/image-20230131164954350.png" alt="image-20230131164954350"></p><ol start="4"><li>确定，并自动进入系统，安装VMware桌面适应工具</li></ol><p><img src="/../images/VMware%E5%AE%9E%E7%8E%B0WinXP%E5%AE%89%E8%A3%85/image-20230131165404846.png" alt="image-20230131165404846"></p><ol start="5"><li>成功</li></ol><p><img src="/../images/VMware%E5%AE%9E%E7%8E%B0WinXP%E5%AE%89%E8%A3%85/image-20230131165617266.png" alt="image-20230131165617266"></p><h3 id="5-创建本机与虚拟机的共享文件夹"><a href="#5-创建本机与虚拟机的共享文件夹" class="headerlink" title="5.创建本机与虚拟机的共享文件夹"></a>5.创建本机与虚拟机的共享文件夹</h3><ol><li>编辑虚拟机设置</li></ol><p><img src="/../images/VMware%E5%AE%9E%E7%8E%B0WinXP%E5%AE%89%E8%A3%85/image-20230131165731778.png" alt="image-20230131165731778"></p><ol start="2"><li>共享文件夹，改为总是启用</li></ol><p><img src="/../images/VMware%E5%AE%9E%E7%8E%B0WinXP%E5%AE%89%E8%A3%85/image-20230131165929576.png" alt="image-20230131165929576"></p><ol start="3"><li>设置本机共享资源文件夹</li></ol><p><img src="/../images/VMware%E5%AE%9E%E7%8E%B0WinXP%E5%AE%89%E8%A3%85/image-20230131170057715.png" alt="image-20230131170057715"></p><ol start="4"><li>重启此虚拟机</li><li>右键我的电脑，选择映射网络驱动器</li></ol><p><img src="/../images/VMware%E5%AE%9E%E7%8E%B0WinXP%E5%AE%89%E8%A3%85/image-20230131170248364.png" alt="image-20230131170248364"></p><ol start="6"><li>选择刚刚设置的文件夹</li></ol><p><img src="/../images/VMware%E5%AE%9E%E7%8E%B0WinXP%E5%AE%89%E8%A3%85/image-20230131170731993.png" alt="image-20230131170731993"></p><ol start="7"><li>点击确定完成，即可在我的电脑里找到共享文件夹了</li></ol><p><img src="/../images/VMware%E5%AE%9E%E7%8E%B0WinXP%E5%AE%89%E8%A3%85/image-20230131170832073.png" alt="image-20230131170832073"></p><p>之后在share文件夹里的内容就可以和该虚拟机共享</p>]]></content>
      
      
      <categories>
          
          <category> 教程文章 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> winxp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux安装并部署Tomcat</title>
      <link href="/2023/01/31/linux-an-zhuang-bing-bu-shu-tomcat/"/>
      <url>/2023/01/31/linux-an-zhuang-bing-bu-shu-tomcat/</url>
      
        <content type="html"><![CDATA[<h2 id="1-Linux安装"><a href="#1-Linux安装" class="headerlink" title="1.Linux安装"></a>1.Linux安装</h2><p>在安装linux之前，需要安装一台虚拟机，将linux运行在虚拟机上。<br><strong>VMware下载地址：</strong><a href="https://www.vmware.com/cn/products/workstation-pro/workstation-pro-evaluation.html">下载 VMware Workstation Pro | CN</a><br><strong>Linux镜像下载地址：</strong><a href="http://mirrors.aliyun.com/centos/7/isos/x86_64/">centos-7-isos-x86_64安装包下载_开源镜像站-阿里云</a><br>推荐版本：CentOS-7.0-x86_64-DVD-2009.iso 标准安装版</p><h3 id="1-1-创建虚拟机，模拟计算机硬件环境"><a href="#1-1-创建虚拟机，模拟计算机硬件环境" class="headerlink" title="1.1 创建虚拟机，模拟计算机硬件环境"></a>1.1 创建虚拟机，模拟计算机硬件环境</h3><ol><li>新建虚拟机</li><li>典型安装</li><li>稍后安装操作系统</li><li>选择操作系统与版本</li><li>设置虚拟机名称路径</li><li>默认设置磁盘大小20G，并选择将虚拟机拆分成多个文件</li><li>进入自定义硬件设置。默认设置内存处理器网络，选择配置下载好的ISO映像文件</li><li>完成并重启</li></ol><h3 id="1-2-虚拟机配置完成，安装linux"><a href="#1-2-虚拟机配置完成，安装linux" class="headerlink" title="1.2 虚拟机配置完成，安装linux"></a>1.2 虚拟机配置完成，安装linux</h3><ol><li><p>开机等待安装界面</p></li><li><p>选择测试并安装linux</p></li><li><p>选择中文</p></li><li><p>点击进入安装位置，确认后返回，并点击开始安装</p><p><img src="/../images/Linux%E5%AE%89%E8%A3%85%E5%B9%B6%E9%83%A8%E7%BD%B2Tomcat/image-20230131104015691.png" alt="image-20230131104015691"></p></li><li><p>安装过程中设置root密码。如果密码太简单会有提示，可无视提示，点击两次完成</p></li><li><p>重启完成安装</p></li><li><p>输入账号密码完成登录<img src="/../images/Linux%E5%AE%89%E8%A3%85%E5%B9%B6%E9%83%A8%E7%BD%B2Tomcat/image-20230131104802313.png" alt="image-20230131104802313"></p></li></ol><h3 id="1-3-网卡配置"><a href="#1-3-网卡配置" class="headerlink" title="1.3 网卡配置"></a>1.3 网卡配置</h3><p>由于启动服务器的时候未加载网卡，所以这里要手动修改一下配置文件</p><ol><li><p>进入对应目录</p> <pre class="line-numbers language-linux" data-language="linux"><code class="language-linux">cd /etc/sysconfig/network-scripts<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>编辑<code>ifcfg-ens33</code>文件</p> <pre class="line-numbers language-linux" data-language="linux"><code class="language-linux">vi ifcfg-ens33<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>修改<code>ONBOOT=yes</code></p></li><li><p>保存退出</p></li><li><p>重启生效</p></li><li><p>登录后输入<code>ip addr</code>查看网卡</p><p><img src="/../images/Linux%E5%AE%89%E8%A3%85%E5%B9%B6%E9%83%A8%E7%BD%B2Tomcat/image-20230131110221098.png" alt="image-20230131110221098"></p></li></ol><h3 id="1-4-SSH连接linux"><a href="#1-4-SSH连接linux" class="headerlink" title="1.4 SSH连接linux"></a>1.4 SSH连接linux</h3><ol><li><p><strong>安装SSH的意义：</strong>实际工作的时候，Linux操作系统都是安装在物理机上，而不是像我们现在使用的虚拟机<br>所以需要SSH连接工具，远程连接到物理机上。</p></li><li><p><strong>FinalShell下载地址：</strong><a href="http://www.hostbuf.com/c/131.html">finalshell官网最新版下载地址</a></p></li><li><p>新建连接，选择SSH连接</p></li><li><p>输入名称，ip，端口默认。本地一般用密码连接，输入账密</p><p><img src="/../images/Linux%E5%AE%89%E8%A3%85%E5%B9%B6%E9%83%A8%E7%BD%B2Tomcat/image-20230131111324414.png" alt="image-20230131111324414"></p></li><li><p>点击快速连接</p><p><img src="/../images/Linux%E5%AE%89%E8%A3%85%E5%B9%B6%E9%83%A8%E7%BD%B2Tomcat/image-20230131111423603.png" alt="image-20230131111423603"></p></li></ol><h2 id="2-必要软件安装"><a href="#2-必要软件安装" class="headerlink" title="2.必要软件安装"></a>2.必要软件安装</h2><h3 id="2-1-软件安装方式"><a href="#2-1-软件安装方式" class="headerlink" title="2.1 软件安装方式"></a>2.1 软件安装方式</h3><ol><li><p>二进制发布包安装</p><p>软件已经针对具体平台编译打包发布，只要解压，修改配置即可</p></li><li><p>rpm安装</p><p>软件已经按照redhat的包管理规范进行打包，使用rpm命令进行安装，不能自行解决库依赖问题</p></li><li><p>yum安装</p><p>一种在线软件安装方式，本质上还是rpm安装，自动下载安装包并安装，安装过程中自动解决库依赖问题</p></li><li><p>源码编译安装</p><p>软件以源码工程的形式发布，需要自己编译打包</p></li></ol><h3 id="2-2-安装lrzsz"><a href="#2-2-安装lrzsz" class="headerlink" title="2.2 安装lrzsz"></a>2.2 安装lrzsz</h3><ol><li><p>搜索lrzsz包</p><pre class="line-numbers language-linux" data-language="linux"><code class="language-linux">yum list lrzsz<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>使用yum命令在线安装</p><pre class="line-numbers language-linux" data-language="linux"><code class="language-linux">yum install lrzsz.x86_64<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol><ul><li>安装完后可输入 <code>rz</code> ，就会跳出一个窗口，选择文件后即可上传</li></ul><h3 id="2-3-安装jdk"><a href="#2-3-安装jdk" class="headerlink" title="2.3 安装jdk"></a>2.3 安装jdk</h3><ol><li><p>上传jdk安装包到linux</p></li><li><p>进入到安装包所在目录之后，解压安装包</p><pre class="line-numbers language-linux" data-language="linux"><code class="language-linux">tar -zxvf jdk-8u171-linux-x64.tar.gz -C /usr/local<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>配置环境变量。</p><p>使用vim命令修改<code>/etc/profile</code>文件，或者使用<code>echo</code>追加文件内容，在文件末尾添加如下配置</p><pre class="line-numbers language-linux" data-language="linux"><code class="language-linux">JAVA_HOME=/usr/local/jdk1.8.0_171PATH=$JAVA_HOME/bin:$PATH<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>追加命令</p><pre class="line-numbers language-linux" data-language="linux"><code class="language-linux">echo 'JAVA_HOME=/usr/local/jdk1.8.0_171' &gt;&gt; /etc/profileecho 'PATH=$JAVA_HOME/bin:$PATH' &gt;&gt; /etc/profile<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>查看文件</p><pre class="line-numbers language-linux" data-language="linux"><code class="language-linux">tail /etc/profile<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>立即生效</p><pre class="line-numbers language-linux" data-language="linux"><code class="language-linux">source /etc/profile<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>检查jdk安装是否成功</p><pre class="line-numbers language-linux" data-language="linux"><code class="language-linux">java -version<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>看到如下jdk版本号即成功</p><pre class="line-numbers language-linux" data-language="linux"><code class="language-linux">[root@localhost local]# java -versionjava version "1.8.0_171"Java(TM) SE Runtime Environment (build 1.8.0_171-b11)Java HotSpot(TM) 64-Bit Server VM (build 25.171-b11, mixed mode)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h3 id="2-4-安装tomcat"><a href="#2-4-安装tomcat" class="headerlink" title="2.4 安装tomcat"></a>2.4 安装tomcat</h3><ol><li><p>上传tomcat安装包到linux</p></li><li><p>解压安装包</p><pre class="line-numbers language-linux" data-language="linux"><code class="language-linux">tar -zxvf apache-tomcat-7.0.57.tar.gz-C /usr/local<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>进入Tomcat的bin目录启动服务</p><pre class="line-numbers language-linux" data-language="linux"><code class="language-linux">sh startup.sh 或者 ./startup.sh<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>验证是否启动成功</p><ul><li>查看进程</li></ul><pre class="line-numbers language-linux" data-language="linux"><code class="language-linux">ps -ef | grep tomcat<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>​有如下服务进程即启动成功</p><pre class="line-numbers language-linux" data-language="linux"><code class="language-linux">[root@localhost bin]# ps -ef | grep tomcatroot      71967      1  4 16:05 pts/0    00:00:02 /usr/local/jdk1.8.0_171/bin/java -Djava.util.logging.config.file=/usr/local/apache-tomcat-7.0.57/conf/logging.properties -Djava.util.logging.manager=org.apache.juli.ClassLoaderLogManager -Djava.endorsed.dirs=/usr/local/apache-tomcat-7.0.57/endorsed -classpath /usr/local/apache-tomcat-7.0.57/bin/bootstrap.jar:/usr/local/apache-tomcat-7.0.57/bin/tomcat-juli.jar -Dcatalina.base=/usr/local/apache-tomcat-7.0.57 -Dcatalina.home=/usr/local/apache-tomcat-7.0.57 -Djava.io.tmpdir=/usr/local/apache-tomcat-7.0.57/temp org.apache.catalina.startup.Bootstrap startroot      73174  42704  0 16:06 pts/0    00:00:00 grep --color=auto tomcat<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>查看日志</li></ul><pre class="line-numbers language-linux" data-language="linux"><code class="language-linux">more /usr/local/ apache-tomcat-7.0.57/logs/catalina.outtail -50 /usr/local/apache-tomcat-7.0.57/logs/catalina.out<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>停止tomcat</p><pre class="line-numbers language-linux" data-language="linux"><code class="language-linux">./shutdown.sh 或者 sh shutdown.sh<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>停止进程<code>kill -9 xx</code></p></li></ol><h3 id="2-5-防火墙操作"><a href="#2-5-防火墙操作" class="headerlink" title="2.5 防火墙操作"></a>2.5 防火墙操作</h3><ol><li><p>查看防火墙状态</p><pre class="line-numbers language-linux" data-language="linux"><code class="language-linux">systemctl status firewalld或者firewall-cmd --state<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>开放指定端口</p><pre class="line-numbers language-linux" data-language="linux"><code class="language-linux">firewall-cmd --zone=public --add-port=8080/tcp --permanent<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>关闭指定端口</p><pre class="line-numbers language-linux" data-language="linux"><code class="language-linux">firewall-cmd --zone=public --remove-port=8080/tcp --permanent<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>立即生效</p><pre class="line-numbers language-linux" data-language="linux"><code class="language-linux">firewall-cmd --reload<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>查看开放的端口</p><pre class="line-numbers language-linux" data-language="linux"><code class="language-linux">firewall-cmd --zone=public --list-ports<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol><h3 id="2-6-安装mysql"><a href="#2-6-安装mysql" class="headerlink" title="2.6 安装mysql"></a>2.6 安装mysql</h3><ol><li><p>监测当前系统中是否安装mysql数据库</p><pre class="line-numbers language-linux" data-language="linux"><code class="language-linux">查询当前系统中的所有名称带mysql的软件rpm -qa | grep mysql查询当前系统中的所有名称带mariadb的软件rpm -qa | grep mariadb<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>卸载RPM</p><ul><li><p>注意：RPM (Red-Hat Package Manager)RPM软件包管理器，是红帽Linux用于管理和安装软件的工具。如果当前系统中已经安装有MySQL数据库，安装将失败。CentOS7自带mariadb，与MySQL数据库冲突。</p></li><li><p>解决冲突</p></li></ul><pre class="line-numbers language-linux" data-language="linux"><code class="language-linux">如果有就卸载掉rpm -e --nodeps mariadb-libs-5.5.68-1.el7.x86_64复查是否卸载完毕rpm -qa | grep mariadb<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>解压mysql</p><ul><li>先创建要解压的目录</li></ul><pre class="line-numbers language-linux" data-language="linux"><code class="language-linux">mkdir /usr/local/mysql<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>开始解压</li></ul><pre class="line-numbers language-linux" data-language="linux"><code class="language-linux">tar -zxvf mysql-5.7.25-1.el7.x86_64.rpm-bundle.tar.gz -C /usr/local/mysql<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>按顺序安装rpm包</li></ul><pre class="line-numbers language-linux" data-language="linux"><code class="language-linux">rpm -ivh mysql-community-common-5.7.25-1.el7.x86_64.rpmrpm -ivh mysql-community-libs-5.7.25-1.el7.x86_64.rpmrpm -ivh mysql-community-devel-5.7.25-1.el7.x86_64.rpmrpm -ivh mysql-community-libs-compat-5.7.25-1.el7.x86_64.rpmrpm -ivh mysql-community-client-5.7.25-1.el7.x86_64.rpmyum install net-toolsrpm -ivh mysql-community-server-5.7.25-1.el7.x86_64.rpm<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>启动mysql</p><ul><li>查看mysql服务状态</li></ul><pre class="line-numbers language-linux" data-language="linux"><code class="language-linux">systemctl status mysql<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>启动mysql服务</li></ul><pre class="line-numbers language-linux" data-language="linux"><code class="language-linux">system start mysql<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>查看已启动的服务</li></ul><pre class="line-numbers language-linux" data-language="linux"><code class="language-linux">netstat -tunlp | grep mysql<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>查看mysql进程</li></ul><pre class="line-numbers language-linux" data-language="linux"><code class="language-linux">ps -df | grep mysql<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>设置开机自启动mysql服务</li></ul><pre class="line-numbers language-linux" data-language="linux"><code class="language-linux">systemctl enable mysqld\<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>登录mysql</p><ul><li>查看日志中包含password的行信息</li></ul><pre class="line-numbers language-linux" data-language="linux"><code class="language-linux">cat /var/log/mysqld.log |grep 'A temporary password is generated'<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>根据查询到的密码登录mysql</li></ul><pre class="line-numbers language-linux" data-language="linux"><code class="language-linux">mysql -uroot -p<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>登录之后修改密码</li></ul><pre class="line-numbers language-linux" data-language="linux"><code class="language-linux">设置密码长度最低位数set global validate_password_length=4;设置密码安全等级低，便于密码可修改为rootset global validate_password_policy=LOW;设置密码为rootset password = password('root');开启访问权限grant all on *.* to 'root'@'%' identified by 'root';刷新权限flush privileges;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>开启防火墙端口3306</li></ul><pre class="line-numbers language-linux" data-language="linux"><code class="language-linux">开启3306防火墙端口firewall-cmd --zone=public --add-port=3306/tcp --permanent立即生效firewall-cmd --reload查看开放的端口firewall-cmd --zone=public --list-ports<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>外部连接</p><p>使用Navicat或者SQLyog就可以连接到我们的数据库了，主机名就是ip地址，用户名和密码就是刚刚设置的</p></li></ol><h2 id="3-项目部署"><a href="#3-项目部署" class="headerlink" title="3.项目部署"></a>3.项目部署</h2><h3 id="3-1-手动部署"><a href="#3-1-手动部署" class="headerlink" title="3.1 手动部署"></a>3.1 手动部署</h3><ol><li><p>在IDEA上将项目打成jar包</p><ul><li><p>通过IDEA自带的Maven面板的package指令打包即可</p></li><li><p>打完的包会放在target目录下</p></li></ul></li><li><p>将jar包上传到linux服务器</p></li></ol><ul><li><p>最好还是创建一个对应的目录</p><pre class="line-numbers language-linux" data-language="linux"><code class="language-linux">mkdir /usr/local/appcd /usr/local/app<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>然后使用<code>rz</code>命令上传打包好的jar包</p></li></ul><ol start="3"><li><p>启动项目</p><pre class="line-numbers language-linux" data-language="linux"><code class="language-linux">java -jar [打包好的jar包名]<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>检查防火墙</p><pre class="line-numbers language-linux" data-language="linux"><code class="language-linux">firewall-cmd --zone=public --list-ports<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>测试</p></li></ol><h3 id="3-2-通过shell脚本自动部署"><a href="#3-2-通过shell脚本自动部署" class="headerlink" title="3.2 通过shell脚本自动部署"></a>3.2 通过shell脚本自动部署</h3>]]></content>
      
      
      <categories>
          
          <category> 教程文章 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>更新v0.92</title>
      <link href="/2023/01/30/geng-xin-v0.92/"/>
      <url>/2023/01/30/geng-xin-v0.92/</url>
      
        <content type="html"><![CDATA[<h2 id="更新内容"><a href="#更新内容" class="headerlink" title="更新内容"></a>更新内容</h2><p>首页视频背景替换为图片背景</p><p>删除音乐插件</p><p>修复目录显示不全的问题</p>]]></content>
      
      
      
        <tags>
            
            <tag> 日志 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CrmSky客户关系管理系统需求文档</title>
      <link href="/2023/01/30/crmsky-ke-hu-guan-xi-guan-li-xi-tong-xu-qiu-wen-dang/"/>
      <url>/2023/01/30/crmsky-ke-hu-guan-xi-guan-li-xi-tong-xu-qiu-wen-dang/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> 文档资料 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> 企业级 </tag>
            
            <tag> 需求文档 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ICU管理系统软件需求规格说明书</title>
      <link href="/2023/01/30/icu-guan-li-xi-tong-ruan-jian-xu-qiu-gui-ge-shuo-ming-shu/"/>
      <url>/2023/01/30/icu-guan-li-xi-tong-ruan-jian-xu-qiu-gui-ge-shuo-ming-shu/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> 文档资料 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> 企业级 </tag>
            
            <tag> 需求文档 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JAVA基础知识笔记（二）</title>
      <link href="/2023/01/30/java-ji-chu-zhi-shi-bi-ji-er/"/>
      <url>/2023/01/30/java-ji-chu-zhi-shi-bi-ji-er/</url>
      
        <content type="html"><![CDATA[<h2 id="1-Mybatis"><a href="#1-Mybatis" class="headerlink" title="1.Mybatis"></a>1.Mybatis</h2><h3 id="1-1简介"><a href="#1-1简介" class="headerlink" title="1.1简介"></a>1.1简介</h3><p>持久层框架，ORM（Object Relational Mapping）</p><h3 id="1-2安装"><a href="#1-2安装" class="headerlink" title="1.2安装"></a>1.2安装</h3><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.mybatis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>mybatis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>3.5.10<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="1-3配置文件"><a href="#1-3配置文件" class="headerlink" title="1.3配置文件"></a>1.3配置文件</h3><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">configuration</span>        <span class="token name">PUBLIC</span> <span class="token string">"-//mybatis.org//DTD Config 3.0//EN"</span>        <span class="token string">"http://mybatis.org/dtd/mybatis-3-config.dtd"</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>environments</span> <span class="token attr-name">default</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>development<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>environment</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>development<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>transactionManager</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>JDBC<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dataSource</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>POOLED<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>driver<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.mysql.jdbc.Driver<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>url<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>jdbc:mysql://localhost:3306/test?serverTimezone=UTC<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>root<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>123456<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dataSource</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>environment</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>environments</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mappers</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mapper</span> <span class="token attr-name">resource</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>cla.xml<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mappers</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="1-4映射文件"><a href="#1-4映射文件" class="headerlink" title="1.4映射文件"></a>1.4映射文件</h3><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">mapper</span>        <span class="token name">PUBLIC</span> <span class="token string">"-//mybatis.org//DTD Mapper 3.0//EN"</span>        <span class="token string">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"</span><span class="token punctuation">&gt;</span></span><span class="token comment">&lt;!--   namespace：命名空间，对映射文件分类管理  id：唯一标识，也称MappedStatement的id  resultType：映射结果类型--&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mapper</span> <span class="token attr-name">namespace</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>test<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>selectCla<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.bwf.pojo.Cla<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        select * from t_class    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mapper</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="1-5日志框架"><a href="#1-5日志框架" class="headerlink" title="1.5日志框架"></a>1.5日志框架</h3><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>settings</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>setting</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>logImpl<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>LOG4J2<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>settings</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="1-6属性文件"><a href="#1-6属性文件" class="headerlink" title="1.6属性文件"></a>1.6属性文件</h3><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>properties</span> <span class="token attr-name">resource</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>db.properties<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>properties</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-properties" data-language="properties"><code class="language-properties"><span class="token key attr-name">mysql.driver</span><span class="token punctuation">=</span><span class="token value attr-value">com.mysql.cj.jdbc.Driver</span><span class="token key attr-name">mysql.url</span><span class="token punctuation">=</span><span class="token value attr-value">jdbc:mysql://localhost:3306/test?serverTimezone=UTC</span><span class="token key attr-name">mysql.username</span><span class="token punctuation">=</span><span class="token value attr-value">root</span><span class="token key attr-name">mysql.password</span><span class="token punctuation">=</span><span class="token value attr-value">123456</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="1-7主键值"><a href="#1-7主键值" class="headerlink" title="1.7主键值"></a>1.7主键值</h3><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>insert</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>insertCla<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.bwf.pojo.Cla<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>selectKey</span> <span class="token attr-name">keyProperty</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>int<span class="token punctuation">"</span></span> <span class="token attr-name">order</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>AFTER<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        select last_insert_id()    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>selectKey</span><span class="token punctuation">&gt;</span></span>    insert into t_class(name, num)    values (#{name}, #{num})<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>insert</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="1-8代理模式"><a href="#1-8代理模式" class="headerlink" title="1.8代理模式"></a>1.8代理模式</h3><p>设计模式代表了最佳实践，通常被有经验的面向对象的软件开发任意所采用。设计模式是软件开发人员在软件开发过程中面临的一些问题的解决方案，这些解决方案是众多软件开发人员经过相当长的时间的试验和错误总结出来的。</p><ol><li>基于接口（JDK）</li><li>基于子类（cglib）</li></ol><h3 id="1-9基于接口"><a href="#1-9基于接口" class="headerlink" title="1.9基于接口"></a>1.9基于接口</h3><ol><li>namespace 被代理接口的全路径名</li><li>id 被代理接口中的方法名, 被代理接口中的方法参数类型</li></ol><p><img src="/../images/JAVA%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E7%AC%94%E8%AE%B0%EF%BC%88%E4%BA%8C%EF%BC%89/image-20220617135125142.png" alt="image-20220617135125142"></p><p><img src="/../images/JAVA%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E7%AC%94%E8%AE%B0%EF%BC%88%E4%BA%8C%EF%BC%89/image-20220617144338047.png" alt="image-20220617144338047"></p><h3 id="1-10类型别名"><a href="#1-10类型别名" class="headerlink" title="1.10类型别名"></a>1.10类型别名</h3><ol><li>设置一个</li><li>批量设置</li><li>注解</li></ol><h3 id="1-11映射器"><a href="#1-11映射器" class="headerlink" title="1.11映射器"></a>1.11映射器</h3><h4 id="1-11-1resource"><a href="#1-11-1resource" class="headerlink" title="1.11.1resource"></a>1.11.1resource</h4><p>映射文件名称没有要求</p><h4 id="1-11-2类路径"><a href="#1-11-2类路径" class="headerlink" title="1.11.2类路径"></a>1.11.2类路径</h4><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>build</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resources</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resource</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>directory</span><span class="token punctuation">&gt;</span></span>src/main/java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>directory</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>includes</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>include</span><span class="token punctuation">&gt;</span></span>**/*.xml<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>include</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>includes</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resource</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resources</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>build</span><span class="token punctuation">&gt;</span></span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!--     方式一      使用相对于类路径的资源引用    映射文件名称可以不和接口名一致 --&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mapper</span> <span class="token attr-name">resource</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com/bwf/dao/StudentDao.xml<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mapper</span><span class="token punctuation">&gt;</span></span><span class="token comment">&lt;!--    方式二    使用映射器接口实现类的完全限定类名     映射文件名称与接口名一致 --&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mapper</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.bwf.dao.StudentDao<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span><span class="token comment">&lt;!--    方式三    将包内的映射器接口实现全部注册为映射器    映射文件名称与接口名一致 --&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>package</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.bwf.dao<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="1-12高级映射"><a href="#1-12高级映射" class="headerlink" title="1.12高级映射"></a>1.12高级映射</h3><p><img src="/../images/JAVA%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E7%AC%94%E8%AE%B0%EF%BC%88%E4%BA%8C%EF%BC%89/image-20220617160616441.png" alt="image-20220617160616441"></p><h4 id="1-12-1一对一"><a href="#1-12-1一对一" class="headerlink" title="1.12.1一对一"></a>1.12.1一对一</h4><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 查询订单关联查询所属用户</span><span class="token keyword">SELECT</span>o<span class="token punctuation">.</span>id<span class="token punctuation">,</span>o<span class="token punctuation">.</span>order_no<span class="token punctuation">,</span>o<span class="token punctuation">.</span>order_status<span class="token punctuation">,</span>o<span class="token punctuation">.</span>order_spuamount<span class="token punctuation">,</span>o<span class="token punctuation">.</span>createtime<span class="token punctuation">,</span>o<span class="token punctuation">.</span>updatetime<span class="token punctuation">,</span>o<span class="token punctuation">.</span>order_user_id<span class="token punctuation">,</span>u<span class="token punctuation">.</span>user_id<span class="token punctuation">,</span>u<span class="token punctuation">.</span>user_name<span class="token punctuation">,</span>u<span class="token punctuation">.</span>user_phone<span class="token punctuation">,</span>u<span class="token punctuation">.</span>user_password<span class="token punctuation">,</span>u<span class="token punctuation">.</span>user_gender<span class="token punctuation">,</span>u<span class="token punctuation">.</span>createtime<span class="token punctuation">,</span>u<span class="token punctuation">.</span>updatetime<span class="token keyword">FROM</span><span class="token identifier"><span class="token punctuation">`</span>order<span class="token punctuation">`</span></span> o<span class="token keyword">INNER</span> <span class="token keyword">JOIN</span> <span class="token identifier"><span class="token punctuation">`</span>user<span class="token punctuation">`</span></span> u <span class="token keyword">ON</span> o<span class="token punctuation">.</span>order_user_id <span class="token operator">=</span> u<span class="token punctuation">.</span>user_id<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">OrderDao</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Order</span><span class="token punctuation">&gt;</span></span> <span class="token function">selectOrderUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resultMap</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>selectOrderUserMap<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>order<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>orderNo<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>order_no<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>result</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>orderStatus<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>order_status<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>result</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>orderSpuAmount<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>order_spuamount<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>result</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>createTime<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>createtime<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>result</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>updateTime<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>updatetime<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>result</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>orderUserId<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>order_user_id<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>result</span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!-- 一对一 --&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>association</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>user<span class="token punctuation">"</span></span> <span class="token attr-name">javaType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.bwf.pojo.User<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>userId<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>user_id<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>userName<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>user_name<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>result</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>userPhone<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>user_phone<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>result</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>userPassword<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>user_password<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>result</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>userGender<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>user_gender<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>result</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>createTime<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>createtime<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>result</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>updateTime<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>updatetime<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>result</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>association</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resultMap</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="1-12-2一对多"><a href="#1-12-2一对多" class="headerlink" title="1.12.2一对多"></a>1.12.2一对多</h4><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 查询订单关联查询用户和订单下的订单明细</span><span class="token keyword">SELECT</span> o<span class="token punctuation">.</span>id<span class="token punctuation">,</span>               o<span class="token punctuation">.</span>order_no<span class="token punctuation">,</span>               o<span class="token punctuation">.</span>order_status<span class="token punctuation">,</span>               o<span class="token punctuation">.</span>order_spuamount<span class="token punctuation">,</span>               o<span class="token punctuation">.</span>createtime<span class="token punctuation">,</span>               o<span class="token punctuation">.</span>updatetime<span class="token punctuation">,</span>               o<span class="token punctuation">.</span>order_user_id<span class="token punctuation">,</span>               u<span class="token punctuation">.</span>user_id<span class="token punctuation">,</span>               u<span class="token punctuation">.</span>user_name<span class="token punctuation">,</span>               u<span class="token punctuation">.</span>user_phone<span class="token punctuation">,</span>               u<span class="token punctuation">.</span>user_password<span class="token punctuation">,</span>               u<span class="token punctuation">.</span>user_gender<span class="token punctuation">,</span>               u<span class="token punctuation">.</span>createtime<span class="token punctuation">,</span>               u<span class="token punctuation">.</span>updatetime<span class="token punctuation">,</span>               od<span class="token punctuation">.</span>id odtails_id<span class="token punctuation">,</span>               od<span class="token punctuation">.</span>odtails_name<span class="token punctuation">,</span>               od<span class="token punctuation">.</span>odtails_price<span class="token punctuation">,</span>               od<span class="token punctuation">.</span>odtails_count<span class="token punctuation">,</span>               od<span class="token punctuation">.</span>odtails_amount<span class="token punctuation">,</span>               od<span class="token punctuation">.</span>odtails_orderno_id        <span class="token keyword">FROM</span> <span class="token identifier"><span class="token punctuation">`</span>order<span class="token punctuation">`</span></span> o<span class="token punctuation">,</span>             <span class="token identifier"><span class="token punctuation">`</span>user<span class="token punctuation">`</span></span> u<span class="token punctuation">,</span>             order_details od        <span class="token keyword">WHERE</span> o<span class="token punctuation">.</span>order_user_id <span class="token operator">=</span> u<span class="token punctuation">.</span>user_id          <span class="token operator">AND</span> od<span class="token punctuation">.</span>odtails_orderno_id <span class="token operator">=</span> o<span class="token punctuation">.</span>id<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">OrderDao</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Order</span><span class="token punctuation">&gt;</span></span> <span class="token function">selectOrderUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Order</span><span class="token punctuation">&gt;</span></span> <span class="token function">selectOrderUserDetails</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resultMap</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>selectOrderUserDetailsMap<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>order<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>orderNo<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>order_no<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>result</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>orderStatus<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>order_status<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>result</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>orderSpuAmount<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>order_spuamount<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>result</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>createTime<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>createtime<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>result</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>updateTime<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>updatetime<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>result</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>orderUserId<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>order_user_id<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>result</span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!-- 一对一 --&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>association</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>user<span class="token punctuation">"</span></span> <span class="token attr-name">javaType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.bwf.pojo.User<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>userId<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>user_id<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>userName<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>user_name<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>result</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>userPhone<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>user_phone<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>result</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>userPassword<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>user_password<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>result</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>userGender<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>user_gender<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>result</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>createTime<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>createtime<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>result</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>updateTime<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>updatetime<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>result</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>association</span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!-- 一对多 --&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>collection</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>orderDetails<span class="token punctuation">"</span></span> <span class="token attr-name">ofType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.bwf.pojo.OrderDetails<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>odtails_id<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>odtailsName<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>odtails_name<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>result</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>odtailsPrice<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>odtails_price<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>result</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>odtailsCount<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>odtails_count<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>result</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>odtailsAmount<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>odtails_amount<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>result</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>odtailsOrdernoId<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>odtails_orderno_id<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>result</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>collection</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resultMap</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="1-12-3多对多"><a href="#1-12-3多对多" class="headerlink" title="1.12.3多对多"></a>1.12.3多对多</h4><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 查询订单关联查询用户和订单下的订单明细和商品</span><span class="token keyword">SELECT</span>o<span class="token punctuation">.</span>id<span class="token punctuation">,</span>o<span class="token punctuation">.</span>order_no<span class="token punctuation">,</span>o<span class="token punctuation">.</span>order_status<span class="token punctuation">,</span>o<span class="token punctuation">.</span>order_spuamount<span class="token punctuation">,</span>o<span class="token punctuation">.</span>createtime<span class="token punctuation">,</span>o<span class="token punctuation">.</span>updatetime<span class="token punctuation">,</span>o<span class="token punctuation">.</span>order_user_id<span class="token punctuation">,</span>u<span class="token punctuation">.</span>user_id<span class="token punctuation">,</span>u<span class="token punctuation">.</span>user_name<span class="token punctuation">,</span>u<span class="token punctuation">.</span>user_phone<span class="token punctuation">,</span>u<span class="token punctuation">.</span>user_password<span class="token punctuation">,</span>u<span class="token punctuation">.</span>user_gender<span class="token punctuation">,</span>u<span class="token punctuation">.</span>createtime<span class="token punctuation">,</span>u<span class="token punctuation">.</span>updatetime<span class="token punctuation">,</span>od<span class="token punctuation">.</span>id odtails_id<span class="token punctuation">,</span>od<span class="token punctuation">.</span>odtails_name<span class="token punctuation">,</span>od<span class="token punctuation">.</span>odtails_price<span class="token punctuation">,</span>od<span class="token punctuation">.</span>odtails_count<span class="token punctuation">,</span>od<span class="token punctuation">.</span>odtails_amount<span class="token punctuation">,</span>odtails_orderno_id<span class="token punctuation">,</span>s<span class="token punctuation">.</span>spu_id<span class="token punctuation">,</span>s<span class="token punctuation">.</span>spu_name<span class="token keyword">FROM</span><span class="token identifier"><span class="token punctuation">`</span>order<span class="token punctuation">`</span></span> o<span class="token punctuation">,</span><span class="token identifier"><span class="token punctuation">`</span>user<span class="token punctuation">`</span></span> u<span class="token punctuation">,</span>order_details od<span class="token punctuation">,</span>spu s<span class="token keyword">WHERE</span>o<span class="token punctuation">.</span>order_user_id <span class="token operator">=</span> u<span class="token punctuation">.</span>user_id<span class="token operator">AND</span> od<span class="token punctuation">.</span>odtails_orderno_id <span class="token operator">=</span> o<span class="token punctuation">.</span>id<span class="token operator">AND</span> od<span class="token punctuation">.</span>odtails_spu_id <span class="token operator">=</span> s<span class="token punctuation">.</span>spu_id<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">OrderDao</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Order</span><span class="token punctuation">&gt;</span></span> <span class="token function">selectOrderUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Order</span><span class="token punctuation">&gt;</span></span> <span class="token function">selectOrderUserDetails</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Order</span><span class="token punctuation">&gt;</span></span> <span class="token function">selectOrderUserDetailsSpu</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resultMap</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>selectOrderUserDetailsSpuMap<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>order<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>orderNo<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>order_no<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>result</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>orderStatus<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>order_status<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>result</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>orderSpuAmount<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>order_spuamount<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>result</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>createTime<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>createtime<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>result</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>updateTime<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>updatetime<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>result</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>orderUserId<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>order_user_id<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>result</span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!-- 一对一 --&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>association</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>user<span class="token punctuation">"</span></span> <span class="token attr-name">javaType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.bwf.pojo.User<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>userId<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>user_id<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>userName<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>user_name<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>result</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>userPhone<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>user_phone<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>result</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>userPassword<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>user_password<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>result</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>userGender<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>user_gender<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>result</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>createTime<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>createtime<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>result</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>updateTime<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>updatetime<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>result</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>association</span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!-- 一对多 --&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>collection</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>orderDetails<span class="token punctuation">"</span></span> <span class="token attr-name">ofType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.bwf.pojo.OrderDetails<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>odtails_id<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>odtailsName<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>odtails_name<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>result</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>odtailsPrice<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>odtails_price<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>result</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>odtailsCount<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>odtails_count<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>result</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>odtailsAmount<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>odtails_amount<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>result</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>odtailsOrdernoId<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>odtails_orderno_id<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>result</span><span class="token punctuation">&gt;</span></span>        <span class="token comment">&lt;!-- 一对一 --&gt;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>association</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>spu<span class="token punctuation">"</span></span> <span class="token attr-name">javaType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.bwf.pojo.Spu<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>spuId<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>spu_id<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>spuName<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>spu_name<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>result</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>association</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>collection</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resultMap</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="1-13动态SQL"><a href="#1-13动态SQL" class="headerlink" title="1.13动态SQL"></a>1.13动态SQL</h3><ol><li>where</li></ol><p><em>where</em> 元素只会在子元素返回任何内容的情况下才插入 “WHERE” 子句。而且，若子句的开头为 “AND” 或 “OR”，<em>where</em> 元素也会将它们去除。</p><h3 id="1-14传参"><a href="#1-14传参" class="headerlink" title="1.14传参"></a>1.14传参</h3><ol><li>pojo</li><li>@Param(“spuName”)</li><li>list  Available parameters are [arg0, collection, list]</li><li>array Available parameters are [array, arg0]</li><li>map</li><li>普通 Available parameters are [arg1, arg0, param1, param2]</li></ol><h3 id="1-15注解"><a href="#1-15注解" class="headerlink" title="1.15注解"></a>1.15注解</h3><ol><li>@Select</li><li>@Update</li><li>@Insert</li><li>@Delete</li><li>@Param</li><li>@Result</li><li>@Results</li><li>@ResultMap</li><li>@One</li><li>@Many</li></ol><h3 id="1-16缓存"><a href="#1-16缓存" class="headerlink" title="1.16缓存"></a>1.16缓存</h3><p><img src="/../images/JAVA%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E7%AC%94%E8%AE%B0%EF%BC%88%E4%BA%8C%EF%BC%89/image-20220112163108685.png" alt="image-20220112163108685"></p><p><img src="/../images/JAVA%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E7%AC%94%E8%AE%B0%EF%BC%88%E4%BA%8C%EF%BC%89/%E4%BA%8C%E7%BA%A73.png" alt="二级3"></p><h4 id="1-16-1一级缓存"><a href="#1-16-1一级缓存" class="headerlink" title="1.16.1一级缓存"></a>1.16.1一级缓存</h4><p><strong>HashMap（SqlSession级别）</strong></p><p><strong>insert、update 和 delete 语句会刷新缓存</strong></p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> spu_id spuId<span class="token punctuation">,</span> spu_name spuName<span class="token punctuation">,</span> spu_title <span class="token keyword">from</span> spu <span class="token keyword">WHERE</span> spu_id <span class="token operator">=</span> <span class="token number">2338887</span> <span class="token operator">and</span> spu_name <span class="token operator">=</span> <span class="token string">"南极人 枕头家纺666"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="1-16-2二级缓存"><a href="#1-16-2二级缓存" class="headerlink" title="1.16.2二级缓存"></a>1.16.2二级缓存</h4><ol><li>配置文件</li></ol><p><img src="C:/Users/席/Desktop/学习文档/java22/img/image-20220621103023819.png" alt="image-20220621103023819"></p><ol start="2"><li>映射文件</li></ol><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!-- 要启用全局的二级缓存，只需要在你的 SQL 映射文件中添加一行 --&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>cache</span><span class="token punctuation">/&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ol start="3"><li>单条语句</li></ol><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!--将其设置为 true 后，将会导致本条语句的结果被二级缓存缓存起来，默认值：对 select 元素为 true。--&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">...</span> <span class="token attr-name">flushCache</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span> <span class="token attr-name">useCache</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>序列化</p><pre class="line-numbers language-console" data-language="console"><code class="language-console">Cache Hit Ratio [com.bwf.dao.SpuDao]: 0.5<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>insert、update 和 delete 语句会刷新缓存</strong></p><h4 id="1-16-3自定义缓存"><a href="#1-16-3自定义缓存" class="headerlink" title="1.16.3自定义缓存"></a>1.16.3自定义缓存</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>ibatis<span class="token punctuation">.</span>cache<span class="token punctuation">.</span></span>Cache</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="1-17延迟加载"><a href="#1-17延迟加载" class="headerlink" title="1.17延迟加载"></a>1.17延迟加载</h3><p><strong>查询Sku关联查询Spu</strong></p><ol><li>配置文件</li></ol><p><img src="/../images/JAVA%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E7%AC%94%E8%AE%B0%EF%BC%88%E4%BA%8C%EF%BC%89/image-20220621103347876.png" alt="image-20220621103347876"></p><p><img src="/../images/JAVA%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E7%AC%94%E8%AE%B0%EF%BC%88%E4%BA%8C%EF%BC%89/image-20220621103440259.png" alt="image-20220621103440259"></p><ol start="2"><li>接口</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Sku</span><span class="token punctuation">&gt;</span></span> <span class="token function">selectSkuLazy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="3"><li>映射文件</li></ol><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!-- 延迟加载--&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resultMap</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>selectSkuLazyMap<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>sku<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>skuId<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>sku_id<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>skuName<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>sku_name<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>result</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>association</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>spu<span class="token punctuation">"</span></span> <span class="token attr-name">javaType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.bwf.pojo.Spu<span class="token punctuation">"</span></span> <span class="token attr-name">select</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>selectSpuBySpuId<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>sku_spu_id<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>association</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resultMap</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>selectSkuLazy<span class="token punctuation">"</span></span> <span class="token attr-name">resultMap</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>selectSkuLazyMap<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    select sku_id, sku_name, sku_spu_id    from sku limit 0,10<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>selectSpuBySpuId<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>spu<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    select spu_id spuId, spu_name spuName, spu_title spuTitle    from spu where spu_id = #{sku_spu_id}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="1-18-和"><a href="#1-18-和" class="headerlink" title="1.18#和$"></a>1.18#和$</h3><p>#{} 占位符 以预编译的方式将参数设置到sql语言中</p><p>${}  拼接符 将参数直接拼接到sql语句中  （sql注入）</p><h3 id="1-19MyBatis-Generator"><a href="#1-19MyBatis-Generator" class="headerlink" title="1.19MyBatis Generator"></a>1.19MyBatis Generator</h3><p><a href="http://mybatis.org/generator/">http://mybatis.org/generator/</a></p><ol><li>pom.xml</li></ol><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.mybatis.generator<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>mybatis-generator-core<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>1.4.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.mybatis.generator<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>mybatis-generator-maven-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>1.4.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>executions</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>execution</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span><span class="token punctuation">&gt;</span></span>Generate MyBatis Artifacts<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>goals</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>goal</span><span class="token punctuation">&gt;</span></span>generate<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>goal</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>goals</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>execution</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>executions</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>mysql<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>mysql-connector-java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>8.0.25<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li>配置文件</li></ol><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">generatorConfiguration</span> <span class="token name">PUBLIC</span>        <span class="token string">"-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN"</span>        <span class="token string">"http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd"</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>generatorConfiguration</span><span class="token punctuation">&gt;</span></span><span class="token comment">&lt;!--    &lt;classPathEntry location="D:\works22\mysql-connector-java-5.1.49.jar" /&gt;--&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>context</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>simple<span class="token punctuation">"</span></span> <span class="token attr-name">targetRuntime</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>MyBatis3<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        <span class="token comment">&lt;!-- 数据库连接 --&gt;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>jdbcConnection</span> <span class="token attr-name">driverClass</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.mysql.cj.jdbc.Driver<span class="token punctuation">"</span></span>                        <span class="token attr-name">connectionURL</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>jdbc:mysql://localhost:3306/shop_data?serverTimezone=UTC<span class="token punctuation">"</span></span>                        <span class="token attr-name">userId</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>root<span class="token punctuation">"</span></span>                        <span class="token attr-name">password</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>123456<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>        <span class="token comment">&lt;!-- pojo --&gt;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>javaModelGenerator</span> <span class="token attr-name">targetPackage</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.bwf.model<span class="token punctuation">"</span></span> <span class="token attr-name">targetProject</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>src/main/java<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>        <span class="token comment">&lt;!-- 映射文件 --&gt;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>sqlMapGenerator</span> <span class="token attr-name">targetPackage</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.bwf.dao<span class="token punctuation">"</span></span> <span class="token attr-name">targetProject</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>src/main/java<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>enableSubPackages<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>sqlMapGenerator</span><span class="token punctuation">&gt;</span></span>        <span class="token comment">&lt;!-- Dao --&gt;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>javaClientGenerator</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>XMLMAPPER<span class="token punctuation">"</span></span> <span class="token attr-name">targetPackage</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.bwf.dao<span class="token punctuation">"</span></span> <span class="token attr-name">targetProject</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>src\main\java<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>enableSubPackages<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>javaClientGenerator</span><span class="token punctuation">&gt;</span></span>        <span class="token comment">&lt;!-- 表 --&gt;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>table</span> <span class="token attr-name">schema</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>shop_data<span class="token punctuation">"</span></span> <span class="token attr-name">tableName</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>spu<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>context</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>generatorConfiguration</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-Spring-Framework"><a href="#2-Spring-Framework" class="headerlink" title="2.Spring Framework"></a>2.Spring Framework</h2><p><a href="https://spring.io/">https://spring.io/</a></p><p><img src="/../images/JAVA%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E7%AC%94%E8%AE%B0%EF%BC%88%E4%BA%8C%EF%BC%89/spring.webp" alt="spring"></p><h3 id="2-1IOC"><a href="#2-1IOC" class="headerlink" title="2.1IOC"></a>2.1IOC</h3><p> Inversion of Control (IoC) container 控制反转</p><h4 id="2-1-1pom-xml"><a href="#2-1-1pom-xml" class="headerlink" title="2.1.1pom.xml"></a>2.1.1pom.xml</h4><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-beans<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>${spring.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-core<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>${spring.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-context<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>${spring.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-1-2配置文件"><a href="#2-1-2配置文件" class="headerlink" title="2.1.2配置文件"></a>2.1.2配置文件</h4><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!--      id:对象的唯一标识      class:类全路径名      scope:          1.prototype 多例, getBean()创建，GC          2.singleton 默认 单例            创建：容器创建时                 第一次获取时 lazy-init="true"            销毁：容器关闭时      创建方式：      1.默认构造方法      2.静态工厂      3.实例工厂    --&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>spuService<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.bwf.service.SpuServiceImpl<span class="token punctuation">"</span></span> <span class="token attr-name">scope</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>singleton<span class="token punctuation">"</span></span>      <span class="token attr-name">init-method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>init<span class="token punctuation">"</span></span> <span class="token attr-name">destroy-method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>destroy<span class="token punctuation">"</span></span> <span class="token attr-name">lazy-init</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>spuDao<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.bwf.dao.SpuDaoImpl<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-2IOC注解"><a href="#2-2IOC注解" class="headerlink" title="2.2IOC注解"></a>2.2IOC注解</h3><p><a href="https://docs.spring.io/spring-framework/docs/current/reference/html/core.html#beans-annotation-config">https://docs.spring.io/spring-framework/docs/current/reference/html/core.html#beans-annotation-config</a></p><h4 id="2-2-1配置文件"><a href="#2-2-1配置文件" class="headerlink" title="2.2.1配置文件"></a>2.2.1配置文件</h4><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!-- 配置spring创建容器时需要扫描的包 --&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>component-scan</span> <span class="token attr-name">base-package</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.bwf<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">context:</span>component-scan</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="22-2注解"><a href="#22-2注解" class="headerlink" title="22.2注解"></a>22.2注解</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"spuService"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@Service</span><span class="token punctuation">(</span><span class="token string">"spuService"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@Repository</span><span class="token punctuation">(</span><span class="token string">"spuDao"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@Controller</span><span class="token annotation punctuation">@Scope</span><span class="token punctuation">(</span><span class="token string">"singleton"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@Lazy</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token annotation punctuation">@PostConstruct</span><span class="token annotation punctuation">@PreDestroy</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-3DI"><a href="#2-3DI" class="headerlink" title="2.3DI"></a>2.3DI</h3><p>dependency injection (DI) 依赖注入</p><ol><li>set方法注入</li></ol><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>spuService<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.bwf.service.SpuServiceImpl<span class="token punctuation">"</span></span> <span class="token attr-name">scope</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>singleton<span class="token punctuation">"</span></span>      <span class="token attr-name">init-method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>init<span class="token punctuation">"</span></span> <span class="token attr-name">destroy-method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>destroy<span class="token punctuation">"</span></span> <span class="token attr-name">lazy-init</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>spuDao<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>spuDao<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>list<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>list</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">&gt;</span></span>list1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">&gt;</span></span>list2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>list</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>spuDao<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.bwf.dao.SpuDaoImpl<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token class-name">SpuDao</span> spuDao<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setSpuDao</span><span class="token punctuation">(</span><span class="token class-name">SpuDao</span> spuDao<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>spuDao <span class="token operator">=</span> spuDao<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> list<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setList</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> list<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>list <span class="token operator">=</span> list<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li>构造方法注入</li></ol><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>spuService<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.bwf.service.SpuServiceImpl<span class="token punctuation">"</span></span> <span class="token attr-name">scope</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>singleton<span class="token punctuation">"</span></span>          <span class="token attr-name">init-method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>init<span class="token punctuation">"</span></span> <span class="token attr-name">destroy-method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>destroy<span class="token punctuation">"</span></span> <span class="token attr-name">lazy-init</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>spuDao<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>spuDao<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>list<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>list</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">&gt;</span></span>list1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">&gt;</span></span>list2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>list</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>constructor-arg</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>spuId<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>110<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>constructor-arg</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>constructor-arg</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>spuName<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>得力<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>constructor-arg</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">int</span> spuId<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token class-name">String</span> spuName<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token class-name">SpuServiceImpl</span><span class="token punctuation">(</span><span class="token keyword">int</span> spuId<span class="token punctuation">,</span> <span class="token class-name">String</span> spuName<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>spuId <span class="token operator">=</span> spuId<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>spuName <span class="token operator">=</span> spuName<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="3"><li>注解</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//按类型自动注入</span><span class="token annotation punctuation">@Autowired</span><span class="token comment">//按类型自动匹配的基础上，再结合bean的id匹配</span><span class="token annotation punctuation">@Qualifier</span><span class="token punctuation">(</span><span class="token string">"spuDao2"</span><span class="token punctuation">)</span><span class="token comment">//按bean的id注入</span><span class="token annotation punctuation">@Resource</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"spuDao"</span><span class="token punctuation">)</span><span class="token keyword">private</span> <span class="token class-name">SpuDao</span> spuDao<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-4纯注解"><a href="#2-4纯注解" class="headerlink" title="2.4纯注解"></a>2.4纯注解</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//配置类</span><span class="token annotation punctuation">@Configuration</span><span class="token comment">//扫描</span><span class="token annotation punctuation">@ComponentScan</span><span class="token punctuation">(</span><span class="token string">"com.bwf"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SpringConfig</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-5AOP"><a href="#2-5AOP" class="headerlink" title="2.5AOP"></a>2.5AOP</h3><h4 id="2-5-1概念"><a href="#2-5-1概念" class="headerlink" title="2.5.1概念"></a>2.5.1概念</h4><p>AOP为Aspect Oriented Programming的缩写，意为：<a href="https://baike.baidu.com/item/%E9%9D%A2%E5%90%91%E5%88%87%E9%9D%A2%E7%BC%96%E7%A8%8B/6016335">面向切面编程</a>，通过<a href="https://baike.baidu.com/item/%E9%A2%84%E7%BC%96%E8%AF%91/3191547">预编译</a>方式和运行期间动态代理实现程序功能的统一维护的一种技术。AOP是<a href="https://baike.baidu.com/item/OOP">OOP</a>的延续，是软件开发中的一个热点，也是<a href="https://baike.baidu.com/item/Spring">Spring</a>框架中的一个重要内容，是<a href="https://baike.baidu.com/item/%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B/4035031">函数式编程</a>的一种衍生范型。</p><p>利用AOP可以对业务逻辑的各个部分进行隔离，从而使得业务逻辑各部分之间的<a href="https://baike.baidu.com/item/%E8%80%A6%E5%90%88%E5%BA%A6/2603938">耦合度</a>降低，提高程序的可重用性，同时提高了开发的效率。</p><p><strong>在不改变原有代码的基础上，还能对原有功能进行增强</strong></p><h4 id="2-5-2pom-xml"><a href="#2-5-2pom-xml" class="headerlink" title="2.5.2pom.xml"></a>2.5.2pom.xml</h4><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-aop<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>${spring.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="25-3术语"><a href="#25-3术语" class="headerlink" title="25.3术语"></a>25.3术语</h4><ol><li><p>Advice：通知（增强）</p><p>前置：目标方法调用前执行</p><p>后置：目标方法调用后执行</p><p>异常：目标方法抛出异常时执行</p><p>最终：不管目标方法是否正常执行都会在其后执行</p><p>环绕:</p></li><li><p>Pointcut：切入点，实际被增强的方法</p></li><li><p>JoinPoint：连接点，可以被增强的方法</p></li><li><p>Aspectj：切面，切入点和通知的结合</p></li></ol><h4 id="25-4切入点表达式"><a href="#25-4切入点表达式" class="headerlink" title="25.4切入点表达式"></a>25.4切入点表达式</h4><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!--  public int com.bwf.service.SpuServiceImpl.save(..)1.  *     *2.        *   *.*.*.*.*(..)3.        *   *..*.*(..)4.        *  com.bwf.service.*.*(..)5.        *  com.bwf.service.*.abc*(..)--&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-6AOP注解"><a href="#2-6AOP注解" class="headerlink" title="2.6AOP注解"></a>2.6AOP注解</h3><h4 id="2-6-1pom-xml"><a href="#2-6-1pom-xml" class="headerlink" title="2.6.1pom.xml"></a>2.6.1pom.xml</h4><h4 id="2-6-2通知"><a href="#2-6-2通知" class="headerlink" title="2.6.2通知"></a>2.6.2通知</h4><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>aspectj-autoproxy</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">aop:</span>aspectj-autoproxy</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Aspect</span><span class="token annotation punctuation">@Pointcut</span><span class="token punctuation">(</span><span class="token string">"execution(* com.bwf.service.*.*(..))"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@Before</span><span class="token punctuation">(</span><span class="token string">"pt()"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@After</span><span class="token punctuation">(</span><span class="token string">"pt()"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@AfterReturning</span><span class="token punctuation">(</span><span class="token string">"pt()"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@AfterThrowing</span><span class="token punctuation">(</span><span class="token string">"pt()"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-7JdbcTemplate"><a href="#2-7JdbcTemplate" class="headerlink" title="2.7JdbcTemplate"></a>2.7JdbcTemplate</h3><p>模板设计模式</p><p><img src="/../images/JAVA%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E7%AC%94%E8%AE%B0%EF%BC%88%E4%BA%8C%EF%BC%89/image-20220623165437881.png" alt="image-20220623165437881"></p><h4 id="2-7-1pom-xml"><a href="#2-7-1pom-xml" class="headerlink" title="2.7.1pom.xml"></a>2.7.1pom.xml</h4><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-jdbc<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>${spring.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.alibaba<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>druid<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>1.2.11<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>mysql<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>mysql-connector-java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>8.0.25<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-8Bean"><a href="#2-8Bean" class="headerlink" title="2.8Bean"></a>2.8Bean</h3><p>作用：把方法的返回值放入到Ioc容器中</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Bean</span><span class="token punctuation">(</span><span class="token string">"dataSource"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token class-name">DruidDataSource</span> <span class="token function">getDataSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">DruidDataSource</span> dataSource <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DruidDataSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    dataSource<span class="token punctuation">.</span><span class="token function">setUrl</span><span class="token punctuation">(</span><span class="token string">"jdbc:mysql://localhost:3306/shop_data?serverTimezone=UTC"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    dataSource<span class="token punctuation">.</span><span class="token function">setUsername</span><span class="token punctuation">(</span><span class="token string">"root"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    dataSource<span class="token punctuation">.</span><span class="token function">setPassword</span><span class="token punctuation">(</span><span class="token string">"123456"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> dataSource<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token annotation punctuation">@Bean</span><span class="token punctuation">(</span><span class="token string">"jdbcTemplate"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token class-name">JdbcTemplate</span> <span class="token function">getJdbcTemplate</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Qualifier</span><span class="token punctuation">(</span><span class="token string">"dataSource"</span><span class="token punctuation">)</span> <span class="token class-name">DruidDataSource</span> dataSource<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">JdbcTemplate</span> jdbcTemplate <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JdbcTemplate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    jdbcTemplate<span class="token punctuation">.</span><span class="token function">setDataSource</span><span class="token punctuation">(</span>dataSource<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> jdbcTemplate<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//读取属性文件</span><span class="token annotation punctuation">@PropertySource</span><span class="token punctuation">(</span><span class="token string">"db.properties"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="2-9事务"><a href="#2-9事务" class="headerlink" title="2.9事务"></a>2.9事务</h3><p>ACID</p><h4 id="2-9-1编程式"><a href="#2-9-1编程式" class="headerlink" title="2.9.1编程式"></a>2.9.1编程式</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//1.事务管理器</span><span class="token class-name">DataSourceTransactionManager</span> transactionManager <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DataSourceTransactionManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>transactionManager<span class="token punctuation">.</span><span class="token function">setDataSource</span><span class="token punctuation">(</span>dataSource<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//2.事务定义</span><span class="token class-name">DefaultTransactionDefinition</span> transactionDefinition <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DefaultTransactionDefinition</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//2.1隔离级别</span>transactionDefinition<span class="token punctuation">.</span><span class="token function">setIsolationLevel</span><span class="token punctuation">(</span><span class="token class-name">TransactionDefinition</span><span class="token punctuation">.</span><span class="token constant">ISOLATION_READ_COMMITTED</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//2.2传播行为</span>transactionDefinition<span class="token punctuation">.</span><span class="token function">setPropagationBehavior</span><span class="token punctuation">(</span><span class="token class-name">TransactionDefinition</span><span class="token punctuation">.</span><span class="token constant">PROPAGATION_REQUIRED</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//2.3超时时间</span>transactionDefinition<span class="token punctuation">.</span><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//永不超时</span><span class="token comment">//2.4是否只读</span>transactionDefinition<span class="token punctuation">.</span><span class="token function">setReadOnly</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//3.事务状态</span><span class="token class-name">TransactionStatus</span> transactionStatus <span class="token operator">=</span> transactionManager<span class="token punctuation">.</span><span class="token function">getTransaction</span><span class="token punctuation">(</span>transactionDefinition<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">try</span> <span class="token punctuation">{</span>    accountDao<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span>from<span class="token punctuation">,</span> <span class="token operator">-</span>balance<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">/</span> <span class="token number">0</span><span class="token punctuation">;</span>    accountDao<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span><span class="token keyword">to</span><span class="token punctuation">,</span> balance<span class="token punctuation">)</span><span class="token punctuation">;</span>    transactionManager<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span>transactionStatus<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>    transactionManager<span class="token punctuation">.</span><span class="token function">rollback</span><span class="token punctuation">(</span>transactionStatus<span class="token punctuation">)</span><span class="token punctuation">;</span>    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-9-2事务模板"><a href="#2-9-2事务模板" class="headerlink" title="2.9.2事务模板"></a>2.9.2事务模板</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">transfer</span><span class="token punctuation">(</span><span class="token class-name">String</span> from<span class="token punctuation">,</span> <span class="token class-name">String</span> <span class="token keyword">to</span><span class="token punctuation">,</span> <span class="token keyword">double</span> balance<span class="token punctuation">)</span> <span class="token punctuation">{</span>    transactionTemplate<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">TransactionCallback</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">doInTransaction</span><span class="token punctuation">(</span><span class="token class-name">TransactionStatus</span> status<span class="token punctuation">)</span> <span class="token punctuation">{</span>            accountDao<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span>from<span class="token punctuation">,</span> <span class="token operator">-</span>balance<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">/</span> <span class="token number">0</span><span class="token punctuation">;</span>            accountDao<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span><span class="token keyword">to</span><span class="token punctuation">,</span> balance<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-9-3声明式"><a href="#2-9-3声明式" class="headerlink" title="2.9.3声明式"></a>2.9.3声明式</h4><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!--AOP 使用事务 --&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">tx:</span>advice</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>txAdvice<span class="token punctuation">"</span></span> <span class="token attr-name">transaction-manager</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>transactionManager<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">tx:</span>attributes</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">tx:</span>method</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>transfer<span class="token punctuation">"</span></span> <span class="token attr-name">propagation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>REQUIRED<span class="token punctuation">"</span></span> <span class="token attr-name">timeout</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>-1<span class="token punctuation">"</span></span> <span class="token attr-name">read-only</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">tx:</span>method</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>insert*<span class="token punctuation">"</span></span> <span class="token attr-name">propagation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>REQUIRED<span class="token punctuation">"</span></span> <span class="token attr-name">timeout</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>-1<span class="token punctuation">"</span></span> <span class="token attr-name">read-only</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">tx:</span>attributes</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">tx:</span>advice</span><span class="token punctuation">&gt;</span></span><span class="token comment">&lt;!--AOP --&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>config</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>pointcut</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>pt<span class="token punctuation">"</span></span> <span class="token attr-name">expression</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>execution(* com.bwf.service.*.*(..))<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>advisor</span> <span class="token attr-name">advice-ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>txAdvice<span class="token punctuation">"</span></span> <span class="token attr-name">pointcut-ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>pt<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">aop:</span>advisor</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">aop:</span>config</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-9-4注解"><a href="#2-9-4注解" class="headerlink" title="2.9.4注解"></a>2.9.4注解</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token annotation punctuation">@ComponentScan</span><span class="token punctuation">(</span><span class="token string">"com.bwf"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@PropertySource</span><span class="token punctuation">(</span><span class="token string">"db.properties"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@EnableTransactionManagement</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SpringConfig</span> <span class="token punctuation">{</span>        <span class="token comment">//方法或类上</span><span class="token annotation punctuation">@Transactional</span><span class="token punctuation">(</span>isolation <span class="token operator">=</span> <span class="token class-name">Isolation</span><span class="token punctuation">.</span><span class="token constant">REPEATABLE_READ</span><span class="token punctuation">,</span> propagation <span class="token operator">=</span> <span class="token class-name">Propagation</span><span class="token punctuation">.</span><span class="token constant">REQUIRED</span><span class="token punctuation">,</span> readOnly <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">,</span> timeout <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-9-5隔离级别"><a href="#2-9-5隔离级别" class="headerlink" title="2.9.5隔离级别"></a>2.9.5隔离级别</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">TransactionDefinition</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> <span class="token constant">ISOLATION_DEFAULT</span> <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token comment">//读未提交（一个事务可以读取另一个并行事务已修改还未提交的数据）脏读</span>    <span class="token keyword">int</span> <span class="token constant">ISOLATION_READ_UNCOMMITTED</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token comment">//读已提交（只允许读已提交的数据）避免脏读</span>    <span class="token keyword">int</span> <span class="token constant">ISOLATION_READ_COMMITTED</span> <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>    <span class="token comment">//可重复读（可以确保一个事务不会修改已经由另一个事务读取但未提交的数据）避免脏读和不可重复读</span>    <span class="token keyword">int</span> <span class="token constant">ISOLATION_REPEATABLE_READ</span> <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span>    <span class="token comment">//串行化</span>    <span class="token keyword">int</span> <span class="token constant">ISOLATION_SERIALIZABLE</span> <span class="token operator">=</span> <span class="token number">8</span><span class="token punctuation">;</span>    <span class="token comment">//使用数据库默认隔离级别（可重复读）</span>select @<span class="token annotation punctuation">@tx_isolation</span><span class="token punctuation">;</span>select @<span class="token annotation punctuation">@global.tx_isolation</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-9-6传播行为"><a href="#2-9-6传播行为" class="headerlink" title="2.9.6传播行为"></a>2.9.6传播行为</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">TransactionDefinition</span> <span class="token punctuation">{</span>    <span class="token comment">//如果上下文中已有事务，那么就加入事务中执行，如果没有则开启一个事务（默认）  </span>    <span class="token keyword">int</span> <span class="token constant">PROPAGATION_REQUIRED</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">//增删改                                 </span>    <span class="token comment">//如果存在一个事务，支持当前事务，如果没有事务，则以非事务运行          </span>    <span class="token keyword">int</span> <span class="token constant">PROPAGATION_SUPPORTS</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">//查询</span>    <span class="token comment">//如果存在一个事务，支持当前事务，如果没有事务，则抛出异常</span>    <span class="token keyword">int</span> <span class="token constant">PROPAGATION_MANDATORY</span> <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>    <span class="token comment">//总是开启一个事务，如果事务已存在，则将这个事务挂起</span>    <span class="token keyword">int</span> <span class="token constant">PROPAGATION_REQUIRES_NEW</span> <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>    <span class="token comment">//总是以非事务运行，如果事务已存在，则将这个事务挂起</span>    <span class="token keyword">int</span> <span class="token constant">PROPAGATION_NOT_SUPPORTED</span> <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span>    <span class="token comment">//总是以非事务运行，如果事务已存在，则抛出异常</span>    <span class="token keyword">int</span> <span class="token constant">PROPAGATION_NEVER</span> <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>    <span class="token comment">//如果存在一个事务，则嵌套运行在事务中，如果没有则按PROPAGATION_REQUIRED的方式运行</span>    <span class="token keyword">int</span> <span class="token constant">PROPAGATION_NESTED</span> <span class="token operator">=</span> <span class="token number">6</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-10集成Junit"><a href="#2-10集成Junit" class="headerlink" title="2.10集成Junit"></a>2.10集成Junit</h3><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>junit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>junit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>4.12<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>${spring.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//SpringJUnit4ClassRunner requires JUnit 4.12 or higher.</span><span class="token annotation punctuation">@RunWith</span><span class="token punctuation">(</span><span class="token class-name">SpringJUnit4ClassRunner</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span> <span class="token comment">//@ContextConfiguration(locations = "classpath:beans.xml")</span><span class="token class-name">ClassPathXmlApplicationContext</span> context <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ClassPathXmlApplicationContext</span><span class="token punctuation">(</span><span class="token string">"beans.xml"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token annotation punctuation">@ContextConfiguration</span><span class="token punctuation">(</span>classes <span class="token operator">=</span> <span class="token class-name">SpringConfig</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token class-name">AnnotationConfigApplicationContext</span> context <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AnnotationConfigApplicationContext</span><span class="token punctuation">(</span><span class="token class-name">SpringConfig</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-11集成Log4j2"><a href="#2-11集成Log4j2" class="headerlink" title="2.11集成Log4j2"></a>2.11集成Log4j2</h3><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.apache.logging.log4j<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>log4j-api<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>2.17.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.apache.logging.log4j<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>log4j-core<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>2.17.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-12集成mybatis"><a href="#2-12集成mybatis" class="headerlink" title="2.12集成mybatis"></a>2.12集成mybatis</h3><h4 id="2-12-1pom-xml"><a href="#2-12-1pom-xml" class="headerlink" title="2.12.1pom.xml"></a>2.12.1pom.xml</h4><h4 id="2-12-2配置文件"><a href="#2-12-2配置文件" class="headerlink" title="2.12.2配置文件"></a>2.12.2配置文件</h4><ol><li>beans.xml</li><li>mybatis-config.xml</li><li>log4j2.xml</li><li>db.properties</li></ol><h2 id="3-SpringMVC"><a href="#3-SpringMVC" class="headerlink" title="3.SpringMVC"></a>3.SpringMVC</h2><h3 id="3-1原理"><a href="#3-1原理" class="headerlink" title="3.1原理"></a>3.1原理</h3><p>Model（模型）存储数据</p><p>View（视图）显示数据</p><p>Controller（控制器）</p><p><img src="/../images/JAVA%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E7%AC%94%E8%AE%B0%EF%BC%88%E4%BA%8C%EF%BC%89/springmvc.png" alt="springmvc"></p><h3 id="3-2pom-xml"><a href="#3-2pom-xml" class="headerlink" title="3.2pom.xml"></a>3.2pom.xml</h3><ol><li>IOC</li><li>MVC</li></ol><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-webmvc<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>${spring.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-3配置"><a href="#3-3配置" class="headerlink" title="3.3配置"></a>3.3配置</h3><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">&gt;</span></span>app<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-class</span><span class="token punctuation">&gt;</span></span>org.springframework.web.servlet.DispatcherServlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-class</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>init-param</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-name</span><span class="token punctuation">&gt;</span></span>contextConfigLocation<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-name</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-value</span><span class="token punctuation">&gt;</span></span>classpath*:spring-mvc.xml<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-value</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>init-param</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>load-on-startup</span><span class="token punctuation">&gt;</span></span>1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>load-on-startup</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-mapping</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">&gt;</span></span>app<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">&gt;</span></span>/<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-mapping</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>component-scan</span> <span class="token attr-name">base-package</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.bwf<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">context:</span>component-scan</span><span class="token punctuation">&gt;</span></span><span class="token comment">&lt;!-- 映射器，适配器 --&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>annotation-driven</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">mvc:</span>annotation-driven</span><span class="token punctuation">&gt;</span></span><span class="token comment">&lt;!-- 视图解析器 --&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org.springframework.web.servlet.view.InternalResourceViewResolver<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>prefix<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>suffix<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>.jsp<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-4请求参数绑定"><a href="#3-4请求参数绑定" class="headerlink" title="3.4请求参数绑定"></a>3.4请求参数绑定</h3><h4 id="3-4-1简单类型"><a href="#3-4-1简单类型" class="headerlink" title="3.4.1简单类型"></a>3.4.1简单类型</h4><ol><li>请求参数名称和方法形参名称一致，自动绑定</li><li>请求参数名称和方法形参名称不一致， @RequestParam</li></ol><h4 id="3-4-2POJO类型"><a href="#3-4-2POJO类型" class="headerlink" title="3.4.2POJO类型"></a>3.4.2POJO类型</h4><ol><li>请求参数名称和实体类的成员变量名称一致，自动绑定</li></ol><h4 id="3-4-3JSON类型"><a href="#3-4-3JSON类型" class="headerlink" title="3.4.3JSON类型"></a>3.4.3JSON类型</h4><ol><li>js</li></ol><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">$<span class="token punctuation">.</span><span class="token function">ajax</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    <span class="token literal-property property">url</span><span class="token operator">:</span> <span class="token string">'testJsonString'</span><span class="token punctuation">,</span>    <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">'post'</span><span class="token punctuation">,</span>    <span class="token literal-property property">contentType</span><span class="token operator">:</span> <span class="token string">"application/json;charset=utf-8"</span><span class="token punctuation">,</span>    <span class="token literal-property property">data</span><span class="token operator">:</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string-property property">"spuId"</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string-property property">"spuName"</span><span class="token operator">:</span> <span class="token string">"a"</span><span class="token punctuation">,</span> <span class="token string-property property">"spuTitle"</span><span class="token operator">:</span> <span class="token string">"b"</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">success</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"success"</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token literal-property property">https</span><span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>www<span class="token punctuation">.</span>runoob<span class="token punctuation">.</span>com<span class="token operator">/</span>http<span class="token operator">/</span>http<span class="token operator">-</span>content<span class="token operator">-</span>type<span class="token punctuation">.</span>html<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li>pom.xml</li></ol><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.alibaba<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>fastjson<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>1.2.78<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="3"><li>springmvc配置文件</li></ol><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>annotation-driven</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>message-converters</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.alibaba.fastjson.support.spring.FastJsonHttpMessageConverter<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>supportedMediaTypes<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>list</span><span class="token punctuation">&gt;</span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">&gt;</span></span>application/json<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>list</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">mvc:</span>message-converters</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">mvc:</span>annotation-driven</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="4"><li>java</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/testJsonString"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">testJsonString</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestBody</span> <span class="token class-name">Spu</span> spu<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"spu = "</span> <span class="token operator">+</span> spu<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token string">"success"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-4-4请求头-Cookie-Req-Resp"><a href="#3-4-4请求头-Cookie-Req-Resp" class="headerlink" title="3.4.4请求头,Cookie,Req,Resp"></a>3.4.4请求头,Cookie,Req,Resp</h4><h4 id="3-4-5RESTful"><a href="#3-4-5RESTful" class="headerlink" title="3.4.5RESTful"></a>3.4.5RESTful</h4><p>增：<a href="http://localhost:8080/%E9%A1%B9%E7%9B%AE%E8%B7%AF%E5%BE%84/1/a/b">http://localhost:8080/项目路径/1/a/b</a>  POST</p><p>删：<a href="http://localhost:8080/%E9%A1%B9%E7%9B%AE%E8%B7%AF%E5%BE%84/1">http://localhost:8080/项目路径/1</a>          DELETE</p><p>改：<a href="http://localhost:8080/%E9%A1%B9%E7%9B%AE%E8%B7%AF%E5%BE%84/1/a1">http://localhost:8080/项目路径/1/a1</a>     PUT</p><p>查：<a href="http://localhost:8080/%E9%A1%B9%E7%9B%AE%E8%B7%AF%E5%BE%84/1">http://localhost:8080/项目路径/1</a>           GET</p><h4 id="3-4-6自定义类型转换"><a href="#3-4-6自定义类型转换" class="headerlink" title="3.4.6自定义类型转换"></a>3.4.6自定义类型转换</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StringToDate</span> <span class="token keyword">implements</span> <span class="token class-name">Converter</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Date</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">Date</span> <span class="token function">convert</span><span class="token punctuation">(</span><span class="token class-name">String</span> source<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">SimpleDateFormat</span> format <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimpleDateFormat</span><span class="token punctuation">(</span><span class="token string">"yyyy-MM-dd"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Date</span> date <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            date <span class="token operator">=</span> format<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>source<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ParseException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> date<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>annotation-driven</span> <span class="token attr-name">conversion-service</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>conversionService<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>message-converters</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.alibaba.fastjson.support.spring.FastJsonHttpMessageConverter<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>supportedMediaTypes<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>list</span><span class="token punctuation">&gt;</span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">&gt;</span></span>application/json<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>list</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">mvc:</span>message-converters</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">mvc:</span>annotation-driven</span><span class="token punctuation">&gt;</span></span><span class="token comment">&lt;!-- 自定义类型转换器 --&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>conversionService<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org.springframework.context.support.ConversionServiceFactoryBean<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>converters<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.bwf.convert.StringToDate<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-5乱码"><a href="#3-5乱码" class="headerlink" title="3.5乱码"></a>3.5乱码</h3><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-name</span><span class="token punctuation">&gt;</span></span>characterEncodingFilter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-name</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-class</span><span class="token punctuation">&gt;</span></span>org.springframework.web.filter.CharacterEncodingFilter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-class</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>init-param</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-name</span><span class="token punctuation">&gt;</span></span>encoding<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-name</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-value</span><span class="token punctuation">&gt;</span></span>utf-8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-value</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>init-param</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>init-param</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-name</span><span class="token punctuation">&gt;</span></span>forceRequestEncoding<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-name</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-value</span><span class="token punctuation">&gt;</span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-value</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>init-param</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>init-param</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-name</span><span class="token punctuation">&gt;</span></span>forceResponseEncoding<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-name</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-value</span><span class="token punctuation">&gt;</span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-value</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>init-param</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-mapping</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-name</span><span class="token punctuation">&gt;</span></span>characterEncodingFilter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-name</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">&gt;</span></span>/*<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-mapping</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-6响应"><a href="#3-6响应" class="headerlink" title="3.6响应"></a>3.6响应</h3><h4 id="3-6-1逻辑视图名"><a href="#3-6-1逻辑视图名" class="headerlink" title="3.6.1逻辑视图名"></a>3.6.1逻辑视图名</h4><h4 id="3-6-2ModelAndView"><a href="#3-6-2ModelAndView" class="headerlink" title="3.6.2ModelAndView"></a>3.6.2ModelAndView</h4><h4 id="3-6-3Model、ModelMap"><a href="#3-6-3Model、ModelMap" class="headerlink" title="3.6.3Model、ModelMap"></a>3.6.3Model、ModelMap</h4><h4 id="3-6-4JSON"><a href="#3-6-4JSON" class="headerlink" title="3.6.4JSON"></a>3.6.4JSON</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/testJsonString"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@ResponseBody</span><span class="token keyword">public</span> <span class="token class-name">Spu</span> <span class="token function">testJsonString</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestBody</span> <span class="token class-name">Spu</span> spu<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"spu = "</span> <span class="token operator">+</span> spu<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> spu<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-6-5重定向"><a href="#3-6-5重定向" class="headerlink" title="3.6.5重定向"></a>3.6.5重定向</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/testRedirect2"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">testRedirect2</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token class-name">RedirectAttributes</span> redirectAttributes<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">//参数在url后http://localhost:8080/spring_mvc_war_exploded/testRedirect3?name=zhangsan</span>    <span class="token comment">//        redirectAttributes.addAttribute("name", name);</span>    <span class="token comment">//参数暂时保存到session中，重定向获取参数后从session中删除</span>    redirectAttributes<span class="token punctuation">.</span><span class="token function">addFlashAttribute</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">,</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token string">"redirect:/testRedirect3"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/testRedirect3"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">testRedirect3</span><span class="token punctuation">(</span><span class="token annotation punctuation">@ModelAttribute</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span> <span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"name = "</span> <span class="token operator">+</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token string">"success"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-7统一异常处理"><a href="#3-7统一异常处理" class="headerlink" title="3.7统一异常处理"></a>3.7统一异常处理</h3><p><img src="/../images/JAVA%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E7%AC%94%E8%AE%B0%EF%BC%88%E4%BA%8C%EF%BC%89/%E7%BB%9F%E4%B8%80%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86.png" alt="统一异常处理"></p><h4 id="3-7-1HandlerExceptionResolver"><a href="#3-7-1HandlerExceptionResolver" class="headerlink" title="3.7.1HandlerExceptionResolver"></a>3.7.1HandlerExceptionResolver</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GlobalExceptionResolver</span> <span class="token keyword">implements</span> <span class="token class-name">HandlerExceptionResolver</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">ModelAndView</span> <span class="token function">resolveException</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">,</span> <span class="token class-name">Object</span> handler<span class="token punctuation">,</span> <span class="token class-name">Exception</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">ModelAndView</span> modelAndView <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ModelAndView</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        modelAndView<span class="token punctuation">.</span><span class="token function">setViewName</span><span class="token punctuation">(</span><span class="token string">"error"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        modelAndView<span class="token punctuation">.</span><span class="token function">addObject</span><span class="token punctuation">(</span><span class="token string">"msg"</span><span class="token punctuation">,</span> ex<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> modelAndView<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-7-2注解"><a href="#3-7-2注解" class="headerlink" title="3.7.2注解"></a>3.7.2注解</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@ControllerAdvice</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GlobalExceptionResolver</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@ExceptionHandler</span><span class="token punctuation">(</span><span class="token class-name">ArrayIndexOutOfBoundsException</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">handlerArrayIndexOutOfBoundsException</span><span class="token punctuation">(</span><span class="token class-name">Exception</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"ArrayIndexOutOfBoundsException"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ex<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"ex.getMessage() = "</span> <span class="token operator">+</span> ex<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@ExceptionHandler</span><span class="token punctuation">(</span><span class="token class-name">NullPointerException</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">handlerNullPointerException</span><span class="token punctuation">(</span><span class="token class-name">Exception</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-8拦截器"><a href="#3-8拦截器" class="headerlink" title="3.8拦截器"></a>3.8拦截器</h3><p><img src="/../images/JAVA%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E7%AC%94%E8%AE%B0%EF%BC%88%E4%BA%8C%EF%BC%89/%E6%8B%A6%E6%88%AA%E5%99%A8.jpg" alt="拦截器"></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyInterceptor</span> <span class="token keyword">implements</span> <span class="token class-name">HandlerInterceptor</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">preHandle</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">,</span> <span class="token class-name">Object</span> handler<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">postHandle</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">,</span> <span class="token class-name">Object</span> handler<span class="token punctuation">,</span> <span class="token class-name">ModelAndView</span> modelAndView<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"postHandle..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">afterCompletion</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">,</span> <span class="token class-name">Object</span> handler<span class="token punctuation">,</span> <span class="token class-name">Exception</span> ex<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"afterCompletion..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!-- 拦截器 --&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>interceptors</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>interceptor</span><span class="token punctuation">&gt;</span></span>        <span class="token comment">&lt;!-- 拦截的请求路径 --&gt;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>mapping</span> <span class="token attr-name">path</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/**<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>        <span class="token comment">&lt;!-- 排除拦截的请求路径 --&gt;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>exclude-mapping</span> <span class="token attr-name">path</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/login<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>exclude-mapping</span> <span class="token attr-name">path</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/user<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.bwf.interceptor.MyInterceptor<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">mvc:</span>interceptor</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">mvc:</span>interceptors</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-9上传下载"><a href="#3-9上传下载" class="headerlink" title="3.9上传下载"></a>3.9上传下载</h3><h4 id="3-9-1pom-xml"><a href="#3-9-1pom-xml" class="headerlink" title="3.9.1pom.xml"></a>3.9.1pom.xml</h4><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>commons-io<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>commons-io<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>2.6<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>commons-fileupload<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>commons-fileupload<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>1.3.3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-9-2上传"><a href="#3-9-2上传" class="headerlink" title="3.9.2上传"></a>3.9.2上传</h4><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!-- 文件解析器 --&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>multipartResolver<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org.springframework.web.multipart.commons.CommonsMultipartResolver<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>maxUploadSize<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">&gt;</span></span>1000000<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-10校验"><a href="#3-10校验" class="headerlink" title="3.10校验"></a>3.10校验</h3><h4 id="3-10-1pom-xml"><a href="#3-10-1pom-xml" class="headerlink" title="3.10.1pom.xml"></a>3.10.1pom.xml</h4><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>javax.validation<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>validation-api<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>2.0.1.Final<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.hibernate<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>hibernate-validator<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>5.0.1.Final<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!-- 校验解析器 --&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>validator<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org.springframework.validation.beanvalidation.LocalValidatorFactoryBean<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>providerClass<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org.hibernate.validator.HibernateValidator<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/../images/JAVA%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E7%AC%94%E8%AE%B0%EF%BC%88%E4%BA%8C%EF%BC%89/image-20220121095140880.png" alt="image-20220121095140880"></p><h2 id="4-Spring-Boot"><a href="#4-Spring-Boot" class="headerlink" title="4.Spring Boot"></a>4.Spring Boot</h2><p><a href="https://docs.spring.io/spring-boot/docs/2.7.1/reference/htmlsingle/">https://docs.spring.io/spring-boot/docs/2.7.1/reference/htmlsingle/</a></p><h3 id="4-1pom-xml"><a href="#4-1pom-xml" class="headerlink" title="4.1pom.xml"></a>4.1pom.xml</h3><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>parent</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-parent<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>2.7.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>parent</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-2Writing-the-Code"><a href="#4-2Writing-the-Code" class="headerlink" title="4.2Writing the Code"></a>4.2Writing the Code</h3><h4 id="4-2-1启动方式一"><a href="#4-2-1启动方式一" class="headerlink" title="4.2.1启动方式一"></a>4.2.1启动方式一</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@RestController</span><span class="token annotation punctuation">@EnableAutoConfiguration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyApplication</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">)</span>    <span class="token class-name">String</span> <span class="token function">home</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"Hello World!"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">SpringApplication</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">MyApplication</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4-2-2启动方式二"><a href="#4-2-2启动方式二" class="headerlink" title="4.2.2启动方式二"></a>4.2.2启动方式二</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@EnableAutoConfiguration</span><span class="token annotation punctuation">@ComponentScan</span><span class="token punctuation">(</span><span class="token string">"com.bwf.controller"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyApplication</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">SpringApplication</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">MyApplication</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4-2-3启动方式三"><a href="#4-2-3启动方式三" class="headerlink" title="4.2.3启动方式三"></a>4.2.3启动方式三</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//默认扫描启动类所在包及其子包</span><span class="token annotation punctuation">@SpringBootApplication</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">App</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">SpringApplication</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">App</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-3注解"><a href="#4-3注解" class="headerlink" title="4.3注解"></a>4.3注解</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@EnableAutoConfiguration</span><span class="token annotation punctuation">@SpringBootApplication</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="4-4静态资源"><a href="#4-4静态资源" class="headerlink" title="4.4静态资源"></a>4.4静态资源</h3><p><a href="https://docs.spring.io/spring-boot/docs/2.7.1/reference/htmlsingle/#web.servlet.spring-mvc.static-content">https://docs.spring.io/spring-boot/docs/2.7.1/reference/htmlsingle/#web.servlet.spring-mvc.static-content</a></p><h3 id="4-5模板引擎"><a href="#4-5模板引擎" class="headerlink" title="4.5模板引擎"></a>4.5模板引擎</h3><p><a href="https://docs.spring.io/spring-boot/docs/2.7.1/reference/htmlsingle/#web.servlet.spring-mvc.template-engines">https://docs.spring.io/spring-boot/docs/2.7.1/reference/htmlsingle/#web.servlet.spring-mvc.template-engines</a></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//ThymeleafAutoConfiguration</span><span class="token comment">//ThymeleafProperties</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="4-6yaml-x2F-yml"><a href="#4-6yaml-x2F-yml" class="headerlink" title="4.6yaml/yml"></a>4.6yaml/yml</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//官方 spring-boot-starter-xxx</span>xxxAutoConfigurationxxxProperties<span class="token comment">//举例</span><span class="token class-name">DataSourceAutoConfiguration</span><span class="token class-name">DataSourceProperties</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>META-INF/spring.factories</p><p><img src="/../images/JAVA%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E7%AC%94%E8%AE%B0%EF%BC%88%E4%BA%8C%EF%BC%89/image-20220701152458250.png" alt="image-20220701152458250"></p><h3 id="4-7Web-Server"><a href="#4-7Web-Server" class="headerlink" title="4.7Web Server"></a>4.7Web Server</h3><p><a href="https://docs.spring.io/spring-boot/docs/2.7.1/reference/htmlsingle/#howto.webserver.configure">https://docs.spring.io/spring-boot/docs/2.7.1/reference/htmlsingle/#howto.webserver.configure</a></p><h3 id="4-8数据库连接池"><a href="#4-8数据库连接池" class="headerlink" title="4.8数据库连接池"></a>4.8数据库连接池</h3><p><a href="https://docs.spring.io/spring-boot/docs/2.7.1/reference/htmlsingle/#data.sql.datasource.connection-pool">https://docs.spring.io/spring-boot/docs/2.7.1/reference/htmlsingle/#data.sql.datasource.connection-pool</a></p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.alibaba<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>druid-spring-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>1.2.11<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">DruidDataSourceAutoConfigure</span><span class="token class-name">DruidStatProperties</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="4-9mybatis"><a href="#4-9mybatis" class="headerlink" title="4.9mybatis"></a>4.9mybatis</h3><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.mybatis.spring.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>mybatis-spring-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>2.1.4<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">MybatisAutoConfiguration</span><span class="token class-name">MybatisProperties</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">mybatis</span><span class="token punctuation">:</span>  <span class="token key atrule">type-aliases-package</span><span class="token punctuation">:</span> com.bwf.pojo  <span class="token key atrule">mapper-locations</span><span class="token punctuation">:</span> mybatis/<span class="token important">*.xml</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="4-10Log4j2"><a href="#4-10Log4j2" class="headerlink" title="4.10Log4j2"></a>4.10Log4j2</h3><p><a href="https://docs.spring.io/spring-boot/docs/2.6.3/reference/htmlsingle/#features.logging">https://docs.spring.io/spring-boot/docs/2.6.3/reference/htmlsingle/#features.logging</a></p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-log4j2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>2.7.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">logging</span><span class="token punctuation">:</span>  <span class="token key atrule">config</span><span class="token punctuation">:</span> classpth<span class="token punctuation">:</span>log4j2/log4j2.xml<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exclusions</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exclusion</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-logging<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exclusion</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exclusions</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-11统一异常处理"><a href="#4-11统一异常处理" class="headerlink" title="4.11统一异常处理"></a>4.11统一异常处理</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@ControllerAdvice</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GlobalExceptionResolver</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@ExceptionHandler</span><span class="token punctuation">(</span><span class="token class-name">RuntimeException</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@ResponseBody</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">handlerRuntimeException</span><span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-12拦截器"><a href="#4-12拦截器" class="headerlink" title="4.12拦截器"></a>4.12拦截器</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WebConfig</span> <span class="token keyword">implements</span> <span class="token class-name">WebMvcConfigurer</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> <span class="token class-name">MyInterceptor</span> myInterceptor<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addInterceptors</span><span class="token punctuation">(</span><span class="token class-name">InterceptorRegistry</span> registry<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">InterceptorRegistration</span> registration <span class="token operator">=</span> registry<span class="token punctuation">.</span><span class="token function">addInterceptor</span><span class="token punctuation">(</span>myInterceptor<span class="token punctuation">)</span><span class="token punctuation">;</span>        registration<span class="token punctuation">.</span><span class="token function">addPathPatterns</span><span class="token punctuation">(</span><span class="token string">"/**"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        registration<span class="token punctuation">.</span><span class="token function">excludePathPatterns</span><span class="token punctuation">(</span><span class="token string">"/login"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-13多环境配置"><a href="#4-13多环境配置" class="headerlink" title="4.13多环境配置"></a>4.13多环境配置</h3><p>dev、test、pre、prd</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">profiles</span><span class="token punctuation">:</span>    <span class="token key atrule">active</span><span class="token punctuation">:</span> prd<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="4-14logback"><a href="#4-14logback" class="headerlink" title="4.14logback"></a>4.14logback</h3><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Configuration</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>appender</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>STDOUT<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ch.qos.logback.core.ConsoleAppender<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>encoder</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>pattern</span><span class="token punctuation">&gt;</span></span>%d{HH:mm:ss.SSS} [%thread] %-5level %logger{36} - %msg%n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>pattern</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>encoder</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>appender</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>root</span> <span class="token attr-name">level</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>DEBUG<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>appender-ref</span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>STDOUT<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>root</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Configuration</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">logging</span><span class="token punctuation">:</span>  <span class="token key atrule">config</span><span class="token punctuation">:</span> classpath<span class="token punctuation">:</span>logback/logback.xml<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="4-15自定义配置"><a href="#4-15自定义配置" class="headerlink" title="4.15自定义配置"></a>4.15自定义配置</h3><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">bwf</span><span class="token punctuation">:</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> zhangsan  <span class="token key atrule">title</span><span class="token punctuation">:</span> abc<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token annotation punctuation">@Data</span><span class="token annotation punctuation">@ConfigurationProperties</span><span class="token punctuation">(</span>prefix <span class="token operator">=</span> <span class="token string">"bwf"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@ToString</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Spu</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> title<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Autowired</span><span class="token keyword">private</span> <span class="token class-name">Spu</span> spu<span class="token punctuation">;</span><span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"${bwf.name}"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token class-name">String</span> bwfName<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-16异步任务"><a href="#4-16异步任务" class="headerlink" title="4.16异步任务"></a>4.16异步任务</h3><h2 id="5Thymeleaf"><a href="#5Thymeleaf" class="headerlink" title="5Thymeleaf"></a>5Thymeleaf</h2><p><img src="/../images/JAVA%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E7%AC%94%E8%AE%B0%EF%BC%88%E4%BA%8C%EF%BC%89/thymeleaf.png" alt="thymeleaf"></p><h3 id="5-1SpringMVC集成"><a href="#5-1SpringMVC集成" class="headerlink" title="5.1SpringMVC集成"></a>5.1SpringMVC集成</h3><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.thymeleaf<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>thymeleaf<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>3.0.15.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.thymeleaf<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>thymeleaf-spring5<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>3.0.15.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>templateResolver<span class="token punctuation">"</span></span>      <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org.thymeleaf.spring5.templateresolver.SpringResourceTemplateResolver<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>prefix<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/WEB-INF/templates/<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>suffix<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>.html<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>templateMode<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>HTML<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>cacheable<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>templateEngine<span class="token punctuation">"</span></span>      <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org.thymeleaf.spring5.SpringTemplateEngine<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>templateResolver<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>templateResolver<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>enableSpringELCompiler<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org.thymeleaf.spring5.view.ThymeleafViewResolver<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>templateEngine<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>templateEngine<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>characterEncoding<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-2表达式语法"><a href="#5-2表达式语法" class="headerlink" title="5.2表达式语法"></a>5.2表达式语法</h3><p><a href="https://www.thymeleaf.org/doc/tutorials/3.0/usingthymeleaf.html#standard-expression-syntax">https://www.thymeleaf.org/doc/tutorials/3.0/usingthymeleaf.html#standard-expression-syntax</a></p><h3 id="5-3设置属性值"><a href="#5-3设置属性值" class="headerlink" title="5.3设置属性值"></a>5.3设置属性值</h3><table><thead><tr><th><code>th:abbr</code></th><th><code>th:accept</code></th><th><code>th:accept-charset</code></th></tr></thead><tbody><tr><td><code>th:accesskey</code></td><td><code>th:action</code></td><td><code>th:align</code></td></tr><tr><td><code>th:alt</code></td><td><code>th:archive</code></td><td><code>th:audio</code></td></tr><tr><td><code>th:autocomplete</code></td><td><code>th:axis</code></td><td><code>th:background</code></td></tr><tr><td><code>th:bgcolor</code></td><td><code>th:border</code></td><td><code>th:cellpadding</code></td></tr><tr><td><code>th:cellspacing</code></td><td><code>th:challenge</code></td><td><code>th:charset</code></td></tr><tr><td><code>th:cite</code></td><td><code>th:class</code></td><td><code>th:classid</code></td></tr><tr><td><code>th:codebase</code></td><td><code>th:codetype</code></td><td><code>th:cols</code></td></tr><tr><td><code>th:colspan</code></td><td><code>th:compact</code></td><td><code>th:content</code></td></tr><tr><td><code>th:contenteditable</code></td><td><code>th:contextmenu</code></td><td><code>th:data</code></td></tr></tbody></table><h3 id="5-4语句"><a href="#5-4语句" class="headerlink" title="5.4语句"></a>5.4语句</h3><h4 id="5-4-1判断"><a href="#5-4-1判断" class="headerlink" title="5.4.1判断"></a>5.4.1判断</h4><p>th:if</p><p>th:unless</p><h4 id="5-4-2遍历"><a href="#5-4-2遍历" class="headerlink" title="5.4.2遍历"></a>5.4.2遍历</h4><p>th:each</p><h3 id="5-5内联"><a href="#5-5内联" class="headerlink" title="5.5内联"></a>5.5内联</h3><h4 id="5-5-1表达式内联"><a href="#5-5-1表达式内联" class="headerlink" title="5.5.1表达式内联"></a>5.5.1表达式内联</h4><p>[[${name}]]</p><p>th:text=”${name}”</p><h4 id="5-5-2js内联"><a href="#5-5-2js内联" class="headerlink" title="5.5.2js内联"></a>5.5.2js内联</h4><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script th<span class="token operator">:</span>inline<span class="token operator">=</span><span class="token string">"javascript"</span><span class="token operator">&gt;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span>$<span class="token punctuation">{</span>name<span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="6-Spring-Security"><a href="#6-Spring-Security" class="headerlink" title="6.Spring Security"></a>6.Spring Security</h2><p>Apache <em>Shiro</em>是一个强大且易用的Java安全<em>框架</em>,执行身份验证、授权、密码和会话管理</p><p><em>Spring Security</em>是一个能够为基于Spring的企业应用系统提供声明式的安全访问控制解决方案的安全框架</p><h3 id="6-1概述"><a href="#6-1概述" class="headerlink" title="6.1概述"></a>6.1概述</h3><ol><li>认证  authentication</li></ol><p>​    验证用户是否为系统的合法主体，一个要求提供用户名和密码</p><ol start="2"><li>授权 authorization</li></ol><p>​    验证用户是否有权限执行某个操作（基于角色，基于资源）</p><h3 id="6-2认证"><a href="#6-2认证" class="headerlink" title="6.2认证"></a>6.2认证</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">AuthenticationManager</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/../images/JAVA%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E7%AC%94%E8%AE%B0%EF%BC%88%E4%BA%8C%EF%BC%89/image-20220706102533370.png" alt="image-20220706102533370"></p><h4 id="6-2-1默认用户名密码"><a href="#6-2-1默认用户名密码" class="headerlink" title="6.2.1默认用户名密码"></a>6.2.1默认用户名密码</h4><p>用户：user</p><p>密码：489bce86-ef00-4173-913f-db574c0c1411</p><p>SecurityAutoConfiguration</p><h4 id="6-2-2application-yml配置"><a href="#6-2-2application-yml配置" class="headerlink" title="6.2.2application.yml配置"></a>6.2.2application.yml配置</h4><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">security</span><span class="token punctuation">:</span>    <span class="token key atrule">user</span><span class="token punctuation">:</span>      <span class="token key atrule">name</span><span class="token punctuation">:</span> admin      <span class="token key atrule">password</span><span class="token punctuation">:</span> <span class="token number">123</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="6-2-3内存"><a href="#6-2-3内存" class="headerlink" title="6.2.3内存"></a>6.2.3内存</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SecurityConfig01</span> <span class="token keyword">extends</span> <span class="token class-name">WebSecurityConfigurerAdapter</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">configure</span><span class="token punctuation">(</span><span class="token class-name">AuthenticationManagerBuilder</span> auth<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>        <span class="token class-name">BCryptPasswordEncoder</span> encoder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BCryptPasswordEncoder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> encode <span class="token operator">=</span> encoder<span class="token punctuation">.</span><span class="token function">encode</span><span class="token punctuation">(</span><span class="token string">"123"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        auth<span class="token punctuation">.</span><span class="token function">inMemoryAuthentication</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">withUser</span><span class="token punctuation">(</span><span class="token string">"bwf"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">password</span><span class="token punctuation">(</span>encode<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">roles</span><span class="token punctuation">(</span><span class="token string">"bwf"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> <span class="token class-name">PasswordEncoder</span> <span class="token function">getPasswordEncoder</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">BCryptPasswordEncoder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="6-2-4UserDetailsService"><a href="#6-2-4UserDetailsService" class="headerlink" title="6.2.4UserDetailsService"></a>6.2.4UserDetailsService</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Service</span><span class="token punctuation">(</span><span class="token string">"userDetailsService"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserDetailsServiceImpl</span> <span class="token keyword">implements</span> <span class="token class-name">UserDetailsService</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">UserDetails</span> <span class="token function">loadUserByUsername</span><span class="token punctuation">(</span><span class="token class-name">String</span> username<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">UsernameNotFoundException</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"username = "</span> <span class="token operator">+</span> username<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">BCryptPasswordEncoder</span> passwordEncoder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BCryptPasswordEncoder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> encode <span class="token operator">=</span> passwordEncoder<span class="token punctuation">.</span><span class="token function">encode</span><span class="token punctuation">(</span><span class="token string">"123"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">GrantedAuthority</span><span class="token punctuation">&gt;</span></span> list <span class="token operator">=</span> <span class="token class-name">AuthorityUtils</span><span class="token punctuation">.</span><span class="token function">commaSeparatedStringToAuthorityList</span><span class="token punctuation">(</span><span class="token string">"query,insert,update,delete"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token string">"bwf"</span><span class="token punctuation">,</span> encode<span class="token punctuation">,</span> list<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SecurityConfig02</span> <span class="token keyword">extends</span> <span class="token class-name">WebSecurityConfigurerAdapter</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> <span class="token class-name">UserDetailsService</span> userDetailsService<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">configure</span><span class="token punctuation">(</span><span class="token class-name">AuthenticationManagerBuilder</span> auth<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>        auth<span class="token punctuation">.</span><span class="token function">userDetailsService</span><span class="token punctuation">(</span>userDetailsService<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> <span class="token class-name">PasswordEncoder</span> <span class="token function">getPasswordEncoder</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">BCryptPasswordEncoder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="6-3授权"><a href="#6-3授权" class="headerlink" title="6.3授权"></a>6.3授权</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">AuthorizationManager</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="6-4注解"><a href="#6-4注解" class="headerlink" title="6.4注解"></a>6.4注解</h3><ol><li><p>@EnableGlobalMethodSecurity(prePostEnabled = true, securedEnabled = true) 开启注解</p></li><li><p>@Secured()           基于角色校验</p></li><li><p>@PreAuthorize()  方法之前校验</p></li><li><p>@PostAuthorize() 方法后校验</p></li></ol><h3 id="6-5Remember-Me"><a href="#6-5Remember-Me" class="headerlink" title="6.5Remember-Me"></a>6.5Remember-Me</h3><p>RememberMeAuthenticationFilter</p><h4 id="6-5-1登录页"><a href="#6-5-1登录页" class="headerlink" title="6.5.1登录页"></a>6.5.1登录页</h4><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>checkbox<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>remember-me<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>记住我<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="6-5-2建表"><a href="#6-5-2建表" class="headerlink" title="6.5.2建表"></a>6.5.2建表</h4><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">JdbcTokenRepositoryImpl<span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> persistent_logins <span class="token punctuation">(</span>username <span class="token keyword">VARCHAR</span> <span class="token punctuation">(</span><span class="token number">64</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>series <span class="token keyword">VARCHAR</span> <span class="token punctuation">(</span><span class="token number">64</span><span class="token punctuation">)</span> <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span><span class="token punctuation">,</span>token <span class="token keyword">VARCHAR</span> <span class="token punctuation">(</span><span class="token number">64</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>last_used <span class="token keyword">TIMESTAMP</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="6-5-3依赖"><a href="#6-5-3依赖" class="headerlink" title="6.5.3依赖"></a>6.5.3依赖</h4><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.alibaba<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>druid-spring-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>1.2.11<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>mysql<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>mysql-connector-java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">&gt;</span></span>runtime<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="6-5-4application-yaml"><a href="#6-5-4application-yaml" class="headerlink" title="6.5.4application.yaml"></a>6.5.4application.yaml</h4><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">datasource</span><span class="token punctuation">:</span>    <span class="token key atrule">driver-class-name</span><span class="token punctuation">:</span> com.mysql.cj.jdbc.Driver    <span class="token key atrule">username</span><span class="token punctuation">:</span> root    <span class="token key atrule">password</span><span class="token punctuation">:</span> <span class="token number">123456</span>    <span class="token key atrule">url</span><span class="token punctuation">:</span> jdbc<span class="token punctuation">:</span>mysql<span class="token punctuation">:</span>//localhost<span class="token punctuation">:</span>3306/test<span class="token punctuation">?</span>serverTimezone=UTC    <span class="token key atrule">druid</span><span class="token punctuation">:</span>      <span class="token key atrule">initial-size</span><span class="token punctuation">:</span> <span class="token number">10</span>      <span class="token key atrule">max-active</span><span class="token punctuation">:</span> <span class="token number">10</span>      <span class="token key atrule">min-idle</span><span class="token punctuation">:</span> <span class="token number">10</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="6-5-5配置类"><a href="#6-5-5配置类" class="headerlink" title="6.5.5配置类"></a>6.5.5配置类</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Autowired</span><span class="token keyword">private</span> <span class="token class-name">DataSource</span> dataSource<span class="token punctuation">;</span><span class="token annotation punctuation">@Autowired</span><span class="token keyword">private</span> <span class="token class-name">PersistentTokenRepository</span> persistentTokenRepository<span class="token punctuation">;</span><span class="token annotation punctuation">@Bean</span><span class="token keyword">public</span> <span class="token class-name">PersistentTokenRepository</span> <span class="token function">getPersistentTokenRepository</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">JdbcTokenRepositoryImpl</span> repository <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JdbcTokenRepositoryImpl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//        repository.setCreateTableOnStartup(true);//自动创建表</span>    repository<span class="token punctuation">.</span><span class="token function">setDataSource</span><span class="token punctuation">(</span>dataSource<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//设置数据源</span>    <span class="token keyword">return</span> repository<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token annotation punctuation">@Override</span><span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">configure</span><span class="token punctuation">(</span><span class="token class-name">HttpSecurity</span> http<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>    http<span class="token punctuation">.</span><span class="token function">exceptionHandling</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">accessDeniedPage</span><span class="token punctuation">(</span><span class="token string">"/unauth.html"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//无权限</span>    http<span class="token punctuation">.</span><span class="token function">formLogin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">loginPage</span><span class="token punctuation">(</span><span class="token string">"/login.html"</span><span class="token punctuation">)</span><span class="token comment">//跳转到自定义登录页面</span>        <span class="token punctuation">.</span><span class="token function">loginProcessingUrl</span><span class="token punctuation">(</span><span class="token string">"/loginDo"</span><span class="token punctuation">)</span><span class="token comment">//登录处理路径</span>        <span class="token punctuation">.</span><span class="token function">defaultSuccessUrl</span><span class="token punctuation">(</span><span class="token string">"/success.html"</span><span class="token punctuation">)</span><span class="token comment">//登录成功，跳转页面</span>        <span class="token punctuation">.</span><span class="token function">permitAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">//不需要授权</span>        <span class="token punctuation">.</span><span class="token function">and</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">authorizeRequests</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">//需要授权的请求</span>        <span class="token punctuation">.</span><span class="token function">antMatchers</span><span class="token punctuation">(</span><span class="token string">"/query"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">hasRole</span><span class="token punctuation">(</span><span class="token string">"admin"</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">antMatchers</span><span class="token punctuation">(</span><span class="token string">"/insert"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">hasRole</span><span class="token punctuation">(</span><span class="token string">"dev"</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">antMatchers</span><span class="token punctuation">(</span><span class="token string">"/update"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">hasAnyRole</span><span class="token punctuation">(</span><span class="token string">"test,project"</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">and</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">rememberMe</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">tokenRepository</span><span class="token punctuation">(</span>persistentTokenRepository<span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">and</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">csrf</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">disable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//关闭跨站请求保护</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="7-Jwt"><a href="#7-Jwt" class="headerlink" title="7.Jwt"></a>7.Jwt</h2><p><img src="/../images/JAVA%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E7%AC%94%E8%AE%B0%EF%BC%88%E4%BA%8C%EF%BC%89/session.png" alt="session"></p><p><img src="/../images/JAVA%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E7%AC%94%E8%AE%B0%EF%BC%88%E4%BA%8C%EF%BC%89/session%E5%A4%8D%E5%88%B6-1657093410749.webp" alt="session复制"></p><p><img src="/../images/JAVA%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E7%AC%94%E8%AE%B0%EF%BC%88%E4%BA%8C%EF%BC%89/jwt.png" alt="jwt"></p><h3 id="7-1概念"><a href="#7-1概念" class="headerlink" title="7.1概念"></a>7.1概念</h3><p>JSON Web Tokens are an open, industry standard <a href="https://tools.ietf.org/html/rfc7519">RFC 7519</a> method for representing claims securely between two parties.</p><p>JWT是一个开放的行业标准（ RFC 7519）</p><h3 id="7-2组成"><a href="#7-2组成" class="headerlink" title="7.2组成"></a>7.2组成</h3><ol><li>Header</li></ol><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">{</span>  <span class="token property">"alg"</span><span class="token operator">:</span> <span class="token string">"HS256"</span><span class="token punctuation">,</span>  <span class="token property">"typ"</span><span class="token operator">:</span> <span class="token string">"JWT"</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li>Payload</li></ol><pre class="line-numbers language-json" data-language="json"><code class="language-json">Registered claims<span class="token operator">:</span><span class="token punctuation">{</span>   iss (issuer)<span class="token operator">:</span> <span class="token string">"发行人"</span>，   exp (expiration time)<span class="token operator">:</span> <span class="token string">"到期时间"</span><span class="token punctuation">,</span>   sub (subject)<span class="token operator">:</span> <span class="token string">"主体"</span>，   aud<span class="token operator">:</span> <span class="token string">"用户"</span>   https<span class="token operator">:</span><span class="token comment">//datatracker.ietf.org/doc/html/rfc7519#section-4.1</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="3"><li>Signature</li></ol><p>HMACSHA256</p><h3 id="7-2auth0"><a href="#7-2auth0" class="headerlink" title="7.2auth0"></a>7.2auth0</h3><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.auth0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>java-jwt<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>4.0.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="8-微服务"><a href="#8-微服务" class="headerlink" title="8.微服务"></a>8.微服务</h2><h3 id="8-1传统架构"><a href="#8-1传统架构" class="headerlink" title="8.1传统架构"></a>8.1传统架构</h3><p>订单</p><p>com.bwf.order.controller</p><p>com.bwf.order.service</p><p>com.bwf.order.dao</p><p>支付</p><p>com.bwf.pay.controller</p><p>com.bwf.pay.service</p><p>com.bwf.pay.dao</p><h3 id="8-2分布式"><a href="#8-2分布式" class="headerlink" title="8.2分布式"></a>8.2分布式</h3><p>根据业务拆分</p><h3 id="8-3SOA（面向服务的架构）"><a href="#8-3SOA（面向服务的架构）" class="headerlink" title="8.3SOA（面向服务的架构）"></a>8.3SOA（面向服务的架构）</h3><p>协议SOAP（http+xml）</p><h3 id="8-4微服务"><a href="#8-4微服务" class="headerlink" title="8.4微服务"></a>8.4微服务</h3><p>http+json</p><h3 id="8-5Spring-Cloud-Alibaba"><a href="#8-5Spring-Cloud-Alibaba" class="headerlink" title="8.5Spring Cloud Alibaba"></a>8.5Spring Cloud Alibaba</h3><p><a href="https://github.com/alibaba/">https://github.com/alibaba/</a></p><ol><li><p>服务发现 nacos           Spring cloud Eureka</p></li><li><p>服务注册 nacos           Spring Cloud Config</p></li><li><p>远程调用                      Spring Cloud OpenFeign</p></li><li><p>网关                              Spring Cloud Gateway</p></li><li><p>限流（熔断）sentinel</p></li></ol><h2 id="9nacos"><a href="#9nacos" class="headerlink" title="9nacos"></a>9nacos</h2><h3 id="9-1服务发现"><a href="#9-1服务发现" class="headerlink" title="9.1服务发现"></a>9.1服务发现</h3><pre class="line-numbers language-cmd" data-language="cmd"><code class="language-cmd">startup.cmd -m standalone<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><a href="https://start.spring.io/">https://start.spring.io</a></p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.alibaba.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-cloud-starter-alibaba-nacos-discovery<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/../images/JAVA%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E7%AC%94%E8%AE%B0%EF%BC%88%E4%BA%8C%EF%BC%89/image-20220707142839966.png" alt="image-20220707142839966"></p><h3 id="9-2配置中心"><a href="#9-2配置中心" class="headerlink" title="9.2配置中心"></a>9.2配置中心</h3><h4 id="9-2-1pom-xml"><a href="#9-2-1pom-xml" class="headerlink" title="9.2.1pom.xml"></a>9.2.1pom.xml</h4><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.alibaba.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-cloud-starter-alibaba-nacos-config<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="9-2-2bootstrap-yml"><a href="#9-2-2bootstrap-yml" class="headerlink" title="9.2.2bootstrap.yml"></a>9.2.2bootstrap.yml</h4><p>在 <code>bootstrap.properties</code> 中配置 Nacos server 的地址和应用名</p><p>默认dataId[springcloud-nacos.properties] &amp; group[DEFAULT_GROUP]</p><h4 id="9-2-3自动刷新"><a href="#9-2-3自动刷新" class="headerlink" title="9.2.3自动刷新"></a>9.2.3自动刷新</h4><p>通过 Spring Cloud 原生注解 <code>@RefreshScope</code> 实现配置自动更新</p><h4 id="9-2-4file-exetension"><a href="#9-2-4file-exetension" class="headerlink" title="9.2.4file-exetension"></a>9.2.4file-exetension</h4><p><code>file-exetension</code> 为配置内容的数据格式，可以通过配置项 <code>spring.cloud.nacos.config.file-extension</code> 来配置。目前只支持 <code>properties</code> 和 <code>yaml</code> 类型</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">cloud</span><span class="token punctuation">:</span>    <span class="token key atrule">nacos</span><span class="token punctuation">:</span>      <span class="token key atrule">config</span><span class="token punctuation">:</span>        <span class="token key atrule">server-addr</span><span class="token punctuation">:</span> localhost<span class="token punctuation">:</span><span class="token number">8848</span>        <span class="token key atrule">username</span><span class="token punctuation">:</span> nacos        <span class="token key atrule">password</span><span class="token punctuation">:</span> nacos        <span class="token key atrule">file-extension</span><span class="token punctuation">:</span> yaml<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>Data ID:</strong> springcloud-nacos.yaml</p><h4 id="9-2-5命名空间"><a href="#9-2-5命名空间" class="headerlink" title="9.2.5命名空间"></a>9.2.5命名空间</h4><p>不同环境的配置的区分隔离</p><p><img src="/../images/JAVA%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E7%AC%94%E8%AE%B0%EF%BC%88%E4%BA%8C%EF%BC%89/image-20220708143013119.png" alt="image-20220708143013119"></p><h4 id="9-2-5分组"><a href="#9-2-5分组" class="headerlink" title="9.2.5分组"></a>9.2.5分组</h4><p><img src="/../images/JAVA%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E7%AC%94%E8%AE%B0%EF%BC%88%E4%BA%8C%EF%BC%89/image-20220708145312849.png" alt="image-20220708145312849"></p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">cloud</span><span class="token punctuation">:</span>    <span class="token key atrule">nacos</span><span class="token punctuation">:</span>      <span class="token key atrule">config</span><span class="token punctuation">:</span>        <span class="token key atrule">server-addr</span><span class="token punctuation">:</span> localhost<span class="token punctuation">:</span><span class="token number">8848</span>        <span class="token key atrule">username</span><span class="token punctuation">:</span> nacos        <span class="token key atrule">password</span><span class="token punctuation">:</span> nacos        <span class="token key atrule">file-extension</span><span class="token punctuation">:</span> yaml        <span class="token key atrule">namespace</span><span class="token punctuation">:</span> bbac11a9<span class="token punctuation">-</span>840a<span class="token punctuation">-</span>417c<span class="token punctuation">-</span>863d<span class="token punctuation">-</span>475fb76ccad6 <span class="token comment">#命名空间</span>        <span class="token key atrule">group</span><span class="token punctuation">:</span> dev <span class="token comment">#分组</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="9-2-5多配置集"><a href="#9-2-5多配置集" class="headerlink" title="9.2.5多配置集"></a>9.2.5多配置集</h4><p><img src="/../images/JAVA%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E7%AC%94%E8%AE%B0%EF%BC%88%E4%BA%8C%EF%BC%89/image-20220708150101177.png" alt="image-20220708150101177"></p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">cloud</span><span class="token punctuation">:</span>    <span class="token key atrule">nacos</span><span class="token punctuation">:</span>      <span class="token key atrule">config</span><span class="token punctuation">:</span>        <span class="token key atrule">server-addr</span><span class="token punctuation">:</span> localhost<span class="token punctuation">:</span><span class="token number">8848</span>        <span class="token key atrule">username</span><span class="token punctuation">:</span> nacos        <span class="token key atrule">password</span><span class="token punctuation">:</span> nacos        <span class="token key atrule">file-extension</span><span class="token punctuation">:</span> yaml        <span class="token key atrule">namespace</span><span class="token punctuation">:</span> bbac11a9<span class="token punctuation">-</span>840a<span class="token punctuation">-</span>417c<span class="token punctuation">-</span>863d<span class="token punctuation">-</span>475fb76ccad6 <span class="token comment">#命名空间</span>        <span class="token comment">#group: dev #分组</span>        <span class="token key atrule">extension-configs</span><span class="token punctuation">:</span>         <span class="token punctuation">-</span> <span class="token key atrule">data-id</span><span class="token punctuation">:</span> mybatis.yaml           <span class="token key atrule">group</span><span class="token punctuation">:</span> dev           <span class="token key atrule">refresh</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>         <span class="token punctuation">-</span> <span class="token key atrule">data-id</span><span class="token punctuation">:</span> log4j2.yaml           <span class="token key atrule">group</span><span class="token punctuation">:</span> dev           <span class="token key atrule">refresh</span><span class="token punctuation">:</span> <span class="token boolean important">true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="9-2-6持久化"><a href="#9-2-6持久化" class="headerlink" title="9.2.6持久化"></a>9.2.6持久化</h4><h2 id="10-Spring-Cloud-OpenFeign"><a href="#10-Spring-Cloud-OpenFeign" class="headerlink" title="10.Spring Cloud OpenFeign"></a>10.Spring Cloud OpenFeign</h2><p>Java RMI（Java Remote Method Invocation）</p><p>HttpClient</p><p>声明式 REST 客户端</p><p><img src="/../images/JAVA%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E7%AC%94%E8%AE%B0%EF%BC%88%E4%BA%8C%EF%BC%89/image-20220707160828670.png" alt="image-20220707160828670"></p><h3 id="10-1订单系统"><a href="#10-1订单系统" class="headerlink" title="10.1订单系统"></a>10.1订单系统</h3><h4 id="10-1-1pom-xml"><a href="#10-1-1pom-xml" class="headerlink" title="10.1.1pom.xml"></a>10.1.1pom.xml</h4><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.alibaba.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-cloud-starter-alibaba-nacos-discovery<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-cloud-starter-openfeign<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="10-1-2yaml"><a href="#10-1-2yaml" class="headerlink" title="10.1.2yaml"></a>10.1.2yaml</h4><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">application</span><span class="token punctuation">:</span>    <span class="token key atrule">name</span><span class="token punctuation">:</span> cloud<span class="token punctuation">-</span>order  <span class="token key atrule">cloud</span><span class="token punctuation">:</span>    <span class="token key atrule">nacos</span><span class="token punctuation">:</span>      <span class="token key atrule">discovery</span><span class="token punctuation">:</span>        <span class="token key atrule">server-addr</span><span class="token punctuation">:</span> localhost<span class="token punctuation">:</span><span class="token number">8848</span>        <span class="token key atrule">username</span><span class="token punctuation">:</span> nacos        <span class="token key atrule">password</span><span class="token punctuation">:</span> nacos<span class="token key atrule">server</span><span class="token punctuation">:</span>  <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">8081</span><span class="token comment">#https://docs.spring.io/spring-cloud-openfeign/docs/current/reference/html/#timeout-#handling  </span><span class="token key atrule">feign</span><span class="token punctuation">:</span>  <span class="token key atrule">httpclient</span><span class="token punctuation">:</span>    <span class="token key atrule">connection-timeout</span><span class="token punctuation">:</span> <span class="token number">2000</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="10-1-3JAVA"><a href="#10-1-3JAVA" class="headerlink" title="10.1.3JAVA"></a>10.1.3JAVA</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//被调用的服务名（nacos）</span><span class="token annotation punctuation">@FeignClient</span><span class="token punctuation">(</span><span class="token string">"cloud-pay"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">PayFeign</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/pay"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">pay</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@EnableFeignClients</span> <span class="token comment">//开启feign客户端</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="10-2支付系统"><a href="#10-2支付系统" class="headerlink" title="10.2支付系统"></a>10.2支付系统</h3><h4 id="10-2-1pom-xml"><a href="#10-2-1pom-xml" class="headerlink" title="10.2.1pom.xml"></a>10.2.1pom.xml</h4><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.alibaba.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-cloud-starter-alibaba-nacos-discovery<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-cloud-starter-openfeign<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="10-2-2yaml"><a href="#10-2-2yaml" class="headerlink" title="10.2.2yaml"></a>10.2.2yaml</h4><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">application</span><span class="token punctuation">:</span>    <span class="token key atrule">name</span><span class="token punctuation">:</span> cloud<span class="token punctuation">-</span>pay  <span class="token key atrule">cloud</span><span class="token punctuation">:</span>    <span class="token key atrule">nacos</span><span class="token punctuation">:</span>      <span class="token key atrule">discovery</span><span class="token punctuation">:</span>        <span class="token key atrule">server-addr</span><span class="token punctuation">:</span> localhost<span class="token punctuation">:</span><span class="token number">8848</span>        <span class="token key atrule">username</span><span class="token punctuation">:</span> nacos        <span class="token key atrule">password</span><span class="token punctuation">:</span> nacos<span class="token key atrule">server</span><span class="token punctuation">:</span>  <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">8082</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="11负载均衡"><a href="#11负载均衡" class="headerlink" title="11负载均衡"></a>11负载均衡</h2><p>Ribbon</p><p>LoadBalancer</p><p>nginx</p><p>负载均衡算法</p><ol><li>轮训</li><li>随机</li><li>最小连接数</li><li>权重</li><li>源地址哈希法</li></ol><h2 id="12网关"><a href="#12网关" class="headerlink" title="12网关"></a>12网关</h2><h3 id="12-1简介"><a href="#12-1简介" class="headerlink" title="12.1简介"></a>12.1简介</h3><p>基于Spring WebFlux构建的API网关（Netty）</p><p>security, monitoring/metrics, and resiliency</p><h3 id="12-2原理"><a href="#12-2原理" class="headerlink" title="12.2原理"></a>12.2原理</h3><p><img src="/../images/JAVA%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E7%AC%94%E8%AE%B0%EF%BC%88%E4%BA%8C%EF%BC%89/image-20220711094046456.png" alt="image-20220711094046456"></p><h3 id="12-3端口"><a href="#12-3端口" class="headerlink" title="12.3端口"></a>12.3端口</h3><p>80 and 443</p><h3 id="12-4谓词（断言）"><a href="#12-4谓词（断言）" class="headerlink" title="12.4谓词（断言）"></a>12.4谓词（断言）</h3><p><img src="/../images/JAVA%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E7%AC%94%E8%AE%B0%EF%BC%88%E4%BA%8C%EF%BC%89/image-20220711134331247.png" alt="image-20220711134331247"></p><h3 id="12-5过滤器"><a href="#12-5过滤器" class="headerlink" title="12.5过滤器"></a>12.5过滤器</h3><p><img src="/../images/JAVA%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E7%AC%94%E8%AE%B0%EF%BC%88%E4%BA%8C%EF%BC%89/image-20220711135750375.png" alt="image-20220711135750375"></p><h3 id="12-6全局过滤器"><a href="#12-6全局过滤器" class="headerlink" title="12.6全局过滤器"></a>12.6全局过滤器</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyGlobalFilters</span> <span class="token keyword">implements</span> <span class="token class-name">GlobalFilter</span> <span class="token punctuation">,</span> <span class="token class-name">Ordered</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">Mono</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Void</span><span class="token punctuation">&gt;</span></span> <span class="token function">filter</span><span class="token punctuation">(</span><span class="token class-name">ServerWebExchange</span> exchange<span class="token punctuation">,</span> <span class="token class-name">GatewayFilterChain</span> chain<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">ServerHttpRequest</span> request <span class="token operator">=</span> exchange<span class="token punctuation">.</span><span class="token function">getRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> token <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getQueryParams</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getFirst</span><span class="token punctuation">(</span><span class="token string">"token"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>token<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">ServerHttpResponse</span> response <span class="token operator">=</span> exchange<span class="token punctuation">.</span><span class="token function">getResponse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            response<span class="token punctuation">.</span><span class="token function">setStatusCode</span><span class="token punctuation">(</span><span class="token class-name">HttpStatus</span><span class="token punctuation">.</span><span class="token constant">BAD_GATEWAY</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">DataBuffer</span> wrap <span class="token operator">=</span> response<span class="token punctuation">.</span><span class="token function">bufferFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">wrap</span><span class="token punctuation">(</span><span class="token string">"token is null"</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token class-name">StandardCharsets</span><span class="token punctuation">.</span><span class="token constant">UTF_8</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> response<span class="token punctuation">.</span><span class="token function">writeWith</span><span class="token punctuation">(</span><span class="token class-name">Mono</span><span class="token punctuation">.</span><span class="token function">just</span><span class="token punctuation">(</span>wrap<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> chain<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>exchange<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//放行</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getOrder</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">cloud</span><span class="token punctuation">:</span>    <span class="token key atrule">gateway</span><span class="token punctuation">:</span>      <span class="token key atrule">routes</span><span class="token punctuation">:</span>        <span class="token punctuation">-</span> <span class="token key atrule">id</span><span class="token punctuation">:</span> order_service          <span class="token key atrule">uri</span><span class="token punctuation">:</span> lb<span class="token punctuation">:</span>//cloud<span class="token punctuation">-</span>order          <span class="token key atrule">predicates</span><span class="token punctuation">:</span>           <span class="token punctuation">-</span> Path=/api/order/<span class="token important">**</span>          <span class="token key atrule">filters</span><span class="token punctuation">:</span>           <span class="token punctuation">-</span> RewritePath=/api/order/<span class="token punctuation">?</span>(<span class="token punctuation">?</span>&lt;segment<span class="token punctuation">&gt;</span>.<span class="token important">*)</span><span class="token punctuation">,</span> /order/$\<span class="token punctuation">{</span>segment<span class="token punctuation">}</span>    <span class="token key atrule">nacos</span><span class="token punctuation">:</span>      <span class="token key atrule">discovery</span><span class="token punctuation">:</span>        <span class="token key atrule">server-addr</span><span class="token punctuation">:</span> localhost<span class="token punctuation">:</span><span class="token number">8848</span>        <span class="token key atrule">username</span><span class="token punctuation">:</span> nacos        <span class="token key atrule">password</span><span class="token punctuation">:</span> nacos<span class="token key atrule">server</span><span class="token punctuation">:</span>  <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">80</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="13nginx"><a href="#13nginx" class="headerlink" title="13nginx"></a>13nginx</h2><h3 id="13-1简介"><a href="#13-1简介" class="headerlink" title="13.1简介"></a>13.1简介</h3><p><a href="http://nginx.org/en/">http://nginx.org/en/</a></p><p><em>Nginx</em> (engine x) 是一个高性能的<a href="https://baike.baidu.com/item/HTTP">HTTP</a>和<a href="https://baike.baidu.com/item/%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86/7793488">反向代理</a>web服务器（Nginx采用C进行编写）</p><h3 id="13-2启停"><a href="#13-2启停" class="headerlink" title="13.2启停"></a>13.2启停</h3><p><a href="http://nginx.org/en/docs/windows.html">http://nginx.org/en/docs/windows.html</a></p><h3 id="13-3配置文件"><a href="#13-3配置文件" class="headerlink" title="13.3配置文件"></a>13.3配置文件</h3><p><img src="/../images/JAVA%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E7%AC%94%E8%AE%B0%EF%BC%88%E4%BA%8C%EF%BC%89/nginx%E9%85%8D%E7%BD%AE%E7%BB%93%E6%9E%84.png" alt="nginx配置结构"></p><h3 id="13-4配置域名"><a href="#13-4配置域名" class="headerlink" title="13.4配置域名"></a>13.4配置域名</h3><p>以管理员身份打开cmd</p><pre class="line-numbers language-cmd" data-language="cmd"><code class="language-cmd">notepad drivers/etc/hosts<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-latex" data-language="latex"><code class="language-latex">127.0.0.1       bwf.com127.0.0.1       order.bwf.com127.0.0.1       pay.bwf.com<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="13-5反向代理"><a href="#13-5反向代理" class="headerlink" title="13.5反向代理"></a>13.5反向代理</h3><pre class="line-numbers language-config" data-language="config"><code class="language-config">server {        listen       80;        server_name  bwf.com;        #charset koi8-r;        #access_log  logs/host.access.log  main;        location / {            proxy_pass   http://localhost:8082;        }<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="13-6域名系统"><a href="#13-6域名系统" class="headerlink" title="13.6域名系统"></a>13.6域名系统</h3><p><strong>域名系统</strong>（英文：<strong>D</strong>omain <strong>N</strong>ame <strong>S</strong>ystem，<a href="https://baike.baidu.com/item/%E7%BC%A9%E5%86%99/1948062">缩写</a>：<strong>DNS</strong>）是<a href="https://baike.baidu.com/item/%E4%BA%92%E8%81%94%E7%BD%91/199186">互联网</a>的一项服务。它作为将<a href="https://baike.baidu.com/item/%E5%9F%9F%E5%90%8D/86062">域名</a>和<a href="https://baike.baidu.com/item/IP%E5%9C%B0%E5%9D%80/150859">IP地址</a>相互<a href="https://baike.baidu.com/item/%E6%98%A0%E5%B0%84/20402620">映射</a>的一个<a href="https://baike.baidu.com/item/%E5%88%86%E5%B8%83%E5%BC%8F%E6%95%B0%E6%8D%AE%E5%BA%93/1238109">分布式数据库</a>，能够使人更方便地访问互联网</p><h3 id="13-7负载均衡"><a href="#13-7负载均衡" class="headerlink" title="13.7负载均衡"></a>13.7负载均衡</h3><pre class="line-numbers language-config" data-language="config"><code class="language-config">upstream bwf {       server localhsot:81;       server localhost:82;    }    server {        listen       80;        server_name  bwf.com;        #charset koi8-r;        #access_log  logs/host.access.log  main;        location / {            # proxy_pass   http://localhost:8082;           proxy_set_header Host $host;       proxy_pass   http://bwf;        }<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/../images/JAVA%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E7%AC%94%E8%AE%B0%EF%BC%88%E4%BA%8C%EF%BC%89/image-20220711162739685.png" alt="image-20220711162739685"></p><h3 id="13-8负载均衡算法"><a href="#13-8负载均衡算法" class="headerlink" title="13.8负载均衡算法"></a>13.8负载均衡算法</h3><ol><li><strong>轮询（默认）</strong></li><li><strong>权重（weight）</strong></li><li><strong>ip_hash</strong></li></ol><h3 id="13-9动静分离"><a href="#13-9动静分离" class="headerlink" title="13.9动静分离"></a>13.9动静分离</h3><p><img src="/../images/JAVA%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E7%AC%94%E8%AE%B0%EF%BC%88%E4%BA%8C%EF%BC%89/image-20220712134000248.png" alt="image-20220712134000248"></p><p><strong>添加静态资源，一定clean清理</strong></p><p>bwf.com/api/nginx/test</p><p><img src="/../images/JAVA%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E7%AC%94%E8%AE%B0%EF%BC%88%E4%BA%8C%EF%BC%89/image-20220712140056243.png" alt="image-20220712140056243"></p><p><img src="/../images/JAVA%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E7%AC%94%E8%AE%B0%EF%BC%88%E4%BA%8C%EF%BC%89/image-20220712140617819.png" alt="image-20220712140617819"></p><h2 id="14-Sentinel"><a href="#14-Sentinel" class="headerlink" title="14.Sentinel"></a>14.Sentinel</h2><p><a href="https://github.com/alibaba/Sentinel/wiki/%E4%BB%8B%E7%BB%8D">https://github.com/alibaba/Sentinel/wiki/%E4%BB%8B%E7%BB%8D</a></p><h3 id="14-1简介"><a href="#14-1简介" class="headerlink" title="14.1简介"></a>14.1简介</h3><p><a href="https://github.com/alibaba/Sentinel/wiki/%E4%BB%8B%E7%BB%8D">https://github.com/alibaba/Sentinel/wiki/%E4%BB%8B%E7%BB%8D</a></p><h3 id="14-2配置"><a href="#14-2配置" class="headerlink" title="14.2配置"></a>14.2配置</h3><ol><li>定义资源</li><li>定义规则</li></ol><h3 id="14-3控制台"><a href="#14-3控制台" class="headerlink" title="14.3控制台"></a>14.3控制台</h3><p><a href="https://github.com/alibaba/Sentinel/releases">https://github.com/alibaba/Sentinel/releases</a></p><h4 id="14-3-1启动"><a href="#14-3-1启动" class="headerlink" title="14.3.1启动"></a>14.3.1启动</h4><pre class="line-numbers language-cmd" data-language="cmd"><code class="language-cmd">java -Dserver.port=8089 -Dcsp.sentinel.dashboard.server=localhost:8089 -Dproject.name=sentinel-dashboard -jar sentinel-dashboard-1.8.3.jar<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="14-3-2访问"><a href="#14-3-2访问" class="headerlink" title="14.3.2访问"></a>14.3.2访问</h4><p><a href="http://localhost:8089/">http://localhost:8089/</a> </p><p>默认用户名和密码都是 sentinel</p><h4 id="14-3-3客户端接入控制台"><a href="#14-3-3客户端接入控制台" class="headerlink" title="14.3.3客户端接入控制台"></a>14.3.3客户端接入控制台</h4><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.alibaba.csp<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>sentinel-transport-simple-http<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">cloud</span><span class="token punctuation">:</span>    <span class="token key atrule">sentinel</span><span class="token punctuation">:</span>      <span class="token key atrule">transport</span><span class="token punctuation">:</span>        <span class="token key atrule">dashboard</span><span class="token punctuation">:</span> localhost<span class="token punctuation">:</span><span class="token number">8089</span> <span class="token comment"># Sentinel 控制台地址</span>      <span class="token comment"># 取消Sentinel控制台懒加载</span>      <span class="token comment"># 默认情况下 Sentinel 会在客户端首次调用的时候进行初始化，开始向控制台发送心跳包</span><span class="token comment">#      eager: true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="14-4原理"><a href="#14-4原理" class="headerlink" title="14.4原理"></a>14.4原理</h3><p><img src="/../images/JAVA%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E7%AC%94%E8%AE%B0%EF%BC%88%E4%BA%8C%EF%BC%89/image-20220712145826628.png" alt="image-20220712145826628"></p><h3 id="14-5定义资源"><a href="#14-5定义资源" class="headerlink" title="14.5定义资源"></a>14.5定义资源</h3><h4 id="14-5-1代码"><a href="#14-5-1代码" class="headerlink" title="14.5.1代码"></a>14.5.1代码</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//资源名称</span><span class="token keyword">private</span> <span class="token class-name">String</span> resourceName <span class="token operator">=</span> <span class="token string">"Hello"</span><span class="token punctuation">;</span><span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/test"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">Entry</span> entry <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        entry <span class="token operator">=</span> <span class="token class-name">SphU</span><span class="token punctuation">.</span><span class="token function">entry</span><span class="token punctuation">(</span>resourceName<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">/*您的业务逻辑 - 开始*/</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"hello world"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">/*您的业务逻辑 - 结束*/</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">BlockException</span> e1<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">/*流控逻辑处理 - 开始*/</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"block!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">/*流控逻辑处理 - 结束*/</span>    <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>entry <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            entry<span class="token punctuation">.</span><span class="token function">exit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token string">""</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/initFlowRules"</span><span class="token punctuation">)</span><span class="token keyword">private</span> <span class="token class-name">String</span> <span class="token function">initFlowRules</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">FlowRule</span><span class="token punctuation">&gt;</span></span> rules <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">FlowRule</span> rule <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FlowRule</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    rule<span class="token punctuation">.</span><span class="token function">setResource</span><span class="token punctuation">(</span>resourceName<span class="token punctuation">)</span><span class="token punctuation">;</span>    rule<span class="token punctuation">.</span><span class="token function">setGrade</span><span class="token punctuation">(</span><span class="token class-name">RuleConstant</span><span class="token punctuation">.</span><span class="token constant">FLOW_GRADE_QPS</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// Set limit QPS to 20.</span>    rule<span class="token punctuation">.</span><span class="token function">setCount</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    rules<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>rule<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">FlowRuleManager</span><span class="token punctuation">.</span><span class="token function">loadRules</span><span class="token punctuation">(</span>rules<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token string">"规则初始化完成"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="14-5-1控制台设置规则"><a href="#14-5-1控制台设置规则" class="headerlink" title="14.5.1控制台设置规则"></a>14.5.1控制台设置规则</h4><p><img src="/../images/JAVA%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E7%AC%94%E8%AE%B0%EF%BC%88%E4%BA%8C%EF%BC%89/image-20220712154923923.png" alt="image-20220712154923923"></p><p><strong>全局异常处理</strong></p><h4 id="14-5-1注解设置规则"><a href="#14-5-1注解设置规则" class="headerlink" title="14.5.1注解设置规则"></a>14.5.1注解设置规则</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//注解设置规则</span><span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/test03"</span><span class="token punctuation">)</span><span class="token comment">//    @SentinelResource(value = "test03", blockHandler = "blockHandler")</span><span class="token annotation punctuation">@SentinelResource</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"test03"</span><span class="token punctuation">,</span> fallback <span class="token operator">=</span> <span class="token string">"fallback"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">test03</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token string">"test03"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">fallback</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token string">"系统忙，请稍后再试"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">blockHandler</span><span class="token punctuation">(</span><span class="token class-name">BlockException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token string">"系统忙，请稍后再试"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="14-6动态规则"><a href="#14-6动态规则" class="headerlink" title="14.6动态规则"></a>14.6动态规则</h3><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.alibaba.csp<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>sentinel-transport-simple-http<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.alibaba.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-cloud-starter-alibaba-nacos-discovery<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.alibaba.csp<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>sentinel-datasource-nacos<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">application</span><span class="token punctuation">:</span>    <span class="token key atrule">name</span><span class="token punctuation">:</span> springcloud<span class="token punctuation">-</span>sentinel  <span class="token key atrule">cloud</span><span class="token punctuation">:</span>    <span class="token key atrule">sentinel</span><span class="token punctuation">:</span>      <span class="token key atrule">transport</span><span class="token punctuation">:</span>        <span class="token key atrule">dashboard</span><span class="token punctuation">:</span> localhost<span class="token punctuation">:</span><span class="token number">8089</span> <span class="token comment"># Sentinel 控制台地址</span>      <span class="token comment"># 取消Sentinel控制台懒加载</span>      <span class="token comment"># 默认情况下 Sentinel 会在客户端首次调用的时候进行初始化，开始向控制台发送心跳包</span>      <span class="token key atrule">eager</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>      <span class="token key atrule">datasource</span><span class="token punctuation">:</span>        <span class="token key atrule">ds</span><span class="token punctuation">:</span>          <span class="token key atrule">nacos</span><span class="token punctuation">:</span>            <span class="token key atrule">server-addr</span><span class="token punctuation">:</span> localhost<span class="token punctuation">:</span><span class="token number">8848</span>            <span class="token key atrule">data-id</span><span class="token punctuation">:</span> sentinel<span class="token punctuation">-</span>flow            <span class="token key atrule">group-id</span><span class="token punctuation">:</span> DEFAULT_GROUP            <span class="token key atrule">rule-type</span><span class="token punctuation">:</span> flow            <span class="token key atrule">username</span><span class="token punctuation">:</span> nacos            <span class="token key atrule">password</span><span class="token punctuation">:</span> nacos            <span class="token key atrule">data-type</span><span class="token punctuation">:</span> json<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">DataSourcePropertiesConfiguration</span><span class="token class-name">NacosDataSourceProperties</span><span class="token class-name">AbstractDataSourceProperties</span><span class="token class-name">RuleType</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">[</span>    <span class="token punctuation">{</span>        <span class="token property">"resource"</span><span class="token operator">:</span><span class="token string">"test03"</span><span class="token punctuation">,</span>        <span class="token property">"count"</span><span class="token operator">:</span><span class="token number">2</span><span class="token punctuation">,</span>        <span class="token property">"grade"</span><span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">,</span>        <span class="token property">"limitApp"</span><span class="token operator">:</span><span class="token string">"default"</span><span class="token punctuation">,</span>        <span class="token property">"strategy"</span><span class="token operator">:</span><span class="token number">0</span><span class="token punctuation">,</span>        <span class="token property">"controlBehavior"</span><span class="token operator">:</span><span class="token number">0</span>    <span class="token punctuation">}</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/../images/JAVA%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E7%AC%94%E8%AE%B0%EF%BC%88%E4%BA%8C%EF%BC%89/image-20220713102851563.png" alt="image-20220713102851563"></p><h3 id="14-7熔断降级"><a href="#14-7熔断降级" class="headerlink" title="14.7熔断降级"></a>14.7熔断降级</h3><p>熔断策略</p><ol><li>慢调用比例</li><li>异常比例 </li><li>异常数</li></ol><p><img src="/../images/JAVA%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E7%AC%94%E8%AE%B0%EF%BC%88%E4%BA%8C%EF%BC%89/image-20220713115852013.png" alt="image-20220713115852013"></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/test03"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@SentinelResource</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"test03"</span><span class="token punctuation">,</span> fallback <span class="token operator">=</span> <span class="token string">"fallback"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">test03</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token string">"test03"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="14-8OpenFeign"><a href="#14-8OpenFeign" class="headerlink" title="14.8OpenFeign"></a>14.8OpenFeign</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@FeignClient</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"cloud-pay"</span><span class="token punctuation">,</span> fallback <span class="token operator">=</span> <span class="token class-name">PayFallback</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">PayFeignSentinel</span> <span class="token keyword">extends</span> <span class="token class-name">PayService</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PayFallback</span> <span class="token keyword">implements</span> <span class="token class-name">PayFeignSentinel</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">pay</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"系统异常，请稍后再试"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">feign</span><span class="token punctuation">:</span>  <span class="token key atrule">httpclient</span><span class="token punctuation">:</span>    <span class="token key atrule">connection-timeout</span><span class="token punctuation">:</span> <span class="token number">2000</span>  <span class="token key atrule">sentinel</span><span class="token punctuation">:</span>    <span class="token key atrule">enabled</span><span class="token punctuation">:</span> <span class="token boolean important">true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="15-电商后台系统"><a href="#15-电商后台系统" class="headerlink" title="15.电商后台系统"></a>15.电商后台系统</h2><p>springboot、mybatis、thymeleaf、mysql</p><h2 id="16对象存储"><a href="#16对象存储" class="headerlink" title="16对象存储"></a>16对象存储</h2><p><a href="https://www.aliyun.com/">https://www.aliyun.com/</a></p><ol><li><p>FastDFS是一个开源的轻量级<a href="https://baike.baidu.com/item/%E5%88%86%E5%B8%83%E5%BC%8F%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F/1250388">分布式文件系统</a>，它对文件进行管理，功能包括：文件存储、文件同步、文件访问（文件上传、文件下载）等，解决了大容量存储和<a href="https://baike.baidu.com/item/%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1/932451">负载均衡</a>的问题</p></li><li><p>对象存储OSS</p></li><li><p>对象存储 Kodo</p></li></ol><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.alibaba.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>aliyun-oss-spring-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>commons-fileupload<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>commons-fileupload<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>1.3.3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">alibaba</span><span class="token punctuation">:</span>  <span class="token key atrule">cloud</span><span class="token punctuation">:</span>    <span class="token key atrule">oss</span><span class="token punctuation">:</span>      <span class="token key atrule">endpoint</span><span class="token punctuation">:</span> https<span class="token punctuation">:</span>//oss<span class="token punctuation">-</span>cn<span class="token punctuation">-</span>nanjing.aliyuncs.com    <span class="token key atrule">access-key</span><span class="token punctuation">:</span> LTAI5tJeRJwrKiQYmj6vDbEB    <span class="token key atrule">secret-key</span><span class="token punctuation">:</span> 4UvQY756ArjY88QD8RL42V8LlznaqN<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="17-redis"><a href="#17-redis" class="headerlink" title="17.redis"></a>17.redis</h2><h3 id="17-1简介"><a href="#17-1简介" class="headerlink" title="17.1简介"></a>17.1简介</h3><p><a href="https://redis.io/">https://redis.io/</a></p><p>Redis（Remote Dictionary Server )，即远程字典服务，是一个开源的使用ANSI <a href="https://baike.baidu.com/item/C%E8%AF%AD%E8%A8%80">C语言</a>编写、支持网络、可基于内存亦可持久化的日志型、Key-Value<a href="https://baike.baidu.com/item/%E6%95%B0%E6%8D%AE%E5%BA%93/103728">数据库</a>，并提供多种语言的API</p><p>单线程</p><h3 id="17-2性能"><a href="#17-2性能" class="headerlink" title="17.2性能"></a>17.2性能</h3><p>50个并发执行100000个请求，结果:读的速度是110000次/s,写的速度是81000次/s</p><pre class="line-numbers language-cmd" data-language="cmd"><code class="language-cmd">redis-benchmark.exe -helpredis-benchmark [-h &lt;host&gt;] [-p &lt;port&gt;] [-c &lt;clients&gt;] [-n &lt;requests]&gt; [-k &lt;boolean&gt;]redis-benchmark.exe -h localhost -p 6379 -c 50 -n 1000000<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="17-3配置文件"><a href="#17-3配置文件" class="headerlink" title="17.3配置文件"></a>17.3配置文件</h3><pre class="line-numbers language-cmd" data-language="cmd"><code class="language-cmd">#443设置密码requirepass 123456redis-server.exe redis.windows.confredis-cli.exe -h localhost -p 6379 -a 123456<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="17-4String"><a href="#17-4String" class="headerlink" title="17.4String"></a>17.4String</h3><p>验证码，播放次数，点赞数，转发数，关注数</p><pre class="line-numbers language-cmd" data-language="cmd"><code class="language-cmd">set name zhangsanget nameset spu "{\"spuId\":1,\"spuName\":\"ﾱￊﾼￇﾱﾾ\",\"spuTitle\":\"ﾻﾪￎﾪ\"}"<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="17-5Hash"><a href="#17-5Hash" class="headerlink" title="17.5Hash"></a>17.5Hash</h3><p>结构化数据（对象）</p><pre class="line-numbers language-cmd" data-language="cmd"><code class="language-cmd">#存单个 field valuehset user name zhangsan#取单个 field valuehget user name<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-cmd" data-language="cmd"><code class="language-cmd">#存多个 field valuehmset cart::10 id 1 name phone price 2000 count 1#取多个 field valuehmget cart::10 id name price count#操作 field valuehincrby cart::10 count 2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-cmd" data-language="cmd"><code class="language-cmd">#取所有 fieldhkeys cart::10#取所有 valuehvals cart::10<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="17-6List"><a href="#17-6List" class="headerlink" title="17.6List"></a>17.6List</h3><p>队列</p><pre class="line-numbers language-cmd" data-language="cmd"><code class="language-cmd">#增lpush name:list zhangsan lisi wangwu zhaoliu#查lrange name:list 0 -1lindex name:list 3#数量llen name:list#改lset name:list 3 zhangsansan<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="17-7Set"><a href="#17-7Set" class="headerlink" title="17.7Set"></a>17.7Set</h3><p>无序，不允许重复</p><p>运算</p><pre class="line-numbers language-cmd" data-language="cmd"><code class="language-cmd">#增sadd name:set zhangsan lisi wangwu zhaoliu#查smembers name:set#元素个数scard name:set#抽奖srandmember name:set<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-cmd" data-language="cmd"><code class="language-cmd">sadd vip:1 zhangsan lisi wangwu zhaoliusadd vip:2 zhangsan degang yunpeng yuqian#交集sinter vip:1 vip:2#并集sunion vip:1 vip:2#差集sdiff vip:1 vip:2sdiffstore vip:3 vip:1 vip:2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="17-8ZSet"><a href="#17-8ZSet" class="headerlink" title="17.8ZSet"></a>17.8ZSet</h3><pre class="line-numbers language-cmd" data-language="cmd"><code class="language-cmd">#增zadd cj 98 zhangsan 66 zhaoliu 89 wangwu 72 lisi 100 degang 36 yunpeng#查##分数zscore cj lisi##个数zcard cj##score 值 min 和 max 之间成员个数zcount cj 80 100##返回有序集 key 中成员 member 的排名。其中有序集成员按 score 值递增(从小到大)顺序排列zrange cj 0 2 withscores#返回有序集 key 中，所有 score 值介于 min 和 max 之间的成员zrangebyscore cj 60 100 withscores limit 0 10#排名zrevrank cj zhangsan<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="17-9HyperLogLog"><a href="#17-9HyperLogLog" class="headerlink" title="17.9HyperLogLog"></a>17.9HyperLogLog</h3><p>通过 HyperLogLog 数据结构， 用户可以使用少量固定大小的内存， 来储存集合中的唯一元素 （每个 HyperLogLog 只需使用 12k 字节内存，以及几个字节的内存来储存键本身），可以计算接近2^64个不同元素的基数</p><h3 id="17-10地理位置"><a href="#17-10地理位置" class="headerlink" title="17.10地理位置"></a>17.10地理位置</h3><p><a href="http://www.jsons.cn/lngcode/">http://www.jsons.cn/lngcode/</a></p><pre class="line-numbers language-cmd" data-language="cmd"><code class="language-cmd">#增geoadd city 121.47 31.23 shgeoadd city 118.79 32.04 njgeoadd city 116.40 39.90 bjgeoadd city 113.28 23.12 gzgeoadd city 117.28 31.86 hf#查geopos city nj#返回两个给定位置之间的距离geodist city nj bj km#以给定的经纬度为中心， 返回键包含的位置元素当中， 与中心的距离不超过给定最大距离的所有位置元素georadius city 118.79 32.04 500 km withcoord withdist<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="17-11事务"><a href="#17-11事务" class="headerlink" title="17.11事务"></a>17.11事务</h3><pre class="line-numbers language-cmd" data-language="cmd"><code class="language-cmd">multi #开启事务set k1 v1set k2 v2set k3 v3exec #提交事务multi #开启事务set k4 v4set k5 v5set k6 #命令错误，提交时，整个回滚exec #提交事务multi #开启事务set k4 v4incr k4 #命令添加到队列时，没有错误，当提交执行时有错误，正确的命令成功执行，错误的命令回滚set k5 v5exec #提交事务<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="17-12锁"><a href="#17-12锁" class="headerlink" title="17.12锁"></a>17.12锁</h3><p><a href="https://redis.io/commands/setnx/">https://redis.io/commands/setnx/</a></p><pre class="line-numbers language-cmd" data-language="cmd"><code class="language-cmd">#加锁(过期时间)setnx lock mylock#释放锁del lock#设置超时时间expire name 30<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="17-13持久化"><a href="#17-13持久化" class="headerlink" title="17.13持久化"></a>17.13持久化</h3><h4 id="1-RDB"><a href="#1-RDB" class="headerlink" title="1.RDB"></a>1.RDB</h4><pre class="line-numbers language-conf" data-language="conf"><code class="language-conf">################################ SNAPSHOTTING  ################################## Save the DB on disk:##   save &lt;seconds&gt; &lt;changes&gt;##   Will save the DB if both the given number of seconds and the given#   number of write operations against the DB occurred.##   In the example below the behaviour will be to save:#   after 900 sec (15 min) if at least 1 key changed#   after 300 sec (5 min) if at least 10 keys changed#   after 60 sec if at least 10000 keys changed##   Note: you can disable saving completely by commenting out all "save" lines.##   It is also possible to remove all the previously configured save#   points by adding a save directive with a single empty string argument#   like in the following example:##   save ""save 900 1save 300 10save 60 10000<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>有点：</p><ol><li>节省磁盘空间（RDB 是一个非常紧凑（compact）的文件，它保存了 Redis 在某个时间点上的数据集）</li><li>非常适用于灾难恢复</li></ol><p>缺点：</p><p>可能会丢失好几分钟的数据</p><h4 id="2-AOF"><a href="#2-AOF" class="headerlink" title="2.AOF"></a>2.AOF</h4><p>Append Only File</p><pre class="line-numbers language-conf" data-language="conf"><code class="language-conf">############################## APPEND ONLY MODE ###############################appendonly yes# appendfsync alwaysappendfsync everysec# appendfsync noauto-aof-rewrite-percentage 100auto-aof-rewrite-min-size 64mb<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="17-14淘汰策略"><a href="#17-14淘汰策略" class="headerlink" title="17.14淘汰策略"></a>17.14淘汰策略</h3><pre class="line-numbers language-cmd" data-language="cmd"><code class="language-cmd"># maxmemory &lt;bytes&gt;# MAXMEMORY POLICY: how Redis will select what to remove when maxmemory# is reached. You can select among five behaviors:## volatile-lru -&gt; remove the key with an expire set using an LRU algorithm# allkeys-lru -&gt; remove any key according to the LRU algorithm# volatile-random -&gt; remove a random key with an expire set# allkeys-random -&gt; remove a random key, any key# volatile-ttl -&gt; remove the key with the nearest expire time (minor TTL)# noeviction -&gt; don't expire at all, just return an error on write operations## The default is:## maxmemory-policy noeviction<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="17-15高可用"><a href="#17-15高可用" class="headerlink" title="17.15高可用"></a>17.15高可用</h3><h4 id="1-主从复制"><a href="#1-主从复制" class="headerlink" title="1.主从复制"></a>1.主从复制</h4><pre class="line-numbers language-conf" data-language="conf"><code class="language-conf">################################# REPLICATION ################################## Master-Slave replication. Use slaveof to make a Redis instance a copy of# another Redis server. A few things to understand ASAP about Redis replication.## 1) Redis replication is asynchronous, but you can configure a master to#    stop accepting writes if it appears to be not connected with at least#    a given number of slaves.# 2) Redis slaves are able to perform a partial resynchronization with the#    master if the replication link is lost for a relatively small amount of#    time. You may want to configure the replication backlog size (see the next#    sections of this file) with a sensible value depending on your needs.# 3) Replication is automatic and does not need user intervention. After a#    network partition slaves automatically try to reconnect to masters#    and resynchronize with them.## slaveof &lt;masterip&gt; &lt;masterport&gt;# If the master is password protected (using the "requirepass" configuration# directive below) it is possible to tell the slave to authenticate before# starting the replication synchronization process, otherwise the master will# refuse the slave request.## masterauth &lt;master-password&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-哨兵模式"><a href="#2-哨兵模式" class="headerlink" title="2.哨兵模式"></a>2.哨兵模式</h4><p><img src="/../images/JAVA%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E7%AC%94%E8%AE%B0%EF%BC%88%E4%BA%8C%EF%BC%89/%E5%93%A8%E5%85%B5%E6%A8%A1%E5%BC%8F.webp" alt="哨兵模式"></p><h4 id="3-集群"><a href="#3-集群" class="headerlink" title="3.集群"></a>3.集群</h4><p><img src="/../images/JAVA%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E7%AC%94%E8%AE%B0%EF%BC%88%E4%BA%8C%EF%BC%89/image-20220214160715340.png" alt="image-20220214160715340"></p><h3 id="17-16缓穿透"><a href="#17-16缓穿透" class="headerlink" title="17.16缓穿透"></a>17.16缓穿透</h3><p>高并发，查询某个不存在的key，造成数据压力</p><p>解决：</p><p>1.缓存null值，设置过期时间</p><p>2.布隆过滤器</p><p>3.黑白名单</p><h3 id="17-17击穿"><a href="#17-17击穿" class="headerlink" title="17.17击穿"></a>17.17击穿</h3><p>高并发，查询热点key（过期）</p><p>解决：</p><p>1.加锁</p><p>2.限流</p><h3 id="17-18雪崩"><a href="#17-18雪崩" class="headerlink" title="17.18雪崩"></a>17.18雪崩</h3><p>大量的key设置了相同的过期时间，导致某一时刻同时失效</p><p>解决：</p><p>1.设置不同过期时间</p><p>2.限流</p><h3 id="17-19springboot集成"><a href="#17-19springboot集成" class="headerlink" title="17.19springboot集成"></a>17.19springboot集成</h3><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-data-redis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.apache.commons<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>commons-pool2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>2.11.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/*    RedisAutoConfiguration    redis客户端    1.LettuceConnectionConfiguration    2.JedisConnectionConfiguration*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">redis</span><span class="token punctuation">:</span>    <span class="token key atrule">host</span><span class="token punctuation">:</span> localhost    <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">6379</span>    <span class="token key atrule">password</span><span class="token punctuation">:</span> <span class="token number">123456</span>    <span class="token key atrule">database</span><span class="token punctuation">:</span> <span class="token number">0</span>    <span class="token key atrule">lettuce</span><span class="token punctuation">:</span>      <span class="token key atrule">pool</span><span class="token punctuation">:</span>        <span class="token key atrule">max-active</span><span class="token punctuation">:</span> <span class="token number">10</span> <span class="token comment">#最大连接数</span>        <span class="token key atrule">max-idle</span><span class="token punctuation">:</span> <span class="token number">10</span> <span class="token comment">#最小连接数</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="17-20序列化"><a href="#17-20序列化" class="headerlink" title="17.20序列化"></a>17.20序列化</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>data<span class="token punctuation">.</span>redis<span class="token punctuation">.</span>serializer<span class="token punctuation">.</span></span>RedisSerializer</span><span class="token keyword">static</span> <span class="token class-name">RedisSerializer</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> <span class="token function">java</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Nullable</span> <span class="token class-name">ClassLoader</span> classLoader<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">JdkSerializationRedisSerializer</span><span class="token punctuation">(</span>classLoader<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.alibaba<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>fastjson<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>1.2.78<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="17-21camel"><a href="#17-21camel" class="headerlink" title="17.21camel"></a>17.21camel</h3><p><a href="https://github.com/apache/camel">https://github.com/apache/camel</a></p><p>mysql-&gt;redis</p><h2 id="18-linux"><a href="#18-linux" class="headerlink" title="18.linux"></a>18.linux</h2><h3 id="18-1简介"><a href="#18-1简介" class="headerlink" title="18.1简介"></a>18.1简介</h3><p>免费、开源、可靠、安全、稳定、多平台</p><p><img src="/../images/JAVA%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E7%AC%94%E8%AE%B0%EF%BC%88%E4%BA%8C%EF%BC%89/02Linux%E7%9A%84%E7%89%88%E6%9C%AC-2.png" alt="02Linux的版本-2"></p><h3 id="18-2虚拟机软件"><a href="#18-2虚拟机软件" class="headerlink" title="18.2虚拟机软件"></a>18.2虚拟机软件</h3><p><img src="/../images/JAVA%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E7%AC%94%E8%AE%B0%EF%BC%88%E4%BA%8C%EF%BC%89/image-20220720104415683.png" alt="image-20220720104415683"></p><p><img src="/../images/JAVA%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E7%AC%94%E8%AE%B0%EF%BC%88%E4%BA%8C%EF%BC%89/image-20220720104119618.png" alt="image-20220720104119618"></p><p><img src="/../images/JAVA%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E7%AC%94%E8%AE%B0%EF%BC%88%E4%BA%8C%EF%BC%89/image-20220720104202131.png" alt="image-20220720104202131"></p><h3 id="18-3目录结构"><a href="#18-3目录结构" class="headerlink" title="18.3目录结构"></a>18.3目录结构</h3><p><img src="/../images/JAVA%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E7%AC%94%E8%AE%B0%EF%BC%88%E4%BA%8C%EF%BC%89/image-20220720104912079.png" alt="image-20220720104912079"></p><ul><li><p><strong>/bin</strong>：<br>bin 是 Binaries (二进制文件) 的缩写, 这个目录存放着最经常使用的命令。</p></li><li><p><strong>/home</strong>：<br>用户的主目录，在 Linux 中，每个用户都有一个自己的目录，一般该目录名是以用户的账号命名的</p></li><li><p><strong>/root</strong>：<br>该目录为系统管理员，也称作超级权限者的用户主目录。</p></li></ul><h3 id="18-4终端"><a href="#18-4终端" class="headerlink" title="18.4终端"></a>18.4终端</h3><p>Xshell</p><p>putty</p><p>SecureCRT</p><p>FileZilla</p><p>MobaXterm</p><h3 id="18-5SSH"><a href="#18-5SSH" class="headerlink" title="18.5SSH"></a>18.5SSH</h3><p>SSH 为 [Secure Shell](<a href="https://baike.baidu.com/item/Secure">https://baike.baidu.com/item/Secure</a> Shell) 的缩写</p><h3 id="18-6命令"><a href="#18-6命令" class="headerlink" title="18.6命令"></a>18.6命令</h3><ol><li>IP</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">ip</span> addr<span class="token builtin class-name">cd</span> /etc/sysconfig/network-scripts/<span class="token function">vi</span> ifcfg-ens33<span class="token assign-left variable">TYPE</span><span class="token operator">=</span>Ethernet<span class="token assign-left variable">PROXY_METHOD</span><span class="token operator">=</span>none<span class="token assign-left variable">BROWSER_ONLY</span><span class="token operator">=</span>no<span class="token assign-left variable">BOOTPROTO</span><span class="token operator">=</span>none<span class="token assign-left variable">DEFROUTE</span><span class="token operator">=</span>yes<span class="token assign-left variable">IPV4_FAILURE_FATAL</span><span class="token operator">=</span>no<span class="token assign-left variable">IPV6INIT</span><span class="token operator">=</span>yes<span class="token assign-left variable">IPV6_AUTOCONF</span><span class="token operator">=</span>no<span class="token assign-left variable">IPV6_DEFROUTE</span><span class="token operator">=</span>yes<span class="token assign-left variable">IPV6_FAILURE_FATAL</span><span class="token operator">=</span>no<span class="token assign-left variable">IPV6_ADDR_GEN_MODE</span><span class="token operator">=</span>stable-privacy<span class="token assign-left variable">NAME</span><span class="token operator">=</span>ens33<span class="token assign-left variable">UUID</span><span class="token operator">=</span>114d4a15-4633-4e2c-b50e-6ba10acfdfbe<span class="token assign-left variable">DEVICE</span><span class="token operator">=</span>ens33<span class="token assign-left variable">ONBOOT</span><span class="token operator">=</span>yes<span class="token assign-left variable">IPV6ADDR</span><span class="token operator">=</span><span class="token number">2001</span>:250:250:250:250:250:250:222/64<span class="token assign-left variable">IPV6_DEFAULTGW</span><span class="token operator">=</span><span class="token number">2001</span>:250:250:250::1<span class="token assign-left variable">IPADDR</span><span class="token operator">=</span><span class="token number">192.168</span>.30.132<span class="token assign-left variable">PREFIX</span><span class="token operator">=</span><span class="token number">24</span><span class="token assign-left variable">GATEWAY</span><span class="token operator">=</span><span class="token number">192.168</span>.30.1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li>关闭防火墙</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">systemctl stop firewalld.service<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="3"><li>切换目录</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="4"><li>ls</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">ls</span>ll<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ol start="5"><li>目录</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#创建单级</span><span class="token function">mkdir</span> 目录名<span class="token comment">#创建多级</span><span class="token function">mkdir</span> <span class="token parameter variable">-p</span> 目录名/目录名<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ol start="6"><li>删除一个文件或者目录</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">rm</span> <span class="token parameter variable">-f</span> <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="7"><li>mv 用来为文件或目录改名、或将文件或目录移入其它位置</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">mv</span> t1.txt t2.txt<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="8"><li>cp</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">cp</span> t1.txt t2.txt<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="8"><li>文件</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">touch</span> 文件名<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="9"><li>vi</li></ol><p><img src="/../images/JAVA%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E7%AC%94%E8%AE%B0%EF%BC%88%E4%BA%8C%EF%BC%89/vi.webp" alt="vi"></p><ol start="9"><li>上传下载</li><li>cat</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">cat</span> <span class="token parameter variable">-n</span> 文件名<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="12"><li>more</li><li>less</li><li>输出重定向，追加</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token operator">&gt;</span> 输出重定向（覆盖）<span class="token function">cat</span> redis.windows.conf <span class="token operator">&gt;</span> t1.txt<span class="token operator">&gt;&gt;</span> 追加<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ol start="15"><li>echo 输出内容到控制台</li><li>搜索</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">find</span> <span class="token builtin class-name">.</span> <span class="token parameter variable">-name</span> <span class="token string">"*.c"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="17"><li><p>grep 用于查找文件里符合条件的字符串</p></li><li><p>解压</p></li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">tar</span> <span class="token parameter variable">-xzvf</span> <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="19"><li><p>pwd</p></li><li><p>添加用户</p></li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">useradd</span> <span class="token parameter variable">-g</span> 组名 用户名<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="22"><li>密码</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">passwd</span> 用户名<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="22"><li>切换用户</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">su</span> 用户名<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="23"><li>删除用户</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">userdel</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="24"><li>添加用户组</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">groupadd</span> g1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="25"><li>权限</li></ol><p><img src="/../images/JAVA%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E7%AC%94%E8%AE%B0%EF%BC%88%E4%BA%8C%EF%BC%89/%E6%9D%83%E9%99%90.png" alt="权限"></p><ol start="26"><li>修改权限</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">drwxr-xr-x.  <span class="token number">2</span> root     root            <span class="token number">74</span> Jul <span class="token number">19</span> <span class="token number">23</span>:31 test02<span class="token function">chmod</span> o+w test02<span class="token function">chmod</span> <span class="token number">742</span> lisi.txt<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ol start="27"><li>进程</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">ps</span> <span class="token parameter variable">-aux</span><span class="token function">ps</span> <span class="token parameter variable">-ef</span> <span class="token operator">|</span><span class="token function">grep</span> tomcat<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ol start="28"><li>端口占用</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">lsof</span> <span class="token parameter variable">-i:8080</span><span class="token function">netstat</span> <span class="token parameter variable">-tunlp</span> <span class="token operator">|</span> <span class="token function">grep</span> <span class="token number">8080</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ol start="29"><li>安装</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">rpm<span class="token punctuation">(</span>RedHat Package Manager<span class="token punctuation">)</span> 包管理器yum 基于 RPM 包管理，能够从指定的服务器自动下载 RPM 包并且安装，可以自动处理依赖性关系，并且一次安装所有依赖的软件包，无须繁琐地一次次下载、安装<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#设置yum源</span><span class="token builtin class-name">cd</span> /etc/yum.repos.d<span class="token function">cat</span> CentOS-Base.repo<span class="token function">wget</span> <span class="token parameter variable">-O</span> /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-7.repo<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">yum list<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>30关机&amp;重启</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">shutdown</span> <span class="token parameter variable">-h</span> now<span class="token function">reboot</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="18-7tomcat"><a href="#18-7tomcat" class="headerlink" title="18.7tomcat"></a>18.7tomcat</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">tar</span> <span class="token parameter variable">-zxvf</span> apache-tomcat-9.0.64.tar.gz<span class="token builtin class-name">cd</span> /home/apache-tomcat-9.0.64/bin./startup.sh<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="18-8JDK"><a href="#18-8JDK" class="headerlink" title="18.8JDK"></a>18.8JDK</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">vi</span> /etc/profile<span class="token builtin class-name">export</span> <span class="token assign-left variable">JAVA_HOME</span><span class="token operator">=</span>/home/jdk1.8.0_341<span class="token builtin class-name">export</span> <span class="token assign-left variable"><span class="token environment constant">PATH</span></span><span class="token operator">=</span><span class="token variable">$JAVA_HOME</span>/bin:<span class="token environment constant">$PATH</span><span class="token builtin class-name">source</span> /etc/profile<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="19-容器"><a href="#19-容器" class="headerlink" title="19.容器"></a>19.容器</h2><p><a href="https://www.docker.com/">https://www.docker.com/</a></p><p><a href="https://docs.docker.com/engine/install/centos/">https://docs.docker.com/engine/install/centos/</a></p><h3 id="19-1安装"><a href="#19-1安装" class="headerlink" title="19.1安装"></a>19.1安装</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">yum remove <span class="token function">docker</span> <span class="token punctuation">\</span>                  docker-client <span class="token punctuation">\</span>                  docker-client-latest <span class="token punctuation">\</span>                  docker-common <span class="token punctuation">\</span>                  docker-latest <span class="token punctuation">\</span>                  docker-latest-logrotate <span class="token punctuation">\</span>                  docker-logrotate <span class="token punctuation">\</span>                  docker-engine                 yum <span class="token function">install</span> <span class="token parameter variable">-y</span> yum-utilsyum-config-manager <span class="token punctuation">\</span>    --add-repo <span class="token punctuation">\</span>    https://download.docker.com/linux/centos/docker-ce.repoyum <span class="token function">install</span> docker-ce docker-ce-cli containerd.io docker-compose-pluginyum list docker-ce <span class="token parameter variable">--showduplicates</span> <span class="token operator">|</span> <span class="token function">sort</span> <span class="token parameter variable">-r</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#启动</span>systemctl start <span class="token function">docker</span><span class="token comment">#查看版本</span><span class="token function">docker</span> version<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="19-2原理"><a href="#19-2原理" class="headerlink" title="19.2原理"></a>19.2原理</h3><p><img src="/../images/JAVA%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E7%AC%94%E8%AE%B0%EF%BC%88%E4%BA%8C%EF%BC%89/kkkk.png" alt="kkkk"></p><h3 id="19-3概念"><a href="#19-3概念" class="headerlink" title="19.3概念"></a>19.3概念</h3><p><a href="https://hub.docker.com/">https://hub.docker.com/</a></p><p>镜像（images）</p><p>容器（container）</p><p>仓库（repository）</p><h3 id="19-4命令"><a href="#19-4命令" class="headerlink" title="19.4命令"></a>19.4命令</h3><p><img src="/../images/JAVA%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E7%AC%94%E8%AE%B0%EF%BC%88%E4%BA%8C%EF%BC%89/mmmmmmmmmmmmmmmm.png" alt="mmmmmmmmmmmmmmmm"></p><ol><li>镜像命令</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#搜索</span><span class="token function">docker</span> search <span class="token parameter variable">--help</span><span class="token function">docker</span> search nginx<span class="token comment">#下载</span><span class="token function">docker</span> pull mysql:5.7<span class="token comment">#查看本地镜像</span><span class="token function">docker</span> imagesREPOSITORY   TAG       IMAGE ID       CREATED        SIZEnginx        latest    670dcc86b69d   <span class="token number">32</span> hours ago   142MBmysql        latest    33037edcac9b   <span class="token number">7</span> days ago     444MB<span class="token comment">#删除镜像</span><span class="token function">docker</span> rmi <span class="token parameter variable">-f</span> 镜像ID<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li>容器命令</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">mkdir</span> <span class="token parameter variable">-p</span> /home/mysql/conf<span class="token function">mkdir</span> <span class="token parameter variable">-p</span> /home/mysql/data<span class="token comment">#运行容器</span><span class="token function">docker</span> run <span class="token parameter variable">--name</span> mysql578 <span class="token parameter variable">-d</span> <span class="token parameter variable">-p</span> <span class="token number">3308</span>:3306 <span class="token parameter variable">-v</span> /home/mysql/conf:/etc/mysql/conf.d <span class="token parameter variable">-v</span> /home/mysql/data:/var/lib/mysql <span class="token parameter variable">-e</span> <span class="token assign-left variable">MYSQL_ROOT_PASSWORD</span><span class="token operator">=</span><span class="token number">123456</span> mysql:5.7<span class="token function">docker</span> run <span class="token parameter variable">--name</span> mysql57 <span class="token parameter variable">-d</span> <span class="token parameter variable">-p</span> <span class="token number">3306</span>:3306 <span class="token parameter variable">-e</span> <span class="token assign-left variable">MYSQL_ROOT_PASSWORD</span><span class="token operator">=</span><span class="token number">123456</span> mysql:5.7<span class="token parameter variable">--name</span> 容器名称<span class="token parameter variable">-d</span> 后台方式运行<span class="token parameter variable">-p</span> 主机端口:容器端口<span class="token parameter variable">-v</span> 主机目录:容器内目录 卷挂载<span class="token parameter variable">-e</span> 环境设置<span class="token comment">#查看正在运行的容器</span><span class="token function">docker</span> <span class="token function">ps</span><span class="token comment">#查看正在运行和历史运行过的容器</span><span class="token function">docker</span> <span class="token function">ps</span> <span class="token parameter variable">-a</span><span class="token comment">#停止</span><span class="token function">docker</span> stop 容器ID<span class="token comment">#启动</span><span class="token function">docker</span> start 容器ID<span class="token comment">#重启</span><span class="token function">docker</span> restart 容器ID<span class="token comment">#强制停止</span><span class="token function">docker</span> <span class="token function">kill</span> 容器ID<span class="token comment">#删除容器</span><span class="token function">docker</span> <span class="token function">rm</span> <span class="token parameter variable">-f</span> 容器ID<span class="token comment">#进入容器</span><span class="token function">docker</span> <span class="token builtin class-name">exec</span> <span class="token parameter variable">-it</span> 容器ID /bin/bash<span class="token comment">#退出容器</span><span class="token builtin class-name">exit</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="3"><li>查看日志</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> logs 容器名称<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-cmd" data-language="cmd"><code class="language-cmd">mkdir -p /home/redis/confmkdir -p /home/redis/datadocker run -p 6379:6379 --name redis -v /home/redis/conf/redis.conf:/etc/redis/redis.conf -v /home/redis/data:/data -d redis redis-server /etc/redis/redis.conf <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="20-搜索引擎"><a href="#20-搜索引擎" class="headerlink" title="20.搜索引擎"></a>20.搜索引擎</h2><h3 id="20-1简介"><a href="#20-1简介" class="headerlink" title="20.1简介"></a>20.1简介</h3><p>Elasticsearch是一个基于<a href="https://baike.baidu.com/item/Lucene/6753302">Lucene</a>的搜索服务器。它提供了一个分布式多用户能力的<a href="https://baike.baidu.com/item/%E5%85%A8%E6%96%87%E6%90%9C%E7%B4%A2%E5%BC%95%E6%93%8E/7847410">全文搜索引擎</a>，基于RESTful web接口。Elasticsearch是用Java语言开发的，并作为Apache许可条款下的开放源码发布，是一种流行的企业级搜索引擎</p><h3 id="20-2安装"><a href="#20-2安装" class="headerlink" title="20.2安装"></a>20.2安装</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">mkdir</span> <span class="token parameter variable">-p</span> /home/elasticsearch/config<span class="token function">mkdir</span> <span class="token parameter variable">-p</span> /home/elasticsearch/data<span class="token function">mkdir</span> <span class="token parameter variable">-p</span> /home/elasticsearch/plugins<span class="token function">docker</span> run <span class="token parameter variable">-d</span> <span class="token parameter variable">--name</span> elasticsearch <span class="token parameter variable">-p</span> <span class="token number">9200</span>:9200 <span class="token parameter variable">-p</span> <span class="token number">9300</span>:9300 <span class="token parameter variable">-e</span> <span class="token string">"discovery.type=single-node"</span> <span class="token parameter variable">-e</span> <span class="token assign-left variable">ES_JAVA_OPTS</span><span class="token operator">=</span><span class="token string">"-Xms1g -Xmx1g"</span> <span class="token parameter variable">-v</span> /home/elasticsearch/config:/usr/share/elasticsearch/config <span class="token parameter variable">-v</span> /home/elasticsearch/data:/usr/share/elasticsearch/data <span class="token parameter variable">-v</span> /home/elasticsearch/plugins:/usr/share/elasticsearch/plugins elasticsearch:7.17.5<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> run <span class="token parameter variable">-d</span> <span class="token parameter variable">--name</span> elasticsearch <span class="token parameter variable">-p</span> <span class="token number">9200</span>:9200 <span class="token parameter variable">-p</span> <span class="token number">9300</span>:9300 <span class="token parameter variable">-e</span> <span class="token string">"discovery.type=single-node"</span> <span class="token parameter variable">-e</span> <span class="token assign-left variable">ES_JAVA_OPTS</span><span class="token operator">=</span><span class="token string">"-Xms1g -Xmx1g"</span> <span class="token parameter variable">-v</span> /home/elasticsearch/plugins:/usr/share/elasticsearch/plugins elasticsearch:7.17.5<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> run <span class="token parameter variable">-d</span> <span class="token parameter variable">--name</span> kibana <span class="token parameter variable">-p</span> <span class="token number">5601</span>:5601 <span class="token parameter variable">-e</span> <span class="token assign-left variable">ELASTICSEARCH_HOSTS</span><span class="token operator">=</span>http://192.168.30.137:9200 kibana:7.17.5<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">vi</span> /etc/sysctl.conf<span class="token comment">#配置转发</span><span class="token assign-left variable">net.ipv4.ip_forward</span><span class="token operator">=</span><span class="token number">1</span><span class="token comment">#重启网络服务</span>systemctl restart network<span class="token comment">#验证配置,如果返回 net.ipv4.ip_forward = 1 则表示成功</span><span class="token function">sysctl</span> net.ipv4.ip_forward<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="20-3访问"><a href="#20-3访问" class="headerlink" title="20.3访问"></a>20.3访问</h3><p><a href="http://192.168.30.137:9200/">http://192.168.30.137:9200/</a></p><p><a href="http://192.168.30.137:5601/">http://192.168.30.137:5601/</a></p><h3 id="20-4名词"><a href="#20-4名词" class="headerlink" title="20.4名词"></a>20.4名词</h3><p><a href="https://www.elastic.co/guide/en/elastic-stack-glossary/current/terms.html">https://www.elastic.co/guide/en/elastic-stack-glossary/current/terms.html</a></p><p><strong>index（索引）</strong></p><p>Collection of JSON <a href="https://www.elastic.co/guide/en/elastic-stack-glossary/current/terms.html#glossary-document">documents</a></p><p><strong>type（类型）</strong></p><p>document（文档）</p><p>JSON object containing data stored in Elasticsearch</p><p><strong>ID</strong></p><p>Identifier for a <a href="https://www.elastic.co/guide/en/elastic-stack-glossary/current/terms.html#glossary-document">document</a></p><h3 id="20-5操作"><a href="#20-5操作" class="headerlink" title="20.5操作"></a>20.5操作</h3><p><a href="https://www.elastic.co/guide/en/kibana/6.7/tutorial-load-dataset.html">https://www.elastic.co/guide/en/kibana/6.7/tutorial-load-dataset.html</a></p><p><a href="https://www.elastic.co/guide/en/elasticsearch/reference/7.17/index.html">https://www.elastic.co/guide/en/elasticsearch/reference/7.17/index.html</a></p><pre class="line-numbers language-json" data-language="json"><code class="language-json">#Dynamic field mapping##增 put index/type/idPUT my-index<span class="token number">-000001</span>/_doc/<span class="token number">1</span><span class="token punctuation">{</span>  <span class="token property">"create_date"</span><span class="token operator">:</span> <span class="token string">"2015/09/02"</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-json" data-language="json"><code class="language-json">##查看 field mappingGET my-index<span class="token number">-000001</span>/_mapping<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-json" data-language="json"><code class="language-json">#创建索引PUT /my-index#删除索引DELETE /my-index#自定义mappingPUT /my-index<span class="token punctuation">{</span>  <span class="token property">"mappings"</span> <span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"properties"</span> <span class="token operator">:</span> <span class="token punctuation">{</span>      <span class="token property">"create_date"</span> <span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token property">"type"</span> <span class="token operator">:</span> <span class="token string">"date"</span><span class="token punctuation">,</span>        <span class="token property">"format"</span> <span class="token operator">:</span> <span class="token string">"yyyy/MM/dd HH:mm:ss||yyyy/MM/dd||epoch_millis"</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token property">"name"</span> <span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token property">"type"</span> <span class="token operator">:</span> <span class="token string">"text"</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token property">"age"</span> <span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"integer"</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span>#查看 field mappingGET my-index/_mapping#根据ID查询GET my-index/_doc/<span class="token number">1</span>#全文检索GET my-index/_search<span class="token punctuation">{</span>  <span class="token property">"took"</span> <span class="token operator">:</span> <span class="token number">227</span><span class="token punctuation">,</span> #耗时（秒）  <span class="token property">"timed_out"</span> <span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> #是否超时  <span class="token property">"_shards"</span> <span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"total"</span> <span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>    <span class="token property">"successful"</span> <span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>    <span class="token property">"skipped"</span> <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>    <span class="token property">"failed"</span> <span class="token operator">:</span> <span class="token number">0</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token property">"hits"</span> <span class="token operator">:</span> <span class="token punctuation">{</span> #命中<span class="token number">3</span>条    <span class="token property">"total"</span> <span class="token operator">:</span> <span class="token punctuation">{</span>      <span class="token property">"value"</span> <span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">,</span>      <span class="token property">"relation"</span> <span class="token operator">:</span> <span class="token string">"eq"</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token property">"max_score"</span> <span class="token operator">:</span> <span class="token number">1.0</span><span class="token punctuation">,</span>    <span class="token property">"hits"</span> <span class="token operator">:</span> <span class="token punctuation">[</span> <span class="token comment">//json数组</span>      <span class="token punctuation">{</span>        <span class="token property">"_index"</span> <span class="token operator">:</span> <span class="token string">"my-index"</span><span class="token punctuation">,</span>        <span class="token property">"_type"</span> <span class="token operator">:</span> <span class="token string">"_doc"</span><span class="token punctuation">,</span>        <span class="token property">"_id"</span> <span class="token operator">:</span> <span class="token string">"1"</span><span class="token punctuation">,</span>        <span class="token property">"_score"</span> <span class="token operator">:</span> <span class="token number">1.0</span><span class="token punctuation">,</span>        <span class="token property">"_source"</span> <span class="token operator">:</span> <span class="token punctuation">{</span>          <span class="token property">"name"</span> <span class="token operator">:</span> <span class="token string">"lisi"</span><span class="token punctuation">,</span>          <span class="token property">"age"</span> <span class="token operator">:</span> <span class="token number">30</span><span class="token punctuation">,</span>          <span class="token property">"create_date"</span> <span class="token operator">:</span> <span class="token string">"2022/08/22"</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token punctuation">{</span>        <span class="token property">"_index"</span> <span class="token operator">:</span> <span class="token string">"my-index"</span><span class="token punctuation">,</span>        <span class="token property">"_type"</span> <span class="token operator">:</span> <span class="token string">"_doc"</span><span class="token punctuation">,</span>        <span class="token property">"_id"</span> <span class="token operator">:</span> <span class="token string">"2"</span><span class="token punctuation">,</span>        <span class="token property">"_score"</span> <span class="token operator">:</span> <span class="token number">1.0</span><span class="token punctuation">,</span>        <span class="token property">"_source"</span> <span class="token operator">:</span> <span class="token punctuation">{</span>          <span class="token property">"name"</span> <span class="token operator">:</span> <span class="token string">"zhangsan"</span><span class="token punctuation">,</span>          <span class="token property">"age"</span> <span class="token operator">:</span> <span class="token number">20</span><span class="token punctuation">,</span>          <span class="token property">"create_date"</span> <span class="token operator">:</span> <span class="token string">"2022/07/22"</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token punctuation">{</span>        <span class="token property">"_index"</span> <span class="token operator">:</span> <span class="token string">"my-index"</span><span class="token punctuation">,</span>        <span class="token property">"_type"</span> <span class="token operator">:</span> <span class="token string">"_doc"</span><span class="token punctuation">,</span>        <span class="token property">"_id"</span> <span class="token operator">:</span> <span class="token string">"3"</span><span class="token punctuation">,</span>        <span class="token property">"_score"</span> <span class="token operator">:</span> <span class="token number">1.0</span><span class="token punctuation">,</span>        <span class="token property">"_source"</span> <span class="token operator">:</span> <span class="token punctuation">{</span>          <span class="token property">"name"</span> <span class="token operator">:</span> <span class="token string">"wangwu"</span><span class="token punctuation">,</span>          <span class="token property">"age"</span> <span class="token operator">:</span> <span class="token number">50</span><span class="token punctuation">,</span>          <span class="token property">"create_date"</span> <span class="token operator">:</span> <span class="token string">"2022/09/22"</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span>    <span class="token punctuation">]</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span>#条件查询（全文）GET my-index/_search<span class="token punctuation">{</span>    <span class="token property">"query"</span><span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token property">"match_all"</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>GET my-index/_search<span class="token punctuation">{</span>    <span class="token property">"query"</span><span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token property">"match"</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token property">"name"</span><span class="token operator">:</span><span class="token string">"zhangsan"</span><span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>#批量插入POST /account/_bulk<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="20-6-match"><a href="#20-6-match" class="headerlink" title="20.6 match"></a>20.6 match</h3><pre class="line-numbers language-json" data-language="json"><code class="language-json">GET account/_search<span class="token punctuation">{</span>  <span class="token property">"query"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"match"</span><span class="token operator">:</span> <span class="token punctuation">{</span>      <span class="token property">"address"</span><span class="token operator">:</span> <span class="token string">"671 Bristol Street"</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span>GET account/_search<span class="token punctuation">{</span>  <span class="token property">"query"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"match"</span><span class="token operator">:</span> <span class="token punctuation">{</span>      <span class="token property">"address.keyword"</span><span class="token operator">:</span> <span class="token string">"671 Bristol Street"</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span>GET account/_search<span class="token punctuation">{</span>  <span class="token property">"query"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"match"</span><span class="token operator">:</span> <span class="token punctuation">{</span>      <span class="token property">"address"</span><span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token property">"query"</span><span class="token operator">:</span> <span class="token string">"671 Bristol Street"</span><span class="token punctuation">,</span>        <span class="token property">"operator"</span><span class="token operator">:</span> <span class="token string">"and"</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="20-7match-all"><a href="#20-7match-all" class="headerlink" title="20.7match_all"></a>20.7match_all</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">GET account/_search<span class="token punctuation">{</span>  <span class="token string">"query"</span><span class="token builtin class-name">:</span> <span class="token punctuation">{</span>    <span class="token string">"match_all"</span><span class="token builtin class-name">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="20-8match-phrase"><a href="#20-8match-phrase" class="headerlink" title="20.8match_phrase"></a>20.8match_phrase</h3><pre class="line-numbers language-json" data-language="json"><code class="language-json">#短语查询GET account/_search<span class="token punctuation">{</span>  <span class="token property">"query"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"match_phrase"</span><span class="token operator">:</span> <span class="token punctuation">{</span>      <span class="token property">"address"</span><span class="token operator">:</span> <span class="token string">"Street"</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="20-9multi-match"><a href="#20-9multi-match" class="headerlink" title="20.9multi_match"></a>20.9multi_match</h3><pre class="line-numbers language-json" data-language="json"><code class="language-json">#多字段匹配GET account/_search<span class="token punctuation">{</span>  <span class="token property">"query"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"multi_match"</span><span class="token operator">:</span> <span class="token punctuation">{</span>      <span class="token property">"query"</span><span class="token operator">:</span> <span class="token string">"Bristol Street Nanette"</span><span class="token punctuation">,</span>      <span class="token property">"fields"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"address"</span><span class="token punctuation">,</span><span class="token string">"firstname"</span><span class="token punctuation">]</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="20-10分词"><a href="#20-10分词" class="headerlink" title="20.10分词"></a>20.10分词</h3><p><a href="https://github.com/medcl/elasticsearch-analysis-ik/releases/tag/v7.17.5">https://github.com/medcl/elasticsearch-analysis-ik/releases/tag/v7.17.5</a></p><pre class="line-numbers language-json" data-language="json"><code class="language-json">POST _analyze<span class="token punctuation">{</span>  <span class="token property">"analyzer"</span><span class="token operator">:</span> <span class="token string">"ik_smart"</span><span class="token punctuation">,</span>  <span class="token property">"text"</span><span class="token operator">:</span> <span class="token string">"博为峰培训"</span><span class="token punctuation">}</span>POST _analyze<span class="token punctuation">{</span>  <span class="token property">"analyzer"</span><span class="token operator">:</span> <span class="token string">"ik_max_word"</span><span class="token punctuation">,</span>  <span class="token property">"text"</span><span class="token operator">:</span> <span class="token string">"博为峰培训"</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="20-11聚合"><a href="#20-11聚合" class="headerlink" title="20.11聚合"></a>20.11聚合</h3><pre class="line-numbers language-json" data-language="json"><code class="language-json">#聚合GET account/_search<span class="token punctuation">{</span>  <span class="token property">"query"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"match"</span><span class="token operator">:</span> <span class="token punctuation">{</span>      <span class="token property">"address"</span><span class="token operator">:</span> <span class="token string">"Bristol Street"</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token property">"aggs"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"ageCount"</span><span class="token operator">:</span> <span class="token punctuation">{</span>      <span class="token property">"terms"</span><span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token property">"field"</span><span class="token operator">:</span> <span class="token string">"age"</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token property">"ageAvg"</span><span class="token operator">:</span><span class="token punctuation">{</span>      <span class="token property">"avg"</span><span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token property">"field"</span><span class="token operator">:</span> <span class="token string">"age"</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token property">"balanceSum"</span><span class="token operator">:</span><span class="token punctuation">{</span>      <span class="token property">"sum"</span><span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token property">"field"</span><span class="token operator">:</span> <span class="token string">"balance"</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token punctuation">}</span>#聚合GET account/_search<span class="token punctuation">{</span>  <span class="token property">"query"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"match"</span><span class="token operator">:</span> <span class="token punctuation">{</span>      <span class="token property">"address"</span><span class="token operator">:</span> <span class="token string">"Bristol Street"</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token property">"aggs"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"ageCount"</span><span class="token operator">:</span> <span class="token punctuation">{</span>      <span class="token property">"terms"</span><span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token property">"field"</span><span class="token operator">:</span> <span class="token string">"age"</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token property">"aggs"</span><span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token property">"balanceSum"</span><span class="token operator">:</span> <span class="token punctuation">{</span>          <span class="token property">"sum"</span><span class="token operator">:</span> <span class="token punctuation">{</span>            <span class="token property">"field"</span><span class="token operator">:</span> <span class="token string">"balance"</span>          <span class="token punctuation">}</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="20-12springboot集成es"><a href="#20-12springboot集成es" class="headerlink" title="20.12springboot集成es"></a>20.12springboot集成es</h3><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-data-elasticsearch<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="21MQ"><a href="#21MQ" class="headerlink" title="21MQ"></a>21MQ</h2><h3 id="21-1简介"><a href="#21-1简介" class="headerlink" title="21.1简介"></a>21.1简介</h3><p>MQ（Message Queue）<a href="https://baike.baidu.com/item/%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97/4751675">消息队列</a>，是基础数据结构中“先进先出”的一种数据结构。一般用来解决应用解耦，异步消息，流量削峰等问题，实现高性能，高可用，可伸缩和最终一致性架构</p><p><img src="/../images/JAVA%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E7%AC%94%E8%AE%B0%EF%BC%88%E4%BA%8C%EF%BC%89/mq.webp" alt="mq"></p><p><img src="/../images/JAVA%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E7%AC%94%E8%AE%B0%EF%BC%88%E4%BA%8C%EF%BC%89/image-20220222090334461.png" alt="image-20220222090334461"></p><h3 id="21-2产品"><a href="#21-2产品" class="headerlink" title="21.2产品"></a>21.2产品</h3><p><img src="/../images/JAVA%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E7%AC%94%E8%AE%B0%EF%BC%88%E4%BA%8C%EF%BC%89/5d3d9ddf0001a33a09742697.jpg" alt="5d3d9ddf0001a33a09742697"></p><h3 id="21-3RocketMQ"><a href="#21-3RocketMQ" class="headerlink" title="21.3RocketMQ"></a>21.3RocketMQ</h3><p><a href="https://rocketmq.apache.org/">https://rocketmq.apache.org/</a></p><p><img src="/../images/JAVA%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E7%AC%94%E8%AE%B0%EF%BC%88%E4%BA%8C%EF%BC%89/mq%E5%8E%86%E5%8F%B2.png" alt="mq历史"></p><h3 id="21-4概念"><a href="#21-4概念" class="headerlink" title="21.4概念"></a>21.4概念</h3><p>消息生产者（Producer）</p><p>代理服务器（Broker Server）</p><p>消息消费者（Consumer）</p><p>主题（Topic）</p><p>消息（Message）</p><h3 id="21-5环境"><a href="#21-5环境" class="headerlink" title="21.5环境"></a>21.5环境</h3><p><img src="/../images/JAVA%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E7%AC%94%E8%AE%B0%EF%BC%88%E4%BA%8C%EF%BC%89/jqqqq.png" alt="jqqqq"></p><h3 id="21-6启动"><a href="#21-6启动" class="headerlink" title="21.6启动"></a>21.6启动</h3><p><a href="https://github.com/apache/rocketmq/tree/master">https://github.com/apache/rocketmq/tree/master</a></p><pre class="line-numbers language-cmd" data-language="cmd"><code class="language-cmd">#启动 Name Serverstart mqnamesrv#启动 Brokerstart mqbroker.cmd --helpstart mqbroker.cmd -n localhost:9876 autoCreateTopicEnable=true<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="21-7控制台"><a href="#21-7控制台" class="headerlink" title="21.7控制台"></a>21.7控制台</h3><p><a href="https://github.com/apache/rocketmq-externals">https://github.com/apache/rocketmq-externals</a></p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> 系统笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>更新v0.91</title>
      <link href="/2023/01/30/geng-xin-v0.91/"/>
      <url>/2023/01/30/geng-xin-v0.91/</url>
      
        <content type="html"><![CDATA[<h2 id="更新内容"><a href="#更新内容" class="headerlink" title="更新内容"></a>更新内容</h2><p>文章插入图片</p><p>logo设计更改</p><p>主题色设计更改</p><p>菜单栏优化</p><p>优化文章模板</p>]]></content>
      
      
      
        <tags>
            
            <tag> 日志 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JAVA基础知识笔记（一）</title>
      <link href="/2023/01/30/java-ji-chu-zhi-shi-bi-ji-yi/"/>
      <url>/2023/01/30/java-ji-chu-zhi-shi-bi-ji-yi/</url>
      
        <content type="html"><![CDATA[<h2 id="1-简介"><a href="#1-简介" class="headerlink" title="1. 简介"></a>1. 简介</h2><p><img src="/../images/JAVA%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%80%EF%BC%89/image-20220504093541040.png" alt="image-20220504093541040"></p><p><img src="/../images/JAVA%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%80%EF%BC%89/image-20220504093601068.png" alt="image-20220504093601068"></p><h2 id="2-环境配置"><a href="#2-环境配置" class="headerlink" title="2. 环境配置"></a>2. 环境配置</h2><p><a href="https://www.oracle.com/java/technologies/downloads/#java11-windows">https://www.oracle.com/java/technologies/downloads/#java11-windows</a></p><pre class="line-numbers language-cmd" data-language="cmd"><code class="language-cmd">java -versionjava version "1.8.0_311"Java(TM) SE Runtime Environment (build 1.8.0_311-b11)Java HotSpot(TM) 64-Bit Server VM (build 25.311-b11, mixed mode)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-1-path"><a href="#2-1-path" class="headerlink" title="2.1 path"></a>2.1 path</h3><p>指定命令搜索路径</p><pre class="line-numbers language-cmd" data-language="cmd"><code class="language-cmd">C:\Java\jdk1.8.0_141\bin<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>2.2 JAVA_HOME</p><p>指定JDK安装目录</p><pre class="line-numbers language-cmd" data-language="cmd"><code class="language-cmd">C:\Java\jdk1.8.0_141<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="2-3-CLASSPATH"><a href="#2-3-CLASSPATH" class="headerlink" title="2.3 CLASSPATH"></a>2.3 CLASSPATH</h3><p>指定类搜索路径</p><pre class="line-numbers language-cmd" data-language="cmd"><code class="language-cmd">.;%JAVA_HOME%\lib\dt.jar;%JAVA_HOME%\lib\tools.jar<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="3-JDK"><a href="#3-JDK" class="headerlink" title="3. JDK"></a>3. JDK</h2><p><img src="/../images/JAVA%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%80%EF%BC%89/image-20210705112617940.png" alt="image-20210705112617940"></p><ul><li><p><strong>JDK</strong>（Java Development Kit）开发工具包</p></li><li><p><strong>JRE</strong>（Java Running Environment） 运行时环境</p></li><li><p><strong>JVM</strong>（Java Virtual Machine）Java虚拟机，跨平台（跨操作系统）</p></li></ul><h2 id="4-虚拟机"><a href="#4-虚拟机" class="headerlink" title="4. 虚拟机"></a>4. 虚拟机</h2><p>虚拟机（Virtual Machine）就是一台虚拟的计算机（软件）</p><p>系统虚拟机软件：VisualBox，VMware</p><p>程序虚拟机：HotSpot，JRockit，J9(IBM)</p><h2 id="5-JVM"><a href="#5-JVM" class="headerlink" title="5. JVM"></a>5. JVM</h2><p><img src="/../images/JAVA%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%80%EF%BC%89/image-20220504103601575.png" alt="image-20220504103601575"></p><p><img src="/../images/JAVA%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%80%EF%BC%89/JVM%E8%B7%A8%E8%AF%AD%E8%A8%80.webp" alt="JVM跨语言"></p><h2 id="6-Java-Platform"><a href="#6-Java-Platform" class="headerlink" title="6. Java Platform"></a>6. Java Platform</h2><p>JAVA SE (标准版)  java语言核心</p><p>JAVA EE（企业版）</p><p>JAVA ME（微型版）</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> hello <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"hello world"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/../images/JAVA%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%80%EF%BC%89/image-20210705112711709.png" alt="image-20210705112711709"></p><pre class="line-numbers language-cmd" data-language="cmd"><code class="language-cmd">#编译,生成字节码文件（.class）javac xxx.java#运行java xxx<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/../images/JAVA%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%80%EF%BC%89/%E9%AB%98%E7%BA%A7%E8%AF%AD%E8%A8%80.png" alt="高级语言"></p><h2 id="7-IDEA"><a href="#7-IDEA" class="headerlink" title="7. IDEA"></a>7. IDEA</h2><p>集成化开发工具</p><p>项目：project</p><p>模块：module</p><h2 id="8-Git"><a href="#8-Git" class="headerlink" title="8. Git"></a>8. Git</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#增加一个新的远程仓库，并命名</span><span class="token function">git</span> remote <span class="token function">add</span> java22 https://gitee.com/boweifeng/java22.git<span class="token comment">#显示所有远程仓库</span><span class="token function">git</span> remote <span class="token parameter variable">-v</span><span class="token comment"># 强行推送当前分支到远程仓库，即使有冲突</span><span class="token function">git</span> push java22 <span class="token parameter variable">--force</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="9-基础语法"><a href="#9-基础语法" class="headerlink" title="9. 基础语法"></a>9. 基础语法</h2><h3 id="9-1-注释"><a href="#9-1-注释" class="headerlink" title="9.1 注释"></a>9.1 注释</h3><ul><li>单行注释 //  ctrl + /</li><li>多行注释 /<strong>/</strong></li><li>文档注释 /** */</li></ul><p><strong>作用</strong></p><ul><li>调试代码</li><li>注解释义</li></ul><p>Shift(两次)</p><p><img src="/../images/JAVA%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%80%EF%BC%89/image-20220505133941265.png" alt="image-20220505133941265"></p><p><img src="/../images/JAVA%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%80%EF%BC%89/image-20220505134009777.png" alt="image-20220505134009777"></p><p><img src="/../images/JAVA%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%80%EF%BC%89/image-20220505135935259.png" alt="image-20220505135935259"></p><h3 id="9-2-关键字"><a href="#9-2-关键字" class="headerlink" title="9.2 关键字"></a>9.2 关键字</h3><p><img src="/../images/JAVA%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%80%EF%BC%89/%E5%85%B3%E9%94%AE%E5%AD%97.png" alt="关键字"></p><h3 id="9-3-变量"><a href="#9-3-变量" class="headerlink" title="9.3 变量"></a>9.3 变量</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/*  强类型语言  语法:  数据类型 变量名 = 值;*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="9-4-数据类型"><a href="#9-4-数据类型" class="headerlink" title="9.4 数据类型"></a>9.4 数据类型</h3><p><img src="/../images/JAVA%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%80%EF%BC%89/image-20211124123512706.png" alt="image-20211124123512706"></p><p><img src="/../images/JAVA%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%80%EF%BC%89/%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B-1651730569174.png" alt="数据类型"></p><h3 id="9-5-类型转换"><a href="#9-5-类型转换" class="headerlink" title="9.5 类型转换"></a>9.5 类型转换</h3><p><img src="/../images/JAVA%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%80%EF%BC%89/%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2.png" alt="类型转换"></p><p><img src="/../images/JAVA%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%80%EF%BC%89/image-20220505170105575.png" alt="image-20220505170105575"></p><h3 id="9-6-运算符"><a href="#9-6-运算符" class="headerlink" title="9.6 运算符"></a>9.6 运算符</h3><ol><li>算术</li><li>赋值</li><li>比较</li><li>逻辑</li><li>位运算</li><li>三目</li></ol><h3 id="9-7-语句"><a href="#9-7-语句" class="headerlink" title="9.7 语句"></a>9.7 语句</h3><ol><li>判断 <ul><li>if</li><li>if…else</li><li>if…else if</li></ul></li><li>选择<ul><li>switch</li></ul></li><li>循环<ul><li>for</li><li>while</li><li>do…while</li><li>break</li><li>continue</li></ul></li></ol><h3 id="9-8-方法"><a href="#9-8-方法" class="headerlink" title="9.8 方法"></a>9.8 方法</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java">权限修饰符 返回值类型 方法名<span class="token punctuation">(</span>形参类型 形参名<span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  语句<span class="token punctuation">;</span>  <span class="token keyword">return</span> 返回值<span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token number">1.</span>当方法没有返回值时，返回类型用<span class="token keyword">void</span>关键字<span class="token number">2.</span>方法重载<span class="token number">3.</span>可变参数<span class="token number">4.</span>参数传递<span class="token punctuation">(</span>值，址<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="10-快捷键"><a href="#10-快捷键" class="headerlink" title="10. 快捷键"></a>10. 快捷键</h2><ol><li>ctrl + y 删除一整行</li><li>ctrl + d 复制一行</li><li>ctrl + alt + l 格式化</li><li>ctrl + alt + v 自动生成变量名</li><li>alt + insert 生成构造方法，</li><li>alt + enter 自动实现抽象方法</li><li>ctrl + shift + u 大小写</li><li>ctrl + alt + m 生成方法</li><li>ctrl + alt + t 生成try</li></ol><h2 id="11-面向对象"><a href="#11-面向对象" class="headerlink" title="11. 面向对象"></a>11. 面向对象</h2><h3 id="11-1-类，对象"><a href="#11-1-类，对象" class="headerlink" title="11.1 类，对象"></a>11.1 类，对象</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/*  描述：类  1.属性（数据）  2.行为（功能）    类定义：  权限修饰符 class 类名 {    成员变量（属性）;    成员方法（行为）;  }    成员方法（一般方法，构造方法）    类名首字母大写    创建对象: new 类名()    对象：实体，容器，自定义类型（对基本数据类型的扩展）    成员变量和局部变量的区别：  1.成员变量定义在类中，作用范围是整个类    局部变量定义在方法中，语句中，局部代码块中，作用范围是所属区域  2.成员变量在堆内存的对象中，随着对象的创建而存在，随着对象的销毁而销毁，有默认值    局部变量在栈内存的方法中，随着所属区域的执行而存在，随着所属区域的完成而销毁，没有默认值*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="11-2-包"><a href="#11-2-包" class="headerlink" title="11.2 包"></a>11.2 包</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/*  包:package  管理类文件  命名：域名，com.bwf.xxx  类有了包之后，再使用时，要写全路径名（包名.包名...类名）  import*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="11-3-构造方法"><a href="#11-3-构造方法" class="headerlink" title="11.3 构造方法"></a>11.3 构造方法</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/*      构造方法：构建对象时调用的方法，初始化对象      1.方法名就是类名      2.没有返回类型            有return      java中，每个类至少有一个构造方法，为了保证这一点，如果用户没有显示定义任何构造方法，      JVM将自动提供一个隐含的默认构造方法      如果类中显示定义了一个或多个构造方法，那么默认构造方法就没有了      this：代表当前对象（创建对象时，哪个对象调用了this所在的构造方法，this就代表那个对象）      构造方法和一般方法区别：      1.构造方法：对象创建时，被调用一次，初始化对象      2.一般方法：对象创建后，可被调用多次，提供功能     */</span>     <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="11-4-继承"><a href="#11-4-继承" class="headerlink" title="11.4 继承"></a>11.4 继承</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/*  类和类之间产生关系(父子)  子类 extends 父类  1.继承成员变量（包括private，但不能用）  2.当new子类对象时，一定会先调用父类的构造方法，对父类中的成员变量进行初始化，再调子类的构造方法，对子       类中的成员变量初始化  3.在构造方法的第一行有一条隐士的语句super()*/</span><span class="token comment">/*  重载(overloading):本类中  重写（override）:子父类中*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="11-5-封装"><a href="#11-5-封装" class="headerlink" title="11.5 封装"></a>11.5 封装</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token number">1.</span><span class="token keyword">private</span><span class="token number">2.</span><span class="token keyword">package</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="/../images/JAVA%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%80%EF%BC%89/%E6%9D%83%E9%99%90%E4%BF%AE%E9%A5%B0%E7%AC%A6.jpg" alt="权限修饰符"></p><pre class="line-numbers language-java" data-language="java"><code class="language-java">权限修饰符：<span class="token number">1.</span><span class="token keyword">private</span> <span class="token punctuation">(</span>成员变量，构造方法，一般方法<span class="token punctuation">)</span><span class="token number">2.</span><span class="token keyword">public</span> <span class="token punctuation">(</span>类，成员变量，构造方法，一般方法<span class="token punctuation">)</span><span class="token number">3.</span><span class="token keyword">protected</span> <span class="token punctuation">(</span>成员变量，构造方法，一般方法<span class="token punctuation">)</span><span class="token number">4.</span><span class="token keyword">default</span> <span class="token punctuation">(</span>类，成员变量，构造方法，一般方法<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="11-6-多态"><a href="#11-6-多态" class="headerlink" title="11.6 多态"></a>11.6 多态</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/*  多态：父类指向子类对象  1.向上转型（转成父类），不能调用子类特有的方法  2.向下转型    使用场景：方法参数类型（解耦）*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="11-7-抽象类"><a href="#11-7-抽象类" class="headerlink" title="11.7 抽象类"></a>11.7 抽象类</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">abstract</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="11-8-static"><a href="#11-8-static" class="headerlink" title="11.8 static"></a>11.8 static</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/* static修饰符 1.静态成员被所有对象共享 2.静态成员随着类的加载而加载 3.静态成员可以通过:类名.静态成员，对象.静态成员  static静态变量和实例变量的区别： 1.存储位置不同   实例变量存储在堆内存的对象中   静态变量存储在方法区的静态区中 2.生命周期不同   实例变量随着对象的创建而存在，随着对象的销毁而销毁   静态变量随着类的加载而存在，随着类的卸载而销毁 3.调动方式不同   实例变量：对象.实例成员   静态变量：类名.静态成员，对象.静态成员    静态代码块 static {  }*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="11-9-final"><a href="#11-9-final" class="headerlink" title="11.9 final"></a>11.9 final</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/*  1.final修饰的类，不能被继承  2.final修饰的方法，不能被重写  3.final修饰的变量，是常量，只能赋值一次，不允许修改（大写）*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="11-10-枚举类"><a href="#11-10-枚举类" class="headerlink" title="11.10 枚举类"></a>11.10 枚举类</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//enum</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="11-11-接口"><a href="#11-11-接口" class="headerlink" title="11.11 接口"></a>11.11 接口</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/*  interface  1.成员变量 public static final  2.成员方法(抽象方法 public abstract，默认方法)    类和接口（实现implements）  类和类（继承extends）  接口和接口（继承extends）    一个类只能有一个直接父类，可以同时实现多个接口    继承 is a  实现 has a*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="12-内部类"><a href="#12-内部类" class="headerlink" title="12. 内部类"></a>12. 内部类</h2><ol><li>成员内部类</li><li>静态内部类</li><li>局部内部类</li><li>匿名内部类</li></ol><h2 id="13-常用类"><a href="#13-常用类" class="headerlink" title="13. 常用类"></a>13. 常用类</h2><h3 id="13-1-String"><a href="#13-1-String" class="headerlink" title="13.1 String"></a>13.1 String</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/*  1.字符串是常量  2.char value[]    编码表：  1.ASCII  2.GB2312  3.GBK  4.GB 18030  5.UTF-8*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="13-2-StringBuffer"><a href="#13-2-StringBuffer" class="headerlink" title="13.2 StringBuffer"></a>13.2 StringBuffer</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/*  字符串缓冲区（char value[]）  初始容量是16    int newCapacity = (value.length &lt;&lt; 1) + 2;//新数组的长度    存储任意类型的数据，最终都会转成字符串输出    线程不安全*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="13-3-StringBuilder"><a href="#13-3-StringBuilder" class="headerlink" title="13.3 StringBuilder"></a>13.3 StringBuilder</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/*  线程安全*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="13-4-Object"><a href="#13-4-Object" class="headerlink" title="13.4 Object"></a>13.4 Object</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/*  public boolean equals(Object obj)    public int hashCode()    public String toString()*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="13-5-包装类"><a href="#13-5-包装类" class="headerlink" title="13.5 包装类"></a>13.5 包装类</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/* 包装类：           byte     Byte           short    Short           int      Integer           long     Long           float    Float           double   Double           char     Character           boolean  Boolean           xxx parseXxx(要转换的对应类型的数据)           int parseInt(int类型的数据)           long parseLong(long类型的数据)         */</span>          <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="13-6-Date"><a href="#13-6-Date" class="headerlink" title="13.6 Date"></a>13.6 Date</h3><h3 id="13-7-Calendar"><a href="#13-7-Calendar" class="headerlink" title="13.7 Calendar"></a>13.7 Calendar</h3><h3 id="13-8-LocalDate"><a href="#13-8-LocalDate" class="headerlink" title="13.8 LocalDate"></a>13.8 LocalDate</h3><h2 id="14-异常"><a href="#14-异常" class="headerlink" title="14. 异常"></a>14. 异常</h2><p><img src="/../images/JAVA%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%80%EF%BC%89/java%E5%BC%82%E5%B8%B8.webp" alt="java异常"></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/* 1.异常分类   编译时异常 throws 异常类（方法声明处）   运行时异常 throw 异常对象（方法中） 2.try...catch...finally 异常处理原则： 1.异常处理只能用于非正常情况， 不能用于控制代码的正常流程   异常会降低程序的性能，增加代码调试的复杂性 2.为异常提供说明文档 3.尽量避免异常，避免过于庞大的try代码块 4.在catch中尽量指定具体的异常类型*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="15-IO"><a href="#15-IO" class="headerlink" title="15. IO"></a>15. IO</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/*  I(input)输入（读）  O(output)输出（写）  1.数据类型    &gt;&gt;字符流    &gt;&gt;字节流  2.数据流向    &gt;&gt;输出流    &gt;&gt;输入流      桥梁流：  1.转换（字节流--&gt;字符流）  2.设置编码    字符流 = 字节流 + 编码表  FileOutputStream fos = new FileOutputStream("fo.txt");  OutputStreamWriter outputStreamWriter = new OutputStreamWriter(fos, "utf-8");    FileWriter    java.io 同步阻塞  java.nio 同步非阻塞*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/../images/JAVA%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%80%EF%BC%89/javaIo.webp" alt="javaIo"></p><p><img src="/../images/JAVA%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%80%EF%BC%89/image-20220518105030889.png" alt="image-20220518105030889"></p><p><img src="/../images/JAVA%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%80%EF%BC%89/image-20220518105133137.png" alt="image-20220518105133137"></p><h2 id="16-线程"><a href="#16-线程" class="headerlink" title="16. 线程"></a>16. 线程</h2><h3 id="16-1-创建线程方式"><a href="#16-1-创建线程方式" class="headerlink" title="16.1 创建线程方式"></a>16.1 创建线程方式</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/*进程：正在进行中的程序，是系统进行资源分配核调度的基本单元，是操作系统结构的基础线程：是操作系统能够进行运算调度的最小单位。它被包含在进程之中，是进程中的实际运作单位。一条线程指的是进程中一个单一顺序的控制流，一个进程中可以并发多个线程，每条线程并行执行不同的任务创建线程的方式：1.继承Thread类，重写run方法2.实现Runnable接口，重写run方法3.实现Callable接口，重写call方法，FutureTask4.线程池线程默认名称：Thread-0,Thread-1...*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/../images/JAVA%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%80%EF%BC%89/image-20220519113502261.png" alt="image-20220519113502261"></p><h3 id="16-2-线程状态"><a href="#16-2-线程状态" class="headerlink" title="16.2 线程状态"></a>16.2 线程状态</h3><p><img src="/../images/JAVA%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%80%EF%BC%89/image-20220519141913513.png" alt="image-20220519141913513"></p><p><img src="/../images/JAVA%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%80%EF%BC%89/image-20220523091700926.png" alt="image-20220523091700926"></p><h3 id="16-3-线程安全"><a href="#16-3-线程安全" class="headerlink" title="16.3 线程安全"></a>16.3 线程安全</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/*  线程安全问题出现的原因：  1.多个线程同时操作共享数据（同一个资源）  2.操作共享数据的代码有多行    解决线程安全问题方式：  方式一: synchronized      1.同步代码块          synchronized (锁){//锁：对象            同步代码          }      2.同步方法        锁：当前对象      3.同步静态方法        锁：字节码文件对象（.class被加载到方法区后就会在堆内存中创建此.class对应的对象）      锁： 重量级 synchronized          轻量级           悲观锁          乐观锁  方式二：API  lock.lock(),lock.unlock()*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="16-4-生产者消费者"><a href="#16-4-生产者消费者" class="headerlink" title="16.4 生产者消费者"></a>16.4 生产者消费者</h3><p><img src="/../images/JAVA%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%80%EF%BC%89/image-20220520133637447.png" alt="image-20220520133637447"></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/*  线程通讯：wait() notify() notifyAll()          LockSupport.park(),LockSupport.unpark(thread);*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="16-5-死锁"><a href="#16-5-死锁" class="headerlink" title="16.5 死锁"></a>16.5 死锁</h3><p><img src="/../images/JAVA%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%80%EF%BC%89/image-20220520152556782.png" alt="image-20220520152556782"></p><h3 id="16-6-线程池"><a href="#16-6-线程池" class="headerlink" title="16.6 线程池"></a>16.6 线程池</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//        ThreadPoolExecutor(int corePoolSize,                   //核心线程数</span><span class="token comment">//                            int maximumPoolSize,               //最大线程数</span><span class="token comment">//                            long keepAliveTime,                //存活时间</span><span class="token comment">//                            TimeUnit unit,                     //时间单位</span><span class="token comment">//                            BlockingQueue&lt;Runnable&gt; workQueue, //缓存队列</span><span class="token comment">//                            RejectedExecutionHandler handler)       //拒绝策略</span>        <span class="token comment">/*           拒绝策略：AbortPolicy丢弃任务，抛出异常（默认）                   CallerRunsPolicy，由调用（提交任务的线程）线程处理                   DiscardOldestPolicy，丢弃队列最前面的任务                   DiscardPolicy，丢弃任务，不抛出异常                   10 + 5 + 5 = 20                   最大线程数15+缓存队列5=20         */</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/../images/JAVA%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%80%EF%BC%89/%E7%BA%BF%E7%A8%8B%E6%B1%A0-1653283547480.png" alt="线程池"></p><h3 id="16-7-ThreadLocal"><a href="#16-7-ThreadLocal" class="headerlink" title="16.7 ThreadLocal"></a>16.7 ThreadLocal</h3><h2 id="17-集合"><a href="#17-集合" class="headerlink" title="17. 集合"></a>17. 集合</h2><p><img src="/../images/JAVA%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%80%EF%BC%89/image-20220523132938708.png" alt="image-20220523132938708"></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/*  1.存储对象  2.长度可变    Collection  |--List     有序（存入和取出的顺序一致），可重复，有下标     |--ArrayList        数据结构:          数组（transient Object[] elementData;）          private static final int DEFAULT_CAPACITY = 10;//默认容量10          int newCapacity = oldCapacity + (oldCapacity &gt;&gt; 1);        特点：查询快，增删慢        不同步     |--LinkedList        数据结构：双向链表，查询慢，增删快        不同步  |--Set     无序（存入和取出的顺序不一致），不可重复     |--HashSet        Hash表（HashMap）,底层 HashMap 实例的默认初始容量是 16，加载因子是 0.75        先判断对象的hashCode值        1.不同，直接存储        2.相同，再判断equals()的值，如果还相同，则不存，如果不同，则存储     |--TreeSet：有序，不可重复        1.实体类实现Comparable接口，重写compareTo()方法，让对象自身具有排序功能        此接口强行对实现它的每个类的对象进行整体排序。这种排序被称为类的自然排序，类的 compareTo 方法被称为它的自然比较方法。        2.自定义类实现Comparator接口，重写compare()方法，在创建TreeSet集合对象时作为参数，让集合自身具有排序功能        */</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/*  HashMap:key/value  默认初始容量 (16) 和默认加载因子 (0.75)  static final int DEFAULT_INITIAL_CAPACITY = 1 &lt;&lt; 4; // aka 16  static final float DEFAULT_LOAD_FACTOR = 0.75f;    jdk1.7 Entry[]数据+链表  jdk1.8 Node&lt;K,V&gt;[] tab数组+TreeNode&lt;K,V&gt;红黑树+ Node&lt;K,V&gt; next单向链表    static final int TREEIFY_THRESHOLD = 8;  当数组容量&gt;=64且链表长度&gt;8,转红黑树    红黑树节点个数&lt;6,转单向链表    TreeMap:红黑树  private static final boolean RED   = false;  private static final boolean BLACK = true;  static final class Entry&lt;K,V&gt;    Hashtable:hash表（数组）  默认的初始容量 (11) 和加载因子 (0.75)*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/../images/JAVA%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%80%EF%BC%89/image-20220524150753040.png" alt="image-20220524150753040"></p><p><img src="/../images/JAVA%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%80%EF%BC%89/image-20220524151400897.png" alt="image-20220524151400897"></p><h2 id="18-泛型"><a href="#18-泛型" class="headerlink" title="18. 泛型"></a>18. 泛型</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/*  泛型：泛指的类型，jdk1.5出现的安全机制  T:Type  E:Element  K:Key  V:Value  作用：  1.将运行时ClassCastException转到了编译阶段  2.避免了强制类型转换*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="19-JDK1-8新特性"><a href="#19-JDK1-8新特性" class="headerlink" title="19. JDK1.8新特性"></a>19. JDK1.8新特性</h2><h3 id="19-1-lambda表达式"><a href="#19-1-lambda表达式" class="headerlink" title="19.1 lambda表达式"></a>19.1 lambda表达式</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/*  1.无参，多个参数： ()不可省略    一个参数：()可以省略，  2.{}中只有一行代码，    无返回值{}可以省略    有返回值时{}和return都可省略*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/*  1.已经注册了储蓄账户多个  2.程序启动时，读取账户文件，反序列化，保存到ArryList集合中，就可以存钱了，当退出时，再把ArryList集合中    的对象序列化到文件中*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="19-2-函数式接口"><a href="#19-2-函数式接口" class="headerlink" title="19.2 函数式接口"></a>19.2 函数式接口</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/*  接口中只有一个抽象方式时，就是函数式接口  @FunctionalInterface  1.Consumer 消费型  2.Supplier 供给型  3.Function 函数型  4.Predicate 判断型*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="19-3-方法引用"><a href="#19-3-方法引用" class="headerlink" title="19.3 方法引用"></a>19.3 方法引用</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/*  方法引用：当lambada方法体的实现，已经有了API能实现同样的效果，可以选择使用方法引用  ::  1.对象::实例方法名  2.类::实例方法名  3.类::静态方法名  4.构造方法引用*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="19-4Stream"><a href="#19-4Stream" class="headerlink" title="19.4Stream"></a>19.4Stream</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/*  1.中间操作  2.终止操作：forEach，count()*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="20-网络编程"><a href="#20-网络编程" class="headerlink" title="20. 网络编程"></a>20. 网络编程</h2><p><img src="/../images/JAVA%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%80%EF%BC%89/image-20220526114851510.png" alt="image-20220526114851510"></p><h3 id="20-1-UDP"><a href="#20-1-UDP" class="headerlink" title="20.1 UDP"></a>20.1 UDP</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/*Internet 协议集支持一个无连接的传输协议，该协议称为用户数据报协议（UDP，User Datagram Protocol）。UDP 为应用程序提供了一种无需建立连接就可以发送封装的 IP 数据包的方法。*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ol><li><p>无连接</p></li><li><p>不可靠</p></li><li><p>快速传输</p></li></ol><h3 id="20-2-TCP"><a href="#20-2-TCP" class="headerlink" title="20.2 TCP"></a>20.2 TCP</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/*  传输控制协议（TCP，Transmission Control Protocol）是一种面向连接的、可靠的、基于字节流的传输层通信协议*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="21-数据库"><a href="#21-数据库" class="headerlink" title="21. 数据库"></a>21. 数据库</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/*  数据库管理系统(Database Management System)是一种操纵和管理数据库的大型软件，用于建立、使用和维护数据库，简称DBMS  1.Mysql  2.Oracle  3.PostgreSQL  关系型数据库    SQL:结构化查询语言（Structured Query Language）简称SQL  1、数据查询语言（DQL: Data Query Language）:SELECT  2、数据操作语言（DML：Data Manipulation Language）:insert,update,delete  3、数据定义语言（DDL）:create,alter,drop  4、数据控制语言（DCL）  5、事务控制语言（TCL）*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="21-1-连接"><a href="#21-1-连接" class="headerlink" title="21.1 连接"></a>21.1 连接</h3><pre class="line-numbers language-cmd" data-language="cmd"><code class="language-cmd">mysql --help-h, --host=name     Connect to host.-u, --user=name     User for login if not current user.-P, --port=#        Port number to use for connection or 0 for default to-p, --password[=name] Password to use when connecting to servermysql -hlocalhost -uroot -p123456 -P3306<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="21-2-SQL"><a href="#21-2-SQL" class="headerlink" title="21.2 SQL"></a>21.2 SQL</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#显示所有数据库</span>show databases<span class="token punctuation">;</span><span class="token comment">#使用数据库 use 数据库名称;</span>use shop_data<span class="token punctuation">;</span><span class="token comment">#显示所有的表</span>show tables<span class="token punctuation">;</span><span class="token comment">#查看表结构 desc 表名称;</span>desc user<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="21-2-1-DDL"><a href="#21-2-1-DDL" class="headerlink" title="21.2.1 DDL"></a>21.2.1 DDL</h4><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">--数据库-&gt;表-&gt;列（字段）</span><span class="token comment">--创建数据库 create database 数据库名称;</span><span class="token keyword">create</span> <span class="token keyword">database</span> test<span class="token punctuation">;</span><span class="token comment">--创建表</span><span class="token comment">-- create table 表名(列名 列类型);</span><span class="token keyword">create</span> <span class="token keyword">table</span> student<span class="token punctuation">(</span>id <span class="token keyword">int</span><span class="token punctuation">,</span>name <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">--添加列</span><span class="token comment">-- alter table 表名 add column 列名 列类型</span><span class="token keyword">alter</span> <span class="token keyword">table</span> student <span class="token keyword">add</span> sex <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">--修改列名或类型</span><span class="token comment">-- alter table 表名 change 原列名 新列名 列新类型;</span><span class="token keyword">alter</span> <span class="token keyword">table</span> student change sex stu_sex <span class="token keyword">int</span><span class="token punctuation">;</span><span class="token comment">-- alter table 表名 modify column 列名 列类型;</span><span class="token keyword">alter</span> <span class="token keyword">table</span> student <span class="token keyword">modify</span> <span class="token keyword">column</span> stu_sex <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">--删表 drop table 表名;</span><span class="token keyword">drop</span> <span class="token keyword">table</span> student<span class="token punctuation">;</span><span class="token comment">--删数据库 drop database 数据库名;</span><span class="token keyword">drop</span> <span class="token keyword">database</span> test<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="21-2-2-DML"><a href="#21-2-2-DML" class="headerlink" title="21.2.2 DML"></a>21.2.2 DML</h4><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 插入</span><span class="token comment">-- insert into 表名 (列名1,列名2,列名3, ...)values(值1,值2，值3, ...)</span><span class="token keyword">insert</span> <span class="token keyword">into</span> student<span class="token punctuation">(</span>id<span class="token punctuation">,</span>name<span class="token punctuation">,</span>sex<span class="token punctuation">)</span><span class="token keyword">values</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">'张三'</span><span class="token punctuation">,</span><span class="token string">'男'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">-- 修改</span><span class="token comment">-- update 表名 set 列名 = 值，...</span><span class="token keyword">update</span> student <span class="token keyword">set</span> id <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token string">'李四'</span><span class="token punctuation">;</span><span class="token comment">-- 删除</span><span class="token comment">-- delete from 表名;</span><span class="token keyword">delete</span> <span class="token keyword">from</span> student<span class="token punctuation">;</span><span class="token comment">-- truncate table 表名;</span><span class="token keyword">truncate</span> <span class="token keyword">table</span> student<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="21-2-3-DQL"><a href="#21-2-3-DQL" class="headerlink" title="21.2.3 DQL"></a>21.2.3 DQL</h4><ol><li>单表查询</li></ol><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 全表扫描</span><span class="token keyword">select</span> id<span class="token punctuation">,</span>name<span class="token punctuation">,</span>sex<span class="token punctuation">,</span>birthday<span class="token punctuation">,</span>create_time<span class="token punctuation">,</span>update_time <span class="token keyword">from</span> student<span class="token punctuation">;</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> student<span class="token punctuation">;</span><span class="token keyword">select</span> id<span class="token punctuation">,</span>name <span class="token keyword">as</span> <span class="token string">'stu_name'</span><span class="token punctuation">,</span>sex <span class="token string">'性别'</span><span class="token punctuation">,</span>birthday<span class="token punctuation">,</span>create_time<span class="token punctuation">,</span>update_time <span class="token keyword">from</span> student<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- where单条件</span><span class="token comment">-- 精确查询</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> student <span class="token keyword">where</span> id <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span><span class="token comment">-- 范围查询</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> student <span class="token keyword">where</span> id <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">;</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> student <span class="token keyword">where</span> id <span class="token operator">in</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> student <span class="token keyword">where</span> create_time <span class="token operator">between</span> <span class="token string">'2022-05-27 11:00:40'</span> <span class="token operator">and</span> <span class="token string">'2022-05-27 11:01:39'</span><span class="token punctuation">;</span><span class="token comment">-- 模糊查询 %匹配0~n个字符  _匹配0~1个字符</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> student <span class="token keyword">where</span> name <span class="token operator">like</span> <span class="token string">'王%'</span><span class="token punctuation">;</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> student <span class="token keyword">where</span> name <span class="token operator">like</span> <span class="token string">'王_'</span><span class="token punctuation">;</span><span class="token comment">-- where多条件</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> student <span class="token keyword">where</span> id <span class="token operator">=</span> <span class="token number">3</span> <span class="token operator">and</span> name <span class="token operator">=</span> <span class="token string">'李四'</span><span class="token punctuation">;</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> student <span class="token keyword">where</span> id <span class="token operator">=</span> <span class="token number">3</span> <span class="token operator">or</span> name <span class="token operator">=</span> <span class="token string">'李四'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 算术运算符 + - * / %</span><span class="token keyword">select</span> id<span class="token punctuation">,</span>name<span class="token punctuation">,</span>sex<span class="token punctuation">,</span>birthday<span class="token punctuation">,</span>salary<span class="token operator">+</span><span class="token number">1000</span> <span class="token keyword">from</span> student<span class="token punctuation">;</span><span class="token comment">-- 比较运算符 = != &lt;&gt; &lt; &gt; &lt;= &gt;=</span><span class="token keyword">select</span> id<span class="token punctuation">,</span> name<span class="token punctuation">,</span> sex<span class="token punctuation">,</span> birthday<span class="token punctuation">,</span> salary<span class="token punctuation">,</span> salary <span class="token operator">&lt;&gt;</span> <span class="token number">1000</span> <span class="token string">'salary &lt;&gt; 1000'</span> <span class="token keyword">from</span> student<span class="token punctuation">;</span><span class="token comment">-- 逻辑运算符 ! not &amp;&amp; and || or</span><span class="token comment">-- 位运算符 &amp; | ^ ~ &gt;&gt; &lt;&lt;</span><span class="token keyword">select</span> id<span class="token punctuation">,</span> name<span class="token punctuation">,</span> sex<span class="token punctuation">,</span> birthday<span class="token punctuation">,</span> salary<span class="token punctuation">,</span> salary <span class="token operator">&lt;&lt;</span> <span class="token number">1</span> <span class="token keyword">from</span> student<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 排序 </span><span class="token comment">-- order by 列1，列2  </span><span class="token comment">-- asc升序 desc降序</span><span class="token keyword">select</span> id<span class="token punctuation">,</span> name<span class="token punctuation">,</span> sex<span class="token punctuation">,</span> birthday<span class="token punctuation">,</span> salary <span class="token keyword">from</span> student <span class="token keyword">order</span> <span class="token keyword">by</span>  birthday <span class="token keyword">desc</span><span class="token punctuation">,</span> salary <span class="token keyword">asc</span><span class="token punctuation">;</span><span class="token comment">-- 先按生日降序，在此基础上再按工资升序</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 分组（统计）</span><span class="token keyword">SELECT</span>sex<span class="token punctuation">,</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">'总数'</span><span class="token punctuation">,</span><span class="token function">sum</span><span class="token punctuation">(</span>salary<span class="token punctuation">)</span> <span class="token string">'总和'</span><span class="token punctuation">,</span><span class="token function">avg</span><span class="token punctuation">(</span>salary<span class="token punctuation">)</span> <span class="token string">'平均值'</span><span class="token punctuation">,</span><span class="token function">max</span><span class="token punctuation">(</span>salary<span class="token punctuation">)</span> <span class="token string">'最大值'</span><span class="token punctuation">,</span><span class="token function">min</span><span class="token punctuation">(</span>salary<span class="token punctuation">)</span> <span class="token string">'最小值'</span><span class="token keyword">FROM</span>student<span class="token keyword">GROUP</span> <span class="token keyword">BY</span>sex<span class="token keyword">HAVING</span><span class="token function">avg</span><span class="token punctuation">(</span>salary<span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">3000</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 分页 limit 偏移量, 查询个数</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> student <span class="token keyword">limit</span> <span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ol start="2"><li>子查询</li></ol><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 单行子查询</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> student <span class="token keyword">where</span> salary <span class="token operator">&gt;</span> <span class="token punctuation">(</span><span class="token keyword">select</span> salary <span class="token keyword">from</span> student <span class="token keyword">where</span> name <span class="token operator">=</span> <span class="token string">'赵六'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">-- 多行子查询</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> student <span class="token keyword">where</span> salary <span class="token operator">in</span> <span class="token punctuation">(</span><span class="token keyword">select</span> salary <span class="token keyword">from</span> student <span class="token keyword">where</span> name <span class="token operator">like</span> <span class="token string">'王%'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> student <span class="token keyword">where</span> salary <span class="token operator">not</span> <span class="token operator">in</span> <span class="token punctuation">(</span><span class="token keyword">select</span> salary <span class="token keyword">from</span> student <span class="token keyword">where</span> name <span class="token operator">like</span> <span class="token string">'王%'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="3"><li>多表查询</li></ol><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 查询学生和学生所属班级信息 笛卡尔积</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> t_student<span class="token punctuation">,</span> t_class<span class="token punctuation">;</span><span class="token comment">-- 内连接 （查询符合条件的数据）</span><span class="token keyword">select</span> s<span class="token punctuation">.</span>id<span class="token punctuation">,</span>s<span class="token punctuation">.</span>name<span class="token punctuation">,</span>s<span class="token punctuation">.</span>sex<span class="token punctuation">,</span>s<span class="token punctuation">.</span>birthday<span class="token punctuation">,</span>s<span class="token punctuation">.</span>salary<span class="token punctuation">,</span>c<span class="token punctuation">.</span>id class_id<span class="token punctuation">,</span>c<span class="token punctuation">.</span>name class_name<span class="token punctuation">,</span>c<span class="token punctuation">.</span>num <span class="token keyword">from</span> t_student s<span class="token punctuation">,</span> t_class c <span class="token keyword">where</span> s<span class="token punctuation">.</span>class_id <span class="token operator">=</span> c<span class="token punctuation">.</span>id<span class="token punctuation">;</span><span class="token keyword">select</span> s<span class="token punctuation">.</span>id<span class="token punctuation">,</span>s<span class="token punctuation">.</span>name<span class="token punctuation">,</span>s<span class="token punctuation">.</span>sex<span class="token punctuation">,</span>s<span class="token punctuation">.</span>birthday<span class="token punctuation">,</span>s<span class="token punctuation">.</span>salary<span class="token punctuation">,</span>c<span class="token punctuation">.</span>id class_id<span class="token punctuation">,</span>c<span class="token punctuation">.</span>name class_name<span class="token punctuation">,</span>c<span class="token punctuation">.</span>num <span class="token keyword">from</span> t_student s <span class="token keyword">inner</span> <span class="token keyword">join</span> t_class c <span class="token keyword">on</span> s<span class="token punctuation">.</span>class_id <span class="token operator">=</span> c<span class="token punctuation">.</span>id<span class="token keyword">select</span> s<span class="token punctuation">.</span>id<span class="token punctuation">,</span>s<span class="token punctuation">.</span>name<span class="token punctuation">,</span>s<span class="token punctuation">.</span>sex<span class="token punctuation">,</span>s<span class="token punctuation">.</span>birthday<span class="token punctuation">,</span>s<span class="token punctuation">.</span>salary<span class="token punctuation">,</span>c<span class="token punctuation">.</span>id class_id<span class="token punctuation">,</span>c<span class="token punctuation">.</span>name class_name<span class="token punctuation">,</span>c<span class="token punctuation">.</span>num <span class="token keyword">from</span> t_student s <span class="token keyword">inner</span> <span class="token keyword">join</span> t_class c <span class="token keyword">on</span> s<span class="token punctuation">.</span>class_id <span class="token operator">=</span> c<span class="token punctuation">.</span>id <span class="token keyword">where</span> s<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">'张三'</span><span class="token comment">-- 左连接（查询左表中所有的数据，右表中没有匹配的显示null）</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> t_student s <span class="token keyword">left</span> <span class="token keyword">join</span> t_class c <span class="token keyword">on</span> s<span class="token punctuation">.</span>class_id <span class="token operator">=</span> c<span class="token punctuation">.</span>id<span class="token punctuation">;</span><span class="token comment">-- 右连接（查询右表中所有的数据，左表中没有匹配的显示null）</span><span class="token keyword">select</span> s<span class="token punctuation">.</span>id<span class="token punctuation">,</span>s<span class="token punctuation">.</span>name<span class="token punctuation">,</span>s<span class="token punctuation">.</span>sex<span class="token punctuation">,</span>s<span class="token punctuation">.</span>birthday<span class="token punctuation">,</span>s<span class="token punctuation">.</span>salary<span class="token punctuation">,</span>c<span class="token punctuation">.</span>id<span class="token punctuation">,</span>c<span class="token punctuation">.</span>name<span class="token punctuation">,</span>c<span class="token punctuation">.</span>num <span class="token keyword">from</span> t_student s <span class="token keyword">right</span> <span class="token keyword">join</span> t_class c <span class="token keyword">on</span> s<span class="token punctuation">.</span>class_id <span class="token operator">=</span> c<span class="token punctuation">.</span>id<span class="token punctuation">;</span><span class="token comment">-- union(去重) union all(不去重), 可以联合多个select语句，将它们的结果组合成单个结果集，合并时，两个表对应的列数和数据类型必须相同，且互相对应</span><span class="token keyword">select</span> <span class="token keyword">column</span><span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token keyword">from</span> 表<span class="token number">1</span><span class="token keyword">union</span> <span class="token punctuation">[</span><span class="token keyword">all</span><span class="token punctuation">]</span><span class="token keyword">select</span> <span class="token keyword">column</span><span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token keyword">from</span> 表<span class="token number">2</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="21-2-4-DCL"><a href="#21-2-4-DCL" class="headerlink" title="21.2.4 DCL"></a>21.2.4 DCL</h4><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 创建用户</span><span class="token comment">-- create user 用户名 identified by '密码'</span><span class="token keyword">create</span> <span class="token keyword">user</span> test02 identified <span class="token keyword">by</span> <span class="token string">'123456'</span><span class="token comment">-- mysql用户表</span><span class="token keyword">select</span> host<span class="token punctuation">,</span><span class="token keyword">user</span><span class="token punctuation">,</span>authentication_string <span class="token keyword">from</span> mysql<span class="token punctuation">.</span><span class="token keyword">user</span><span class="token punctuation">;</span><span class="token comment">-- 授权</span><span class="token comment">/* grant 权限1,权限2,…权限n on 数据库名.表名 to 用户名@主机名 identified by ‘连接口令’ select,update,insert,delete,drop,create... 数据库名：* 所有的库 表名：* 所有的表 all privileges 所有权限 主机名：localhost仅允许本地连接，%本地和远程都可连接*/</span><span class="token keyword">grant</span> <span class="token keyword">insert</span> <span class="token keyword">on</span> test<span class="token punctuation">.</span><span class="token operator">*</span> <span class="token keyword">to</span> test02<span class="token variable">@localhost</span> identified <span class="token keyword">by</span> <span class="token string">'123456'</span><span class="token comment">-- 刷新</span>flush <span class="token keyword">privileges</span><span class="token comment">-- 查看权限</span><span class="token keyword">show</span> grants <span class="token keyword">for</span> <span class="token string">'用户名'</span><span class="token variable">@'localhost'</span><span class="token punctuation">;</span><span class="token keyword">show</span> grants <span class="token keyword">for</span> <span class="token string">'test02'</span><span class="token variable">@'localhost'</span><span class="token punctuation">;</span><span class="token comment">-- 撤销权限</span><span class="token keyword">revoke</span> <span class="token keyword">all</span> <span class="token keyword">privileges</span> <span class="token keyword">on</span> <span class="token operator">*</span><span class="token punctuation">.</span><span class="token operator">*</span> <span class="token keyword">from</span> <span class="token string">'test02'</span><span class="token variable">@'localhost'</span><span class="token comment">-- 删除用户</span><span class="token keyword">drop</span> <span class="token keyword">user</span> <span class="token string">'test02'</span><span class="token variable">@'localhost'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="21-3-E-R"><a href="#21-3-E-R" class="headerlink" title="21.3 E-R"></a>21.3 E-R</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/*  E-R图也称实体-联系图(Entity Relationship Diagram)，提供了表示实体类型、属性和联系的方法，用来描述现实世界的概念模型。它是描述现实世界关系概念模型的有效方法。是表示概念关系模型的一种方式。用“矩形框”表示实体型，矩形框内写明实体名称；用“椭圆图框”或圆角矩形表示实体的属性，并用“实心线段”将其与相应关系的“实体型”连接起来；用”菱形框“表示实体型之间的联系成因，在菱形框内写明联系名，并用”实心线段“分别与有关实体型连接起来，同时在”实心线段“旁标上联系的类型（1:1,1:n或m:n）*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="21-4-约束"><a href="#21-4-约束" class="headerlink" title="21.4 约束"></a>21.4 约束</h3><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 主键约束:唯一性（有且仅有一个）,联合主键 </span><span class="token comment">-- alter table 表名 add primary key (列,...);</span><span class="token comment">-- alter table student add primary key (id);</span><span class="token comment">-- 联合主键 </span><span class="token keyword">alter</span> <span class="token keyword">table</span> student <span class="token keyword">add</span> <span class="token keyword">primary</span> <span class="token keyword">key</span> <span class="token punctuation">(</span>id<span class="token punctuation">,</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">-- 唯一性约束（可多个）</span><span class="token comment">-- alert table 表名 add [constraint 约束名称] unique key (列)</span><span class="token keyword">alter</span> <span class="token keyword">table</span> student <span class="token keyword">add</span> <span class="token keyword">constraint</span> uk_name <span class="token keyword">unique</span> <span class="token keyword">key</span> <span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">-- 非空约束</span><span class="token comment">-- alter table 表名 change 原列名 新列名 列类型 NOT NULL;</span><span class="token keyword">alter</span> <span class="token keyword">table</span> student change sex sex <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">not</span> <span class="token boolean">null</span><span class="token punctuation">;</span><span class="token comment">-- 外键约束 foreign key</span><span class="token comment">/*  set null:从父表中删除或更新数据时，同时将字表中的外键列设置为空  cascade:从父表中删除或更新数据时，同时将字表中的关联数据删除或更新  restrict:不能先删除或更新主表，要先删或更新子表，才能删除或更新主表  no action:同restrict*/</span><span class="token comment">-- AUTO_INCREMENT 自增</span><span class="token comment">-- alter table 表名 auto_increment = 数字;</span><span class="token keyword">alter</span> <span class="token keyword">table</span> student <span class="token keyword">auto_increment</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">-- 默认值 DEFAULT</span><span class="token comment">-- 注释 COMMENT</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="21-5-数据类型"><a href="#21-5-数据类型" class="headerlink" title="21.5 数据类型"></a>21.5 数据类型</h3><p><img src="/../images/JAVA%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%80%EF%BC%89/image-20220527111157643.png" alt="image-20220527111157643"></p><p><img src="/../images/JAVA%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%80%EF%BC%89/image-20220527111233989.png" alt="image-20220527111233989"></p><p><img src="/../images/JAVA%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%80%EF%BC%89/image-20220527111247195.png" alt="image-20220527111247195"></p><h3 id="21-6-函数"><a href="#21-6-函数" class="headerlink" title="21.6 函数"></a>21.6 函数</h3><h4 id="21-6-1-字符串函数"><a href="#21-6-1-字符串函数" class="headerlink" title="21.6.1 字符串函数"></a>21.6.1 字符串函数</h4><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- length(列) 长度</span><span class="token keyword">select</span> id<span class="token punctuation">,</span>name<span class="token punctuation">,</span>length<span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">,</span>sex<span class="token punctuation">,</span>birthday<span class="token punctuation">,</span>salary <span class="token keyword">from</span> t_student<span class="token punctuation">;</span><span class="token comment">-- concat 连接</span><span class="token keyword">select</span> id<span class="token punctuation">,</span>name<span class="token punctuation">,</span>concat<span class="token punctuation">(</span>name<span class="token punctuation">,</span><span class="token string">'_666'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>sex<span class="token punctuation">,</span>birthday<span class="token punctuation">,</span>salary <span class="token keyword">from</span> t_student<span class="token punctuation">;</span><span class="token keyword">select</span> id<span class="token punctuation">,</span>name<span class="token punctuation">,</span>concat_ws<span class="token punctuation">(</span><span class="token string">'-'</span><span class="token punctuation">,</span>name<span class="token punctuation">,</span><span class="token string">'666'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>sex<span class="token punctuation">,</span>birthday<span class="token punctuation">,</span>salary <span class="token keyword">from</span> t_student<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="21-6-2-数值函数"><a href="#21-6-2-数值函数" class="headerlink" title="21.6.2 数值函数"></a>21.6.2 数值函数</h4><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> rand<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">select</span> rand<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">10</span><span class="token punctuation">,</span>floor<span class="token punctuation">(</span>rand<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>ceil<span class="token punctuation">(</span>rand<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">from</span> dual<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="21-6-3-日期函数"><a href="#21-6-3-日期函数" class="headerlink" title="21.6.3 日期函数"></a>21.6.3 日期函数</h4><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 获取日期，时间</span><span class="token keyword">select</span> <span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> curdate<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> curtime<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">current_date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">current_time</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">current_timestamp</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">from</span> dual<span class="token punctuation">;</span><span class="token comment">-- 时间戳</span><span class="token keyword">select</span> unix_timestamp<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">from</span> dual<span class="token punctuation">;</span><span class="token comment">-- 格式化</span><span class="token comment">/*  Y:四位年 y:两位年  m:两位月 M:月份名称  d:两位天 D:月中的天数  h:12小时制 H:24小时制  i:分  s:秒*/</span><span class="token keyword">select</span> date_format<span class="token punctuation">(</span>create_time<span class="token punctuation">,</span><span class="token string">'%Y-%m-%d %H:%i:%s'</span><span class="token punctuation">)</span> <span class="token keyword">from</span> t_student<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>日期运算</strong></p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 加</span><span class="token keyword">select</span> create_time<span class="token punctuation">,</span> date_add<span class="token punctuation">(</span>create_time<span class="token punctuation">,</span> <span class="token keyword">interval</span> <span class="token number">1</span> <span class="token keyword">day</span><span class="token punctuation">)</span> <span class="token keyword">from</span> t_student<span class="token punctuation">;</span><span class="token comment">-- 减</span><span class="token keyword">select</span> create_time<span class="token punctuation">,</span> date_sub<span class="token punctuation">(</span>create_time<span class="token punctuation">,</span> <span class="token keyword">interval</span> <span class="token number">1</span> <span class="token keyword">day</span><span class="token punctuation">)</span> <span class="token keyword">from</span> t_student<span class="token punctuation">;</span><span class="token comment">-- 间隔天数</span><span class="token keyword">select</span> create_time<span class="token punctuation">,</span> update_time<span class="token punctuation">,</span> datediff<span class="token punctuation">(</span>create_time<span class="token punctuation">,</span> update_time<span class="token punctuation">)</span> <span class="token keyword">from</span> t_student<span class="token punctuation">;</span><span class="token comment">-- 间隔时间</span><span class="token keyword">select</span> create_time<span class="token punctuation">,</span> update_time<span class="token punctuation">,</span> timediff<span class="token punctuation">(</span>create_time<span class="token punctuation">,</span> update_time<span class="token punctuation">)</span> <span class="token keyword">from</span> t_student<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>字符串日期转换</strong></p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 日期-字符串</span><span class="token keyword">select</span> date_format<span class="token punctuation">(</span>create_time<span class="token punctuation">,</span><span class="token string">'%Y-%m-%d %H:%i%:%s'</span><span class="token punctuation">)</span> <span class="token keyword">from</span> t_student<span class="token punctuation">;</span><span class="token comment">-- 字符串-日期</span><span class="token keyword">select</span> str_to_date<span class="token punctuation">(</span><span class="token string">'2022-05-27 11:05:40'</span><span class="token punctuation">,</span><span class="token string">'%Y-%m-%d %H:%i:%s'</span><span class="token punctuation">)</span> <span class="token keyword">from</span> t_student<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="21-6-4-流程控制函数"><a href="#21-6-4-流程控制函数" class="headerlink" title="21.6.4 流程控制函数"></a>21.6.4 流程控制函数</h4><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- `IF`(expr1,expr2,expr3) 如果expr1的值为true, 返回expr2, 否则返回expr3</span><span class="token keyword">SELECT</span>id<span class="token punctuation">,</span>NAME<span class="token punctuation">,</span>sex<span class="token punctuation">,</span>birthday<span class="token punctuation">,</span>salary<span class="token punctuation">,</span><span class="token keyword">IF</span> <span class="token punctuation">(</span>salary <span class="token operator">&gt;</span> <span class="token number">5000</span><span class="token punctuation">,</span><span class="token string">'领导'</span><span class="token punctuation">,</span><span class="token string">'员工'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> create_time<span class="token punctuation">,</span> update_time<span class="token punctuation">,</span> class_id<span class="token keyword">FROM</span>t_student<span class="token punctuation">;</span><span class="token comment">-- IFNULL(expr1,expr2) 如果expr1的值不为null, 返回expr1, 否则返回expr2</span><span class="token keyword">SELECT</span>id<span class="token punctuation">,</span>NAME<span class="token punctuation">,</span>sex<span class="token punctuation">,</span>birthday<span class="token punctuation">,</span>salary<span class="token punctuation">,</span>create_time<span class="token punctuation">,</span>update_time<span class="token punctuation">,</span>class_id<span class="token punctuation">,</span>ifnull<span class="token punctuation">(</span>class_id<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token keyword">FROM</span>t_student<span class="token punctuation">;</span><span class="token comment">-- case when 条件1 then 结果1 when 条件2 then 结果2... else 结果n end</span><span class="token keyword">SELECT</span>id<span class="token punctuation">,</span>NAME<span class="token punctuation">,</span>sex<span class="token punctuation">,</span>birthday<span class="token punctuation">,</span>salary<span class="token punctuation">,</span><span class="token keyword">CASE</span><span class="token keyword">WHEN</span> salary <span class="token operator">&lt;=</span> <span class="token number">2000</span> <span class="token keyword">THEN</span><span class="token string">'初级'</span><span class="token keyword">WHEN</span> salary <span class="token operator">&gt;=</span> <span class="token number">3000</span> <span class="token operator">and</span> salary <span class="token operator">&lt;=</span><span class="token number">4000</span> <span class="token keyword">THEN</span><span class="token string">'中级'</span><span class="token keyword">ELSE</span><span class="token string">'高级'</span><span class="token keyword">END</span><span class="token punctuation">,</span> create_time<span class="token punctuation">,</span> update_time<span class="token punctuation">,</span> class_id<span class="token keyword">FROM</span>t_student<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="21-7-索引"><a href="#21-7-索引" class="headerlink" title="21.7 索引"></a>21.7 索引</h3><h4 id="21-7-1-索引类型"><a href="#21-7-1-索引类型" class="headerlink" title="21.7.1 索引类型"></a>21.7.1 索引类型</h4><ul><li>普通索引 Normal</li><li>主键索引 Primary</li><li>唯一性索引 Unique</li><li>全文索引 Full Text</li></ul><h4 id="21-7-2-创建索引"><a href="#21-7-2-创建索引" class="headerlink" title="21.7.2 创建索引"></a>21.7.2 创建索引</h4><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">index</span> 索引名称 <span class="token keyword">on</span> 表名（列）<span class="token keyword">create</span> <span class="token keyword">index</span> idx_salary <span class="token keyword">on</span> t_student<span class="token punctuation">(</span>salary<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">create</span> <span class="token keyword">unique</span> <span class="token keyword">index</span> 索引名称 <span class="token keyword">on</span> 表（列）<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="21-7-2-B-树"><a href="#21-7-2-B-树" class="headerlink" title="21.7.2 B+树"></a>21.7.2 B+树</h4><p><img src="/../images/JAVA%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%80%EF%BC%89/image-20220530151455006.png" alt="image-20220530151455006"></p><p><strong>减少IO次数</strong></p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">DROP</span> <span class="token keyword">TABLE</span> <span class="token keyword">IF</span> <span class="token keyword">EXISTS</span> <span class="token identifier"><span class="token punctuation">`</span>t_student<span class="token punctuation">`</span></span><span class="token punctuation">;</span><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token identifier"><span class="token punctuation">`</span>t_student<span class="token punctuation">`</span></span> <span class="token punctuation">(</span>  <span class="token identifier"><span class="token punctuation">`</span>id<span class="token punctuation">`</span></span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">AUTO_INCREMENT</span> <span class="token keyword">COMMENT</span> <span class="token string">'主键'</span><span class="token punctuation">,</span>  <span class="token identifier"><span class="token punctuation">`</span>name<span class="token punctuation">`</span></span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'姓名'</span><span class="token punctuation">,</span>  <span class="token identifier"><span class="token punctuation">`</span>sex<span class="token punctuation">`</span></span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token string">'男'</span> <span class="token keyword">COMMENT</span> <span class="token string">'性别'</span><span class="token punctuation">,</span>  <span class="token identifier"><span class="token punctuation">`</span>birthday<span class="token punctuation">`</span></span> <span class="token keyword">date</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'生日'</span><span class="token punctuation">,</span>  <span class="token identifier"><span class="token punctuation">`</span>salary<span class="token punctuation">`</span></span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'工资'</span><span class="token punctuation">,</span>  <span class="token identifier"><span class="token punctuation">`</span>create_time<span class="token punctuation">`</span></span> <span class="token keyword">datetime</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'创建时间'</span><span class="token punctuation">,</span>  <span class="token identifier"><span class="token punctuation">`</span>update_time<span class="token punctuation">`</span></span> <span class="token keyword">datetime</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'修改时间'</span><span class="token punctuation">,</span>  <span class="token identifier"><span class="token punctuation">`</span>class_id<span class="token punctuation">`</span></span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">`</span>id<span class="token punctuation">`</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment">-- 主键约束</span>  <span class="token keyword">UNIQUE</span> <span class="token keyword">KEY</span> <span class="token identifier"><span class="token punctuation">`</span>uk_name<span class="token punctuation">`</span></span> <span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">`</span>name<span class="token punctuation">`</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment">-- 唯一性约束</span>  <span class="token keyword">KEY</span> <span class="token identifier"><span class="token punctuation">`</span>fk_class_id<span class="token punctuation">`</span></span> <span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">`</span>class_id<span class="token punctuation">`</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token keyword">KEY</span> <span class="token identifier"><span class="token punctuation">`</span>idx_salary<span class="token punctuation">`</span></span> <span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">`</span>salary<span class="token punctuation">`</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment">-- 普通索引</span>  <span class="token keyword">CONSTRAINT</span> <span class="token identifier"><span class="token punctuation">`</span>fk_class_id<span class="token punctuation">`</span></span> <span class="token keyword">FOREIGN</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">`</span>class_id<span class="token punctuation">`</span></span><span class="token punctuation">)</span> <span class="token keyword">REFERENCES</span> <span class="token identifier"><span class="token punctuation">`</span>t_class<span class="token punctuation">`</span></span> <span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">`</span>id<span class="token punctuation">`</span></span><span class="token punctuation">)</span> <span class="token keyword">ON</span> <span class="token keyword">DELETE</span> <span class="token keyword">SET</span> <span class="token boolean">NULL</span> <span class="token keyword">ON</span> <span class="token keyword">UPDATE</span> <span class="token keyword">SET</span> <span class="token boolean">NULL</span> <span class="token comment">-- 外键约束</span><span class="token punctuation">)</span> <span class="token keyword">ENGINE</span><span class="token operator">=</span><span class="token keyword">InnoDB</span> <span class="token keyword">AUTO_INCREMENT</span><span class="token operator">=</span><span class="token number">7</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CHARSET</span><span class="token operator">=</span>utf8<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="21-8-执行计划"><a href="#21-8-执行计划" class="headerlink" title="21.8 执行计划"></a>21.8 执行计划</h4><p><img src="/../images/JAVA%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%80%EF%BC%89/image-20220530153158701.png" alt="image-20220530153158701"></p><p><img src="/../images/JAVA%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%80%EF%BC%89/image-20220530154044812.png" alt="image-20220530154044812"></p><p><img src="/../images/JAVA%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%80%EF%BC%89/image-20220530153810503.png" alt="image-20220530153810503"></p><p><img src="/../images/JAVA%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%80%EF%BC%89/image-20220530153950098.png" alt="image-20220530153950098"></p><p><img src="/../images/JAVA%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%80%EF%BC%89/image-20220530153545803.png" alt="image-20220530153545803"></p><h4 id="21-9-创建索引原则"><a href="#21-9-创建索引原则" class="headerlink" title="21.9 创建索引原则"></a>21.9 创建索引原则</h4><ul><li>经常作为查询条件的列</li><li>数据表中数据量大时建索引</li><li>经常做增删改的表不要建索引</li><li>经常做运算的字段不要建索引</li></ul><h3 id="21-8-事务"><a href="#21-8-事务" class="headerlink" title="21.8 事务"></a>21.8 事务</h3><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">/*  事务特性ACID  1.原子性  2.一致性  3.隔离性  4.持久性*/</span><span class="token comment">/*  1.系统变量 @@    -- 全局    show global variables;    -- 会话    show session variables;    -- 查看指定的系统变量 1自动提交 0非自动提交    select @@global.autocommit;  2.自定义变量 @*/</span><span class="token comment">/*  1.设置事务非自动提交    set @@global.autocommit = 0（OFF）  2.开启事务    begin 或 start strancaction  3.执行sql  4.提交(回滚)    commit    rollback*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="21-9-存储引擎"><a href="#21-9-存储引擎" class="headerlink" title="21.9 存储引擎"></a>21.9 存储引擎</h3><p><img src="/../images/JAVA%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%80%EF%BC%89/image-20220531093444576.png" alt="image-20220531093444576"></p><p><strong>行级锁</strong></p><p><strong>表级锁</strong></p><h3 id="21-10-视图"><a href="#21-10-视图" class="headerlink" title="21.10 视图"></a>21.10 视图</h3><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">/*  视图是一种虚拟表，建立在已有表的基础上（基表）  create view 视图名称  as  语句;*/</span><span class="token comment">-- 创建视图</span><span class="token keyword">create</span> <span class="token keyword">view</span> vw1 <span class="token keyword">as</span> <span class="token keyword">select</span> c<span class="token punctuation">.</span>id<span class="token punctuation">,</span> c<span class="token punctuation">.</span>name<span class="token punctuation">,</span> c<span class="token punctuation">.</span>num<span class="token punctuation">,</span> s<span class="token punctuation">.</span>id <span class="token string">'stu_id'</span><span class="token punctuation">,</span> s<span class="token punctuation">.</span>name <span class="token string">'stu_name'</span><span class="token punctuation">,</span> s<span class="token punctuation">.</span>sex<span class="token punctuation">,</span> s<span class="token punctuation">.</span>birthday<span class="token punctuation">,</span> s<span class="token punctuation">.</span>salary  <span class="token keyword">from</span> t_class c<span class="token punctuation">,</span> t_student s <span class="token keyword">where</span> c<span class="token punctuation">.</span>id <span class="token operator">=</span> s<span class="token punctuation">.</span>class_id<span class="token punctuation">;</span><span class="token comment">-- 使用视图</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> vw1<span class="token punctuation">;</span><span class="token comment">-- 查看视图</span><span class="token keyword">show</span> <span class="token keyword">tables</span><span class="token punctuation">;</span><span class="token comment">-- 查看视图结构</span><span class="token keyword">desc</span> vw1<span class="token punctuation">;</span><span class="token comment">-- 查看视图的定义信息</span><span class="token keyword">show</span> <span class="token keyword">create</span> <span class="token keyword">view</span> vw1<span class="token punctuation">;</span><span class="token comment">-- 删除视图</span><span class="token keyword">drop</span> <span class="token keyword">view</span> vw1<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="21-11-存储过程"><a href="#21-11-存储过程" class="headerlink" title="21.11 存储过程"></a>21.11 存储过程</h3><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">/*  create procedure 存储过程名(in|out|inout 参数名 参数类型)  begin    语句;  end*/</span><span class="token comment">-- 创建</span><span class="token keyword">create</span> <span class="token keyword">procedure</span> pro1<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">begin</span>  <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> t_student<span class="token punctuation">;</span><span class="token keyword">end</span><span class="token comment">-- 调用</span><span class="token keyword">call</span> pro1<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">-- 入参</span><span class="token keyword">create</span> <span class="token keyword">procedure</span> pro2<span class="token punctuation">(</span><span class="token operator">in</span> sid <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token keyword">begin</span>  <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> t_student <span class="token keyword">where</span> id <span class="token operator">=</span> sid<span class="token punctuation">;</span><span class="token keyword">end</span><span class="token comment">-- 调用</span><span class="token keyword">call</span> pro1<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token comment">-- 入参 出参</span><span class="token keyword">create</span> <span class="token keyword">procedure</span> pro3<span class="token punctuation">(</span><span class="token operator">in</span> sid <span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">out</span> sname <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">begin</span>  <span class="token keyword">select</span> <span class="token identifier"><span class="token punctuation">`</span>name<span class="token punctuation">`</span></span> <span class="token keyword">into</span> sname <span class="token keyword">from</span> t_student <span class="token keyword">where</span> id <span class="token operator">=</span> sid<span class="token punctuation">;</span><span class="token keyword">end</span><span class="token keyword">call</span> pro3<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token variable">@sname</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">-- @sname 自定义变量</span><span class="token keyword">select</span> <span class="token variable">@sname</span><span class="token punctuation">;</span><span class="token comment">/*  -- 定义会话变量      方式一：        set @变量名 = 值;      方式二：        select 列 into @变量名 [from 表]  -- 使用会话变量      select @变量名        -- 定义局部变量       declare 变量名 变量类型 default 默认值         -- 判断     if 条件表达式       then 语句     else 语句     end if*/</span><span class="token keyword">create</span> <span class="token keyword">procedure</span> pro4<span class="token punctuation">(</span><span class="token operator">in</span> sid <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token keyword">begin</span>  <span class="token keyword">declare</span> s_name <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">declare</span> s_salary <span class="token keyword">int</span><span class="token punctuation">;</span>  <span class="token keyword">select</span> <span class="token identifier"><span class="token punctuation">`</span>name<span class="token punctuation">`</span></span><span class="token punctuation">,</span> salary <span class="token keyword">into</span> s_name<span class="token punctuation">,</span> s_salary <span class="token keyword">from</span> t_student <span class="token keyword">where</span> id <span class="token operator">=</span> sid<span class="token punctuation">;</span>  <span class="token keyword">if</span> s_salary <span class="token operator">&gt;</span> <span class="token number">5000</span>    <span class="token keyword">then</span> <span class="token keyword">set</span> s_salary <span class="token operator">=</span> s_salary <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">;</span>  <span class="token keyword">else</span> <span class="token keyword">set</span> s_salary <span class="token operator">=</span> s_salary <span class="token operator">&lt;&lt;</span> <span class="token number">2</span><span class="token punctuation">;</span>  <span class="token keyword">end</span> <span class="token keyword">if</span><span class="token punctuation">;</span>  <span class="token keyword">update</span> t_student <span class="token keyword">set</span> salary <span class="token operator">=</span> s_salary <span class="token keyword">where</span> <span class="token identifier"><span class="token punctuation">`</span>name<span class="token punctuation">`</span></span> <span class="token operator">=</span> s_name<span class="token punctuation">;</span><span class="token keyword">end</span><span class="token keyword">call</span> pro4<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token comment">-- 循环</span><span class="token comment">/*  [while_label]:while 循环条件 do    循环体;  end while while_label;  [loop_label]:loop    循环体;  end loop loop_label;*/</span><span class="token keyword">create</span> <span class="token keyword">procedure</span> pro5<span class="token punctuation">(</span><span class="token keyword">out</span> rid <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token keyword">begin</span>  <span class="token keyword">declare</span> id <span class="token keyword">int</span> <span class="token keyword">default</span> <span class="token number">0</span><span class="token punctuation">;</span>  test_loop:<span class="token keyword">loop</span>    <span class="token keyword">set</span> id <span class="token operator">=</span> id <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> id <span class="token operator">&gt;</span> <span class="token number">3</span>      <span class="token keyword">then</span> <span class="token keyword">leave</span> test_loop<span class="token punctuation">;</span>    <span class="token keyword">end</span> <span class="token keyword">if</span><span class="token punctuation">;</span>  <span class="token keyword">end</span> <span class="token keyword">loop</span> test_loop<span class="token punctuation">;</span>  <span class="token keyword">set</span> rid <span class="token operator">=</span> id<span class="token punctuation">;</span><span class="token keyword">end</span><span class="token keyword">call</span> pro5<span class="token punctuation">(</span><span class="token variable">@rid</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">select</span> <span class="token variable">@rid</span><span class="token punctuation">;</span><span class="token comment">/*  游标：  1.声明游标    declare 游标名称 cursor for SQL;  2.打开游标    open 游标名称;  3.使用游标    fetch 游标名称 into 变量;  4.关闭游标*/</span><span class="token keyword">create</span> <span class="token keyword">procedure</span> pro6<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">begin</span>  <span class="token comment">-- 声明局部变量</span>  <span class="token keyword">declare</span> s_name <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">-- 定义游标</span>  <span class="token keyword">declare</span> my_cur <span class="token keyword">cursor</span> <span class="token keyword">for</span> <span class="token keyword">select</span> <span class="token identifier"><span class="token punctuation">`</span>name<span class="token punctuation">`</span></span> <span class="token keyword">from</span> t_student<span class="token punctuation">;</span>  <span class="token comment">-- 打开游标</span>  <span class="token keyword">open</span> my_cur<span class="token punctuation">;</span>  <span class="token comment">-- 循环</span>  cur_ioop:<span class="token keyword">loop</span>  <span class="token comment">-- 使用游标</span>  <span class="token keyword">fetch</span> my_cur <span class="token keyword">into</span> s_name<span class="token punctuation">;</span>  <span class="token comment">-- 判断</span>  <span class="token keyword">if</span> s_name <span class="token operator">=</span> <span class="token string">'小米'</span>    <span class="token keyword">then</span>     <span class="token keyword">update</span> t_student <span class="token keyword">set</span> salary <span class="token operator">=</span> salary <span class="token operator">+</span> <span class="token number">1000</span> <span class="token keyword">where</span> <span class="token identifier"><span class="token punctuation">`</span>name<span class="token punctuation">`</span></span> <span class="token operator">=</span> s_name<span class="token punctuation">;</span>    <span class="token comment">-- 离开循环</span>    <span class="token keyword">leave</span> cur_ioop<span class="token punctuation">;</span>  <span class="token comment">-- 结束判断</span>  <span class="token keyword">end</span> <span class="token keyword">if</span><span class="token punctuation">;</span>  <span class="token comment">-- 结束循环</span>  <span class="token keyword">end</span> <span class="token keyword">loop</span> cur_ioop<span class="token punctuation">;</span>  <span class="token comment">-- 关闭游标</span>  <span class="token keyword">close</span> my_cur<span class="token punctuation">;</span><span class="token keyword">end</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="21-12-函数"><a href="#21-12-函数" class="headerlink" title="21.12 函数"></a>21.12 函数</h3><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">/*  create function 函数名(参数名 参数类型,...)  returns 返回类型  begin    函数体;  end；*/</span><span class="token keyword">create</span> <span class="token keyword">function</span> fn2<span class="token punctuation">(</span>s_id <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token keyword">returns</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span><span class="token keyword">begin</span>  <span class="token keyword">declare</span> s_name <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">select</span> <span class="token identifier"><span class="token punctuation">`</span>name<span class="token punctuation">`</span></span> <span class="token keyword">into</span> s_name <span class="token keyword">from</span> t_student <span class="token keyword">where</span> id <span class="token operator">=</span> s_id<span class="token punctuation">;</span>  <span class="token keyword">return</span> s_name<span class="token punctuation">;</span><span class="token keyword">end</span><span class="token comment">-- 执行函数</span><span class="token keyword">select</span> 函数名<span class="token punctuation">(</span>实参<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="21-13-触发器"><a href="#21-13-触发器" class="headerlink" title="21.13 触发器"></a>21.13 触发器</h3><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">/*  create trigger 触发器名称  {before | after}  {insert | update | delete} on 表名  for each row  begin    语句;  end;*/</span><span class="token keyword">create</span> <span class="token keyword">trigger</span> after_insert <span class="token keyword">after</span> <span class="token keyword">insert</span> <span class="token keyword">on</span> t_student<span class="token keyword">for each row</span><span class="token keyword">begin</span>  <span class="token keyword">insert</span> <span class="token keyword">into</span> t_class<span class="token punctuation">(</span>name<span class="token punctuation">,</span>num<span class="token punctuation">)</span><span class="token keyword">value</span><span class="token punctuation">(</span><span class="token string">'500期'</span><span class="token punctuation">,</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">end</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="22-反射"><a href="#22-反射" class="headerlink" title="22. 反射"></a>22. 反射</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/*  Java的反射（reflection）机制是指在程序的运行状态中，可以构造任意一个类的对象，可以了解任意一个对象所属的类，可以了解任意一个类的成员变量和方法，可以调用任意一个对象的属性和方法*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="23-JDBC"><a href="#23-JDBC" class="headerlink" title="23. JDBC"></a>23. JDBC</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/*  Java数据库连接，（Java Database Connectivity，简称JDBC）是Java语言中用来规范客户端程序如何来访问数据库的应用程序接口，提供了诸如查询和更新数据库中数据的方法。JDBC也是Sun Microsystems的商标。我们通常说的JDBC是面向关系型数据库的*/</span><span class="token comment">/*  1.导包 mysql-connector-java-5.1.49.jar  2.加载（注册）驱动程序    Class.forName("com.mysql.jdbc.Driver");  3.建立链接    Connection connection = DriverManager.getConnection("jdbc:mysql://localhost:3306/test?serverTimezone=UTC", "root", "123456");  4.执行SQL语句    PreparedStatement preparedStatement = connection.prepareStatement("select * from t_student");  5.处理结果集    ResultSet resultSet = preparedStatement.executeQuery();  6.关闭数据库*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/../images/JAVA%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%80%EF%BC%89/image-20220602091429909.png" alt="image-20220602091429909"></p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">/*  事务：ACID  插入班级表，获取刚刚插入的班级数据的主键值  insert into t_class(name,num)values('110期',110);  //获取刚插入数据的主键值  select last_insert_id();  插入学生表，class_id的就是班级数据的主键值  insert into `t_student`(name,sex,salary,birthday,create_time,update_time,class_id) values ('张三', '男', 1000, '2022-06-02', '2022-06-02 09:50:12', '2022-06-02 09:50:12', ?)*/</span><span class="token comment">/*  1.设置非自动提交    Connection接口中方法setAutoCommit(false)  2.执行SQL  3.提交Connection接口中方法commit() | 回滚Connection接口中方法rollback()*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="24-lombok"><a href="#24-lombok" class="headerlink" title="24. lombok"></a>24. lombok</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/*  1.idea安装lombok  2.导包  3.使用注解    @Getter and @Setter    @FieldNameConstants    @ToString    @EqualsAndHashCode    @AllArgsConstructor, @RequiredArgsConstructor and @NoArgsConstructor    @Log, @Log4j, @Log4j2, @Slf4j, @XSlf4j, @CommonsLog, @JBossLog, @Flogger, @CustomLog    @Data    @Builder    @SuperBuilder    @Singular    @Delegate    @Value    @Accessors    @Wither    @With    @SneakyThrows    @val    @var    experimental @var    @UtilityClass    Lombok config system*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="25-注解"><a href="#25-注解" class="headerlink" title="25.注解"></a>25.注解</h2><h3 id="25-1-概念"><a href="#25-1-概念" class="headerlink" title="25.1 概念"></a>25.1 概念</h3><p>从JDK5开始,Java增加对元数据的支持，也就是注解，注解与注释是有一定区别的，可以把注解理解为代码里的特殊标记，这些标记可以在编译，类加载，运行时被读取，并执行相应的处理。通过注解开发人员可以在不改变原有代码和逻辑的情况下在源代码中嵌入补充信息</p><h3 id="25-2-元注解"><a href="#25-2-元注解" class="headerlink" title="25.2 元注解"></a>25.2 元注解</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/*    @Retention：注解保留策略RetenionPolicy    @Target：注解的使用范围ElementType        ElementType.TYPE 类或接口        ElementType.FIELD, 成员变量        ElementType.METHOD 方法    @Documented    @Inherited    @Result*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="25-3-自定义注解"><a href="#25-3-自定义注解" class="headerlink" title="25.3 自定义注解"></a>25.3 自定义注解</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/*  权限修饰符 @interface 注解名 {      类型 成员名() default 值;  }*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="26-单元测试"><a href="#26-单元测试" class="headerlink" title="26. 单元测试"></a>26. 单元测试</h2><h3 id="26-1-概念"><a href="#26-1-概念" class="headerlink" title="26.1 概念"></a>26.1 概念</h3><p>JUnit是一个Java语言的单元测试框架</p><h3 id="26-2-测试"><a href="#26-2-测试" class="headerlink" title="26.2 测试"></a>26.2 测试</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/*  junit-4.13.2.jar  hamcrest-core-1.3.jar    @Test 使用该注解标注的public void方法是一个测试方法  @Before 在任意使用@Test注解标注的public void方法执行前执行*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="27-三层架构"><a href="#27-三层架构" class="headerlink" title="27. 三层架构"></a>27. 三层架构</h2><p>视图层（View）-&gt; 业务层（Service）-&gt; 持久层（Dao）-&gt;数据库</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">servicedaopojo<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="28-xml"><a href="#28-xml" class="headerlink" title="28. xml"></a>28. xml</h2><h3 id="28-1-简介"><a href="#28-1-简介" class="headerlink" title="28.1 简介"></a>28.1 简介</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/*  Extensible Markup Language 可扩展标记语言*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="28-2-作用"><a href="#28-2-作用" class="headerlink" title="28.2 作用"></a>28.2 作用</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/*  存储数据  传输数据*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="28-3-语法"><a href="#28-3-语法" class="headerlink" title="28.3 语法"></a>28.3 语法</h3><ol><li>文档声明（版本，编码）</li></ol><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token prolog">&lt;?xml version="1.0" encoding="utf-8" ?&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="2"><li>根标签（有且仅有一个）</li></ol><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>stus</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>stu</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">&gt;</span></span>张三<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>age</span><span class="token punctuation">&gt;</span></span>20<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>age</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>stu</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>stu</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">&gt;</span></span>李四<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>age</span><span class="token punctuation">&gt;</span></span>30<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>age</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>stu</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>stus</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="28-4-注释"><a href="#28-4-注释" class="headerlink" title="28.4 注释"></a>28.4 注释</h3><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!-- 注释内容 --&gt;</span><span class="token prolog">&lt;?xml version="1.0" encoding="utf-8" ?&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>cla</span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!-- &lt;name&gt;22期&lt;/name&gt; --&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>num</span><span class="token punctuation">&gt;</span></span>30<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>num</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>cla</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="28-5-解析方式"><a href="#28-5-解析方式" class="headerlink" title="28.5 解析方式"></a>28.5 解析方式</h3><p><em>dom4j</em>是一个Java的XML API</p><h3 id="28-6-约束"><a href="#28-6-约束" class="headerlink" title="28.6 约束"></a>28.6 约束</h3><ol><li><p><strong>DTD约束</strong></p></li><li><p><strong>Schema约束</strong>（.xsd）</p></li></ol><h2 id="29-JPA"><a href="#29-JPA" class="headerlink" title="29. JPA"></a>29. JPA</h2><p>JPA是Java Persistence API的简称，中文名Java持久层API，是JDK 5.0注解或XML描述对象－关系表的映射关系，并将运行期的实体<a href="https://baike.baidu.com/item/%E5%AF%B9%E8%B1%A1%E6%8C%81%E4%B9%85%E5%8C%96/7316192">对象持久化</a>到数据库中。</p><p><img src="/../images/JAVA%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%80%EF%BC%89/image-20220606150831513.png" alt="image-20220606150831513"></p><p><img src="/../images/JAVA%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%80%EF%BC%89/jdbc.png" alt="jdbc"></p><p><img src="/../images/JAVA%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%80%EF%BC%89/jpa.png" alt="jpa"></p><h2 id="30-Tomcat"><a href="#30-Tomcat" class="headerlink" title="30. Tomcat"></a>30. Tomcat</h2><p><a href="https://tomcat.apache.org/">https://tomcat.apache.org/</a></p><p>Tomcat 服务器是一个免费的开放源代码的Web 应用服务器，属于轻量级应用<a href="https://baike.baidu.com/item/%E6%9C%8D%E5%8A%A1%E5%99%A8">服务器</a></p><h3 id="30-1-启停"><a href="#30-1-启停" class="headerlink" title="30.1 启停"></a>30.1 启停</h3><p>默认端口：8080</p><pre class="line-numbers language-cmd" data-language="cmd"><code class="language-cmd">#启动apache-tomcat-9.0.63\bin\startup.bat#停止apache-tomcat-9.0.63\bin\shutdown.bat<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="30-2-配置"><a href="#30-2-配置" class="headerlink" title="30.2 配置"></a>30.2 配置</h3><pre class="line-numbers language-cmd" data-language="cmd"><code class="language-cmd">apache-tomcat-9.0.63\conf\server.xml<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="30-3-日志"><a href="#30-3-日志" class="headerlink" title="30.3 日志"></a>30.3 日志</h3><pre class="line-numbers language-cmd" data-language="cmd"><code class="language-cmd">apache-tomcat-9.0.63\logs\catalina.2022-06-06.logapache-tomcat-9.0.63\logs\localhost.2022-06-06.log<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="30-4-web应用"><a href="#30-4-web应用" class="headerlink" title="30.4 web应用"></a>30.4 web应用</h3><pre class="line-numbers language-cmd" data-language="cmd"><code class="language-cmd">#部署目录apache-tomcat-9.0.63\webapps<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="30-5-工作目录"><a href="#30-5-工作目录" class="headerlink" title="30.5 工作目录"></a>30.5 工作目录</h3><pre class="line-numbers language-cmd" data-language="cmd"><code class="language-cmd">apache-tomcat-9.0.63\work<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="30-6-修改端口"><a href="#30-6-修改端口" class="headerlink" title="30.6 修改端口"></a>30.6 修改端口</h3><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Connector</span> <span class="token attr-name">port</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>8081<span class="token punctuation">"</span></span> <span class="token attr-name">protocol</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>HTTP/1.1<span class="token punctuation">"</span></span>               <span class="token attr-name">connectionTimeout</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>20000<span class="token punctuation">"</span></span>               <span class="token attr-name">redirectPort</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>8443<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="30-7-部署方式"><a href="#30-7-部署方式" class="headerlink" title="30.7 部署方式"></a>30.7 部署方式</h3><p>web项目结构：WEB-INF/web.xml</p><ol><li><p>方式一</p><p>把web项目放在webapps目录下</p></li><li><p>方式二</p></li></ol><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Host</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>localhost<span class="token punctuation">"</span></span>  <span class="token attr-name">appBase</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>webapps<span class="token punctuation">"</span></span>            <span class="token attr-name">unpackWARs</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span> <span class="token attr-name">autoDeploy</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!-- path访问路径，docBase项目路径 --&gt;</span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Context</span> <span class="token attr-name">path</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/web02<span class="token punctuation">"</span></span> <span class="token attr-name">docBase</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>D:\works22\web02<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ol start="3"><li>方式三</li></ol><p>apache-tomcat-9.0.63\conf\Catalina\localhost，新建xml文件（web03.xml）</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token prolog">&lt;?xml version="1.0" encoding="utf-8" ?&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Context</span> <span class="token attr-name">path</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/web03<span class="token punctuation">"</span></span> <span class="token attr-name">docBase</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>D:\works22\web03<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="30-8-idea创建web"><a href="#30-8-idea创建web" class="headerlink" title="30.8 idea创建web"></a>30.8 idea创建web</h3><p>创建JAVA项目，再添加web结构</p><p><img src="/../images/JAVA%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%80%EF%BC%89/image-20220607104326604.png" alt="image-20220607104326604"></p><p><img src="/../images/JAVA%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%80%EF%BC%89/image-20220607104301006.png" alt="image-20220607104301006"></p><h3 id="30-9-idea集成tomcat"><a href="#30-9-idea集成tomcat" class="headerlink" title="30.9 idea集成tomcat"></a>30.9 idea集成tomcat</h3><p><img src="/../images/JAVA%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%80%EF%BC%89/image-20220607105157073.png" alt="image-20220607105157073"></p><p><img src="/../images/JAVA%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%80%EF%BC%89/image-20220607105255380.png" alt="image-20220607105255380"></p><p><img src="/../images/JAVA%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%80%EF%BC%89/image-20220607105839077.png" alt="image-20220607105839077"></p><p><img src="/../images/JAVA%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%80%EF%BC%89/image-20220607110259072.png" alt="image-20220607110259072"></p><p><img src="/../images/JAVA%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%80%EF%BC%89/image-20220607110439023.png" alt="image-20220607110439023"></p><h3 id="30-10-idea部署web"><a href="#30-10-idea部署web" class="headerlink" title="30.10 idea部署web"></a>30.10 idea部署web</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">C</span><span class="token operator">:</span>\<span class="token class-name">Users</span>\admin\<span class="token class-name">AppData</span>\<span class="token class-name">Local</span>\<span class="token class-name">JetBrains</span>\<span class="token class-name">IntelliJIdea2021</span><span class="token number">.1</span>\tomcat\b93e6603<span class="token operator">-</span><span class="token number">3</span>cc2<span class="token operator">-</span><span class="token number">4996</span><span class="token operator">-</span><span class="token number">8588</span><span class="token operator">-</span><span class="token number">0957f</span><span class="token number">561</span>c216 <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/../images/JAVA%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%80%EF%BC%89/image-20220607135125403.png" alt="image-20220607135125403"></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">C</span><span class="token operator">:</span>\<span class="token class-name">Users</span>\admin\<span class="token class-name">AppData</span>\<span class="token class-name">Local</span>\<span class="token class-name">JetBrains</span>\<span class="token class-name">IntelliJIdea2021</span><span class="token number">.1</span>\tomcat\b93e6603<span class="token operator">-</span><span class="token number">3</span>cc2<span class="token operator">-</span><span class="token number">4996</span><span class="token operator">-</span><span class="token number">8588</span><span class="token operator">-</span><span class="token number">0957f</span><span class="token number">561</span>c216<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/../images/JAVA%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%80%EF%BC%89/image-20220607135642884.png" alt="image-20220607135642884"></p><p><img src="/../images/JAVA%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%80%EF%BC%89/image-20220607135807540.png" alt="image-20220607135807540"></p><h3 id="30-11-日志乱码"><a href="#30-11-日志乱码" class="headerlink" title="30.11 日志乱码"></a>30.11 日志乱码</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">IntelliJIdea2021</span><span class="token number">.1</span>\tomcat\b93e6603<span class="token operator">-</span><span class="token number">3</span>cc2<span class="token operator">-</span><span class="token number">4996</span><span class="token operator">-</span><span class="token number">8588</span><span class="token operator">-</span><span class="token number">0957f</span><span class="token number">561</span>c216\conf\logging<span class="token punctuation">.</span>properties<span class="token comment">//51行</span><span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>logging<span class="token punctuation">.</span></span>ConsoleHandler</span><span class="token punctuation">.</span>encoding <span class="token operator">=</span> <span class="token constant">GBK</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="31-Servlet"><a href="#31-Servlet" class="headerlink" title="31. Servlet"></a>31. Servlet</h2><h3 id="31-1-是什么"><a href="#31-1-是什么" class="headerlink" title="31.1 是什么"></a>31.1 是什么</h3><p>Servlet（Server Applet）是<a href="https://baike.baidu.com/item/Java/85979">Java</a> Servlet的简称，称为小服务程序或服务连接器，用Java编写的<a href="https://baike.baidu.com/item/%E6%9C%8D%E5%8A%A1%E5%99%A8/100571">服务器</a>端程序，具有独立于平台和<a href="https://baike.baidu.com/item/%E5%8D%8F%E8%AE%AE/13020269">协议</a>的特性，主要功能在于交互式地浏览和生成数据，生成动态<a href="https://baike.baidu.com/item/Web/150564">Web</a>内容</p><h3 id="31-2-实现方式"><a href="#31-2-实现方式" class="headerlink" title="31.2 实现方式"></a>31.2 实现方式</h3><ol><li>实现javax.servlet.Servlet接口，重写接口中的抽象方法</li><li>继承javax.servlet.GenericServlet抽象类，实现抽象方法</li><li>继承javax.servlet.http.HttpServlet类，重写doGet()，doPost()…</li></ol><h3 id="31-3-生命周期方法"><a href="#31-3-生命周期方法" class="headerlink" title="31.3 生命周期方法"></a>31.3 生命周期方法</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//对象创建后执行一次</span><span class="token number">1.</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token class-name">ServletConfig</span> servletConfig<span class="token punctuation">)</span><span class="token comment">//请求到来时执行多次</span><span class="token number">2.</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">service</span><span class="token punctuation">(</span><span class="token class-name">ServletRequest</span> servletRequest<span class="token punctuation">,</span> <span class="token class-name">ServletResponse</span> servletResponse<span class="token punctuation">)</span><span class="token comment">//对象销毁前执行一次</span><span class="token number">3.</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">destroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="31-4-load-on-startup"><a href="#31-4-load-on-startup" class="headerlink" title="31.4 load-on-startup"></a>31.4 load-on-startup</h3><ol><li>负整数或不存在, Servlet对象在第一次请求到来时创建</li><li>正整数或0，Servlet对象随着tomcat的启动而创建</li></ol><h3 id="31-5-ServletConfig"><a href="#31-5-ServletConfig" class="headerlink" title="31.5 ServletConfig"></a>31.5 ServletConfig</h3><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">&gt;</span></span>serverDemo01<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-class</span><span class="token punctuation">&gt;</span></span>com.bwf.servlet.ServerDemo01<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-class</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>init-param</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-name</span><span class="token punctuation">&gt;</span></span>name<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-name</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-value</span><span class="token punctuation">&gt;</span></span>zhangsan<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-value</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>init-param</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>load-on-startup</span><span class="token punctuation">&gt;</span></span>1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>load-on-startup</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="31-6-ServletRequest"><a href="#31-6-ServletRequest" class="headerlink" title="31.6 ServletRequest"></a>31.6 ServletRequest</h3><p>封装请求数据，请求到来时创建，请求结束销毁</p><h3 id="31-7-ServletResponse"><a href="#31-7-ServletResponse" class="headerlink" title="31.7 ServletResponse"></a>31.7 ServletResponse</h3><p>封装相应数据，请求到来时创建，请求结束销毁</p><h3 id="31-8-ServletContext"><a href="#31-8-ServletContext" class="headerlink" title="31.8 ServletContext"></a>31.8 ServletContext</h3><p>域对象</p><p>tomcat启动时创建，停止时销毁（一个项目对应一个）</p><h3 id="31-9-请求方式"><a href="#31-9-请求方式" class="headerlink" title="31.9 请求方式"></a>31.9 请求方式</h3><p><img src="/../images/JAVA%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%80%EF%BC%89/image-20220608103912917.png" alt="image-20220608103912917"></p><h3 id="31-10-依赖问题"><a href="#31-10-依赖问题" class="headerlink" title="31.10 依赖问题"></a>31.10 依赖问题</h3><p><img src="/../images/JAVA%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%80%EF%BC%89/image-20220608111036281.png" alt="image-20220608111036281"></p><p><img src="/../images/JAVA%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%80%EF%BC%89/image-20220608111207739.png" alt="image-20220608111207739"></p><h3 id="31-11-请求流程"><a href="#31-11-请求流程" class="headerlink" title="31.11 请求流程"></a>31.11 请求流程</h3><p><img src="/../images/JAVA%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%80%EF%BC%89/image-20220608113427907.png" alt="image-20220608113427907"></p><h3 id="31-12-乱码"><a href="#31-12-乱码" class="headerlink" title="31.12 乱码"></a>31.12 乱码</h3><ol><li>GET请求</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bytes <span class="token operator">=</span> name<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>name <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">,</span> <span class="token string">"gbk"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ol start="2"><li>POST请求</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java">req<span class="token punctuation">.</span><span class="token function">setCharacterEncoding</span><span class="token punctuation">(</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="3"><li>响应乱码</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java">resp<span class="token punctuation">.</span><span class="token function">setContentType</span><span class="token punctuation">(</span><span class="token string">"text/html;charset=utf8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="31-13-转发"><a href="#31-13-转发" class="headerlink" title="31.13 转发"></a>31.13 转发</h3><p>一次请求，一次响应，由最后一个servlet完成（响应头，响应体）</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">RequestDispatcher</span> dispatcher <span class="token operator">=</span> req<span class="token punctuation">.</span><span class="token function">getRequestDispatcher</span><span class="token punctuation">(</span><span class="token string">"servlet路径"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>dispatcher<span class="token punctuation">.</span><span class="token function">forward</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span> resp<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="/../images/JAVA%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%80%EF%BC%89/image-20220608153115796.png" alt="image-20220608153115796"></p><p><img src="/../images/JAVA%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%80%EF%BC%89/image-20220608153248148.png" alt="image-20220608153248148"></p><h3 id="31-14-包含"><a href="#31-14-包含" class="headerlink" title="31.14 包含"></a>31.14 包含</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">RequestDispatcher</span> dispatcher <span class="token operator">=</span> req<span class="token punctuation">.</span><span class="token function">getRequestDispatcher</span><span class="token punctuation">(</span><span class="token string">"servlet路径"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>dispatcher<span class="token punctuation">.</span><span class="token function">include</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span> resp<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="/../images/JAVA%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%80%EF%BC%89/image-20220608155438579.png" alt="image-20220608155438579"></p><h3 id="31-15-重定向"><a href="#31-15-重定向" class="headerlink" title="31.15 重定向"></a>31.15 重定向</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//方式一                     /项目路径/servlet路径</span>resp<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token string">"Location"</span><span class="token punctuation">,</span><span class="token string">"/web03_war_exploded/r02"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>resp<span class="token punctuation">.</span><span class="token function">setStatus</span><span class="token punctuation">(</span><span class="token number">302</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//方式二            /项目路径/servlet路径</span>resp<span class="token punctuation">.</span><span class="token function">sendRedirect</span><span class="token punctuation">(</span><span class="token string">"https://www.atstudy.com/"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/../images/JAVA%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%80%EF%BC%89/image-20220608161714587.png" alt="image-20220608161714587"></p><p><img src="/../images/JAVA%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%80%EF%BC%89/image-20220608162220536.png" alt="image-20220608162220536"></p><p><img src="/../images/JAVA%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%80%EF%BC%89/image-20220608162408890.png" alt="image-20220608162408890"></p><h3 id="31-16-转发-重定向"><a href="#31-16-转发-重定向" class="headerlink" title="31.16 转发|重定向"></a>31.16 转发|重定向</h3><ol><li><p>请求转发是一次请求一次响应，重定向是两次请求两次响应</p></li><li><p>请求转发地址栏不变，重定向地址栏显示最后的servlet路径</p></li><li><p>请求转发只能转发到本项目的其它servlet，重定向既可以到本项目的其它servlet也可以到其它项目</p></li><li><p>请求转发是服务器端行为，重定向是客户端行为</p></li></ol><h3 id="31-17-Servlet三大域"><a href="#31-17-Servlet三大域" class="headerlink" title="31.17 Servlet三大域"></a>31.17 Servlet三大域</h3><ol><li><p>ServletContext  整个项目</p></li><li><p>HttpServletRequest  一次请求</p></li></ol><h3 id="31-18-BaseServlet"><a href="#31-18-BaseServlet" class="headerlink" title="31.18 BaseServlet"></a>31.18 BaseServlet</h3><p><img src="/../images/JAVA%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%80%EF%BC%89/image-20220609103302415.png" alt="image-20220609103302415"></p><h2 id="32-过滤器"><a href="#32-过滤器" class="headerlink" title="32. 过滤器"></a>32. 过滤器</h2><ol><li>自定义类实现javax.servlet.Filter接口，重写接口中的方法</li><li>web.xml配置</li></ol><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!-- 过滤所有请求 --&gt;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">&gt;</span></span>/*<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">&gt;</span></span>        <span class="token comment">&lt;!-- 过滤指定请求（根据servlet名称） --&gt;</span><span class="token comment">&lt;!--        &lt;servlet-name&gt;studentServlet&lt;/servlet-name&gt;--&gt;</span>        <span class="token comment">&lt;!-- 过滤指定请求（根据servlet路径） --&gt;</span><span class="token comment">&lt;!--        &lt;url-pattern&gt;/stu&lt;/url-pattern&gt;--&gt;</span>        <span class="token comment">&lt;!-- 过滤类型 --&gt;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dispatcher</span><span class="token punctuation">&gt;</span></span>REQUEST<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dispatcher</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dispatcher</span><span class="token punctuation">&gt;</span></span>FORWARD<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dispatcher</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dispatcher</span><span class="token punctuation">&gt;</span></span>INCLUDE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dispatcher</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dispatcher</span><span class="token punctuation">&gt;</span></span>ERROR<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dispatcher</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dispatcher</span><span class="token punctuation">&gt;</span></span>ASYNC<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dispatcher</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>请求到servlet之前执行预处理工作，比如：鉴权，设置编码</p><h2 id="33-监听器"><a href="#33-监听器" class="headerlink" title="33. 监听器"></a>33. 监听器</h2><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!--    1. ServletContextListener       监听 ServletContext 对象创建销毁    2. ServletContextAttributeListener       监听 ServletContext 对象添加、删除、修改数据    3. HttpSessionListener    4. HttpSessionAttributeListener    5. ServletReqestListener    6. ServletReqestAttributeListener--&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>listener</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>listener-class</span><span class="token punctuation">&gt;</span></span>com.bwf.listener.ScListenerDemo<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>listener-class</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>listener</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="34-注解"><a href="#34-注解" class="headerlink" title="34. 注解"></a>34. 注解</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@WebServlet</span><span class="token punctuation">(</span>urlPatterns <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"/stu01"</span><span class="token punctuation">}</span><span class="token punctuation">,</span> loadOnStartup <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token annotation punctuation">@WebFilter</span><span class="token punctuation">(</span>urlPatterns <span class="token operator">=</span> <span class="token string">"/*"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@WebListener</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="35-JSP"><a href="#35-JSP" class="headerlink" title="35. JSP"></a>35. JSP</h2><h3 id="35-1-简介"><a href="#35-1-简介" class="headerlink" title="35.1 简介"></a>35.1 简介</h3><p><strong>JSP</strong>（全称<strong>J</strong>ava<strong>S</strong>erver <strong>P</strong>ages）一种<a href="https://baike.baidu.com/item/%E5%8A%A8%E6%80%81%E7%BD%91%E9%A1%B5%E6%8A%80%E6%9C%AF/9415956">动态网页技术</a>标准</p><h3 id="35-2-组成"><a href="#35-2-组成" class="headerlink" title="35.2 组成"></a>35.2 组成</h3><p>java + html + 指令</p><h3 id="35-3-原理"><a href="#35-3-原理" class="headerlink" title="35.3 原理"></a>35.3 原理</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Local</span>\<span class="token class-name">JetBrains</span>\<span class="token class-name">IntelliJIdea2021</span><span class="token number">.1</span>\tomcat\b93e6603<span class="token operator">-</span><span class="token number">3</span>cc2<span class="token operator">-</span><span class="token number">4996</span><span class="token operator">-</span><span class="token number">8588</span><span class="token operator">-</span><span class="token number">0957f</span><span class="token number">561</span>c216\work\<span class="token class-name">Catalina</span>\localhost\web06_war_exploded\org\apache\jsp<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/../images/JAVA%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%80%EF%BC%89/image-20220609162454718.png" alt="image-20220609162454718"></p><h3 id="35-4-隐式对象"><a href="#35-4-隐式对象" class="headerlink" title="35.4 隐式对象"></a>35.4 隐式对象</h3><p><img src="/../images/JAVA%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%80%EF%BC%89/image-20220610135740798.png" alt="image-20220610135740798"></p><h3 id="35-5-指令"><a href="#35-5-指令" class="headerlink" title="35.5 指令"></a>35.5 指令</h3><pre class="line-numbers language-jsp" data-language="jsp"><code class="language-jsp">&lt;%@ 指令名 属性名 = "属性值" %&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol><li>page</li></ol><pre class="line-numbers language-jsp" data-language="jsp"><code class="language-jsp">&lt;!-- 设置响应编码 --&gt;&lt;%@ page contentType="text/html;charset=UTF-8" language="java" %&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ol start="2"><li><p>taglib</p></li><li><p>include</p></li></ol><h2 id="36-EL表达式"><a href="#36-EL表达式" class="headerlink" title="36. EL表达式"></a>36. EL表达式</h2><h3 id="36-1-语法"><a href="#36-1-语法" class="headerlink" title="36.1 语法"></a>36.1 语法</h3><pre class="line-numbers language-jsp" data-language="jsp"><code class="language-jsp">${} 全域查找 page-&gt;request-&gt;session-&gt;application<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="36-2-隐式对象"><a href="#36-2-隐式对象" class="headerlink" title="36.2 隐式对象"></a>36.2 隐式对象</h3><p><img src="/../images/JAVA%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%80%EF%BC%89/image-20220610140318166.png" alt="image-20220610140318166"></p><h3 id="36-3-运算符"><a href="#36-3-运算符" class="headerlink" title="36.3 运算符"></a>36.3 运算符</h3><h2 id="37-JSTL"><a href="#37-JSTL" class="headerlink" title="37. JSTL"></a>37. JSTL</h2><h3 id="37-1-简介"><a href="#37-1-简介" class="headerlink" title="37.1 简介"></a>37.1 简介</h3><p>JSP标准标签库（JSTL）是一个JSP标签集合，它封装了JSP应用的通用核心功能</p><h3 id="37-2-标签"><a href="#37-2-标签" class="headerlink" title="37.2 标签"></a>37.2 标签</h3><ol><li>核心标签</li></ol><pre class="line-numbers language-jsp" data-language="jsp"><code class="language-jsp">setifchooseforeach<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li>格式标签</li></ol><pre class="line-numbers language-jsp" data-language="jsp"><code class="language-jsp">formatDateformatNumber<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ol start="3"><li><p>sql标签</p></li><li><p>xml标签</p></li></ol><h3 id="37-3-安装"><a href="#37-3-安装" class="headerlink" title="37.3 安装"></a>37.3 安装</h3><p>jstl-1.2.jar</p><h2 id="38-fastjson"><a href="#38-fastjson" class="headerlink" title="38. fastjson"></a>38. fastjson</h2><p><a href="https://github.com/alibaba/fastjson">https://github.com/alibaba/fastjson</a></p><h3 id="38-1-安装"><a href="#38-1-安装" class="headerlink" title="38.1 安装"></a>38.1 安装</h3><p>fastjson-1.2.83.jar</p><h3 id="38-2-注解"><a href="#38-2-注解" class="headerlink" title="38.2 注解"></a>38.2 注解</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Data</span><span class="token annotation punctuation">@NoArgsConstructor</span><span class="token annotation punctuation">@AllArgsConstructor</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Student</span> <span class="token keyword">implements</span> <span class="token class-name">Serializable</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@JSONField</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"stuId"</span><span class="token punctuation">,</span> ordinal <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> id<span class="token punctuation">;</span>    <span class="token annotation punctuation">@JSONField</span><span class="token punctuation">(</span>ordinal <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token annotation punctuation">@JSONField</span><span class="token punctuation">(</span>ordinal <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> sex<span class="token punctuation">;</span>    <span class="token annotation punctuation">@JSONField</span><span class="token punctuation">(</span>ordinal <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token class-name">Date</span> date<span class="token punctuation">;</span>    <span class="token annotation punctuation">@JSONField</span><span class="token punctuation">(</span>ordinal <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">,</span> serialize <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> salary<span class="token punctuation">;</span>    <span class="token annotation punctuation">@JSONField</span><span class="token punctuation">(</span>ordinal <span class="token operator">=</span> <span class="token number">6</span><span class="token punctuation">,</span> format <span class="token operator">=</span> <span class="token string">"yyyy-MM-dd HH:mm:ss"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token class-name">Date</span> createTime<span class="token punctuation">;</span>    <span class="token annotation punctuation">@JSONField</span><span class="token punctuation">(</span>ordinal <span class="token operator">=</span> <span class="token number">7</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token class-name">Date</span> updateTime<span class="token punctuation">;</span>    <span class="token annotation punctuation">@JSONField</span><span class="token punctuation">(</span>ordinal <span class="token operator">=</span> <span class="token number">8</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> classID<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="32-3-方法"><a href="#32-3-方法" class="headerlink" title="32.3 方法"></a>32.3 方法</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Student</span> student <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"张三"</span><span class="token punctuation">,</span> <span class="token string">"男"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">5000</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//对象-&gt;json</span><span class="token class-name">String</span> jsonString <span class="token operator">=</span> <span class="token class-name">JSONObject</span><span class="token punctuation">.</span><span class="token function">toJSONString</span><span class="token punctuation">(</span>student<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>jsonString<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//json-&gt;对象</span><span class="token class-name">Student</span> stu2 <span class="token operator">=</span> <span class="token class-name">JSONObject</span><span class="token punctuation">.</span><span class="token function">parseObject</span><span class="token punctuation">(</span>jsonString<span class="token punctuation">,</span> <span class="token class-name">Student</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>stu2<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="39-cookie"><a href="#39-cookie" class="headerlink" title="39. cookie"></a>39. cookie</h2><h3 id="39-1-简介"><a href="#39-1-简介" class="headerlink" title="39.1 简介"></a>39.1 简介</h3><p>cookie是http协议规定的，用于跟踪用户状态，由服务器端创建保存到客户端的一个key/value数据，当浏览器再次请求服务器时，把cookie随请求发送到服务器</p><h3 id="39-2-cookie"><a href="#39-2-cookie" class="headerlink" title="39.2 cookie"></a>39.2 cookie</h3><p>chrome://settings/cookies/detail?site=localhost&amp;search=cookie</p><p><img src="/../images/JAVA%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%80%EF%BC%89/image-20220613141717732.png" alt="image-20220613141717732"></p><p><img src="/../images/JAVA%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%80%EF%BC%89/image-20220613141757798.png" alt="image-20220613141757798"></p><p><img src="/../images/JAVA%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%80%EF%BC%89/image-20220613141819968.png" alt="image-20220613141819968"></p><p><img src="/../images/JAVA%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%80%EF%BC%89/image-20220613142049922.png" alt="image-20220613142049922"></p><h3 id="39-3-maxAge"><a href="#39-3-maxAge" class="headerlink" title="39.3 maxAge"></a>39.3 maxAge</h3><ol><li>maxAge &gt; 0 浏览器会把cookie保存到客户端硬盘上，有效时长为maxAge的值</li><li>maxAge = 0 浏览器会立刻删除cookie</li><li>maxAge &lt; 0 cookie保存在浏览器内存中</li></ol><h3 id="39-4-path"><a href="#39-4-path" class="headerlink" title="39.4 path"></a>39.4 path</h3><p>aCookie.path = /web08_war_exploded</p><p>bCookie.path = /web08_war_exploded/jsp</p><p>cCookie.path = /web08_war_exploded/jsp/user</p><h3 id="39-5-domain"><a href="#39-5-domain" class="headerlink" title="39.5 domain"></a>39.5 domain</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java">cookie<span class="token punctuation">.</span><span class="token function">setDomain</span><span class="token punctuation">(</span><span class="token string">".baidu.com"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="40-HttpSession"><a href="#40-HttpSession" class="headerlink" title="40. HttpSession"></a>40. HttpSession</h2><p>Httpsession是JavaWeb提供的用于会话跟踪的服务器端对象</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">req<span class="token punctuation">.</span><span class="token function">getSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol><li><p>如果sessionId不存在，创建session对象，同时生成sessionId保存到cookie中，响应到客户端</p></li><li><p>如果sessionId存在，则通过sessionId查找session对象，如果没有找到，创建session对象，生成新的sessionId保存到cookie中，响应到客户端，如果找到，则直接响应到客户端</p></li></ol><h2 id="41-上传下载"><a href="#41-上传下载" class="headerlink" title="41. 上传下载"></a>41. 上传下载</h2><h3 id="41-1-安装"><a href="#41-1-安装" class="headerlink" title="41.1 安装"></a>41.1 安装</h3><ol><li>commons-fileupload-1.4.jar</li><li>commons-io-2.11.0.jar</li></ol><h3 id="41-2-页面"><a href="#41-2-页面" class="headerlink" title="41.2 页面"></a>41.2 页面</h3><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>upload<span class="token punctuation">"</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>post<span class="token punctuation">"</span></span> <span class="token attr-name">enctype</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>multipart/form-data<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    用户名:<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>hr</span><span class="token punctuation">/&gt;</span></span>    上传:<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>file<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>fl<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>hr</span><span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>提交<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="42-Maven"><a href="#42-Maven" class="headerlink" title="42. Maven"></a>42. Maven</h2><h3 id="42-1-项目构建"><a href="#42-1-项目构建" class="headerlink" title="42.1 项目构建"></a>42.1 项目构建</h3><p><img src="/../images/JAVA%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%80%EF%BC%89/%E6%9E%84%E5%BB%BA.png" alt="构建"></p><h3 id="42-2-jar包管理"><a href="#42-2-jar包管理" class="headerlink" title="42.2 jar包管理"></a>42.2 jar包管理</h3><p><img src="/../images/JAVA%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%80%EF%BC%89/image-20220106091758931.png" alt="image-20220106091758931"></p><h3 id="42-3-安装"><a href="#42-3-安装" class="headerlink" title="42.3 安装"></a>42.3 安装</h3><p><a href="https://maven.apache.org/">https://maven.apache.org/</a></p><p><a href="https://archive.apache.org/dist/maven/maven-3/">https://archive.apache.org/dist/maven/maven-3/</a></p><h3 id="42-4-配置环境变量"><a href="#42-4-配置环境变量" class="headerlink" title="42.4 配置环境变量"></a>42.4 配置环境变量</h3><pre class="line-numbers language-cmd" data-language="cmd"><code class="language-cmd">MAVEN_HOME=D:\works22\apache-maven-3.8.6Path=%MAVEN_HOME%\bin;Path=D:\works22\apache-maven-3.8.6\bin<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-cmd" data-language="cmd"><code class="language-cmd">mvn -version<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="42-5-仓库配置"><a href="#42-5-仓库配置" class="headerlink" title="42.5 仓库配置"></a>42.5 仓库配置</h3><ol><li>本地仓库</li></ol><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>settings</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://maven.apache.org/SETTINGS/1.2.0<span class="token punctuation">"</span></span>          <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>          <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://maven.apache.org/SETTINGS/1.2.0 https://maven.apache.org/xsd/settings-1.2.0.xsd<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>  <span class="token comment">&lt;!-- localRepository   | The path to the local repository maven will use to store artifacts.   |   | Default: ${user.home}/.m2/repository  &lt;localRepository&gt;/path/to/local/repo&lt;/localRepository&gt;  --&gt;</span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>localRepository</span><span class="token punctuation">&gt;</span></span>D:\works22\repo<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>localRepository</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li>公共仓库地址（阿里云）</li></ol><p><a href="https://developer.aliyun.com/mvn/guide">https://developer.aliyun.com/mvn/guide</a></p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mirror</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span><span class="token punctuation">&gt;</span></span>aliyunmaven<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mirrorOf</span><span class="token punctuation">&gt;</span></span>*<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mirrorOf</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">&gt;</span></span>阿里云公共仓库<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url</span><span class="token punctuation">&gt;</span></span>https://maven.aliyun.com/repository/public<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mirror</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mirrors</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="42-6-idea集成maven"><a href="#42-6-idea集成maven" class="headerlink" title="42.6 idea集成maven"></a>42.6 idea集成maven</h3><p><img src="/../images/JAVA%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%80%EF%BC%89/image-20220614151739487.png" alt="image-20220614151739487"></p><p><img src="/../images/JAVA%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%80%EF%BC%89/image-20220614152254186.png" alt="image-20220614152254186"></p><h3 id="42-7-创建maven项目"><a href="#42-7-创建maven项目" class="headerlink" title="42.7 创建maven项目"></a>42.7 创建maven项目</h3><p><img src="/../images/JAVA%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%80%EF%BC%89/image-20220614152701306.png" alt="image-20220614152701306"></p><p><img src="/../images/JAVA%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%80%EF%BC%89/image-20220614160449045.png" alt="image-20220614160449045"></p><p><img src="/../images/JAVA%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%80%EF%BC%89/image-20220614153238114.png" alt="image-20220614153238114"></p><pre class="line-numbers language-cmd" data-language="cmd"><code class="language-cmd">[INFO] Parameter: version, Value: 1.0-SNAPSHOT[INFO] Parameter: groupId, Value: com.bwf[INFO] Parameter: artifactId, Value: maven01[INFO] Project created from Archetype in dir: C:\Users\admin\AppData\Local\Temp\archetypetmp\maven01[INFO] ------------------------------------------------------------------------[INFO] BUILD SUCCESS[INFO] ------------------------------------------------------------------------[INFO] Total time:  41.711 s[INFO] Finished at: 2022-06-14T15:33:51+08:00[INFO] ------------------------------------------------------------------------Process finished with exit code 0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/../images/JAVA%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%80%EF%BC%89/image-20220614155638024.png" alt="image-20220614155638024"></p><h3 id="42-8-项目结构"><a href="#42-8-项目结构" class="headerlink" title="42.8 项目结构"></a>42.8 项目结构</h3><p><img src="/../images/JAVA%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%80%EF%BC%89/image-20220614163513772.png" alt="image-20220614163513772"></p><h3 id="42-9-pom-xml"><a href="#42-9-pom-xml" class="headerlink" title="42.9 pom.xml"></a>42.9 pom.xml</h3><p>project object model 项目对象模型</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!-- 组织ID --&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.bwf<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span><span class="token comment">&lt;!-- 项目名 --&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>maven01<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span><span class="token comment">&lt;!-- 版本 --&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>1.0-SNAPSHOT<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span><span class="token comment">&lt;!-- 项目类型 war jar(默认) pom --&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>packaging</span><span class="token punctuation">&gt;</span></span>war<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>packaging</span><span class="token punctuation">&gt;</span></span><span class="token comment">&lt;!-- 自定义属性 --&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>properties</span><span class="token punctuation">&gt;</span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>project.build.sourceEncoding</span><span class="token punctuation">&gt;</span></span>UTF-8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>project.build.sourceEncoding</span><span class="token punctuation">&gt;</span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>maven.compiler.source</span><span class="token punctuation">&gt;</span></span>1.7<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>maven.compiler.source</span><span class="token punctuation">&gt;</span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>maven.compiler.target</span><span class="token punctuation">&gt;</span></span>1.7<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>maven.compiler.target</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>properties</span><span class="token punctuation">&gt;</span></span><span class="token comment">&lt;!-- 依赖 --&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>junit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>junit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>4.11<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">&gt;</span></span>test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="42-10-生命周期"><a href="#42-10-生命周期" class="headerlink" title="42.10 生命周期"></a>42.10 生命周期</h3><p><img src="C:/Users/席/Desktop/学习文档/img/1111.png" alt="1111"></p><ol><li>Clean Lifecycle       清理（clean）</li></ol><p><img src="/../images/JAVA%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%80%EF%BC%89/image-20220615103042019.png" alt="image-20220615103042019"></p><ol start="2"><li><p>Default  Lifecycle   编译（compile），测试（test），打包（package），安装（install）</p></li><li><p>Site Lifecycle           生成项目报告，站点，发布站点</p></li></ol><h3 id="42-11-依赖管理"><a href="#42-11-依赖管理" class="headerlink" title="42.11 依赖管理"></a>42.11 依赖管理</h3><h4 id="42-11-1-依赖范围"><a href="#42-11-1-依赖范围" class="headerlink" title="42.11.1 依赖范围"></a>42.11.1 依赖范围</h4><p><img src="/../images/JAVA%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%80%EF%BC%89/image-20220615144239223.png" alt="image-20220615144239223"></p><h4 id="42-11-2-依赖传递"><a href="#42-11-2-依赖传递" class="headerlink" title="42.11.2 依赖传递"></a>42.11.2 依赖传递</h4><p><img src="/../images/JAVA%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%80%EF%BC%89/image-20220615135804425.png" alt="image-20220615135804425"></p><p><img src="/../images/JAVA%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%80%EF%BC%89/image-20220615144703083.png" alt="image-20220615144703083"></p><ol><li>当依赖中出现相同资源时，层级越深，优先级越低，层级越浅，优先级越高</li><li>当同级配置了相同资源的不同版本，配置顺序靠后的覆盖配置顺序靠前的</li></ol><h4 id="42-11-3-可选依赖"><a href="#42-11-3-可选依赖" class="headerlink" title="42.11.3 可选依赖"></a>42.11.3 可选依赖</h4><p><img src="/../images/JAVA%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%80%EF%BC%89/image-20220615164832846.png" alt="image-20220615164832846"></p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!-- 可选依赖：true隐藏 默认false可见 --&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>optional</span><span class="token punctuation">&gt;</span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>optional</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="42-11-4-依赖排除"><a href="#42-11-4-依赖排除" class="headerlink" title="42.11.4 依赖排除"></a>42.11.4 依赖排除</h4><p><img src="/../images/JAVA%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%80%EF%BC%89/image-20220615165131650.png" alt="image-20220615165131650"></p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!-- 依赖排除 --&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.bwf<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>maven01<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>1.0-SNAPSHOT<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exclusions</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exclusion</span><span class="token punctuation">&gt;</span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.alibaba<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>fastjson<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exclusion</span><span class="token punctuation">&gt;</span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exclusions</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="42-12-聚合"><a href="#42-12-聚合" class="headerlink" title="42.12 聚合"></a>42.12 聚合</h3><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.bwf<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>shop<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>1.0-SNAPSHOT<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>packaging</span><span class="token punctuation">&gt;</span></span>pom<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>packaging</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>modules</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>module</span><span class="token punctuation">&gt;</span></span>../shop_service<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>module</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>module</span><span class="token punctuation">&gt;</span></span>../shop_web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>module</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>module</span><span class="token punctuation">&gt;</span></span>../shop_dao/shop_dao<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>module</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>modules</span><span class="token punctuation">&gt;</span></span>    <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="42-13-继承"><a href="#42-13-继承" class="headerlink" title="42.13 继承"></a>42.13 继承</h3><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>modelVersion</span><span class="token punctuation">&gt;</span></span>4.0.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>modelVersion</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>parent</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.bwf<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>shop<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>1.0-SNAPSHOT<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>parent</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>shop_web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>packaging</span><span class="token punctuation">&gt;</span></span>war<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>packaging</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="43-Druid"><a href="#43-Druid" class="headerlink" title="43. Druid"></a>43. Druid</h2><p><a href="https://github.com/alibaba/druid/wiki/%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98">https://github.com/alibaba/druid/wiki/%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98</a></p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> 系统笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>主题测试</title>
      <link href="/2023/01/29/zhu-ti-ce-shi/"/>
      <url>/2023/01/29/zhu-ti-ce-shi/</url>
      
        <content type="html"><![CDATA[<p>​矮行星它们的特点是外幔和表面由冰冻的水和气体元素组成的一些低熔点的化合物组成，有的其中混杂着的一些由重元素化合物组成的岩石质的矿物质，厚度占星体半径的比例相对较大，但所占星体相对质量却不大，内部可能有一个岩石质占主要物质组成部分的核心，占星体质量的绝大部分，星体体积和总质量不大，平均密度较小，一些大行星的卫星也具有这种类似冰矮星的结构，像木卫二、三、四，土卫一、六等。对于行星级的冰矮星来讲，最大的是冥王星，直径2370±20公里，最小的卡戎，直径约800公里左右。像谷神星这样的距太阳较近的行星，表面的冰物质主要是水，而冥王星和卡戎的表面冰物质主要是水和熔点更低的甲烷、氮、一氧化碳等物质。过去曾将这些矮行星算作小行星中的一类，直到2006年才将它们从一般小行星中分离出来，划作单独的一类，称为矮行星，并把冥王星和冥卫一归入其中。<br>​矮行星的这种星体结构和它产生的地处太阳系外围的低温环境和自身的质量有关，一方面，太阳的温度不足以将它们的由气体元素组成的低熔点物质驱散，另一方面，它们自身原始质量较小，星体本身不能将氢氦等较轻的轻元素气体束缚住。<br>​但星体收缩产生的热量也不能将较重一些的气体元素组成的化合物如水和碳氢化合物等完全驱散，而会保留下一部分，同时它的足够的引力又使它足可以形成分层的物质结构，使较轻的物质浮于较重的由重元素组成的岩石质物质的表面，并随着星体以后的冷却，在表面上凝固下来，因此，会形成具有这种物质结构的星体。</p>]]></content>
      
      
      <categories>
          
          <category> 文档资料 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 测试 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
